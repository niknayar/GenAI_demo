{"version":3,"file":"static/js/818.db88028f.chunk.js","mappings":"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AY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,SAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,SAAY,WACpC,WAAY,WAAY,SAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,UAAY,WACpC,WAAY,WAAY,WAAY,SACpC,WAAY,WAAY,WAAY,SACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,SACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,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","sources":["../node_modules/@aws-sdk/client-s3/models/models_0.ts","../node_modules/@aws-sdk/xml-builder/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/xml-builder/src/XmlNode.ts","../node_modules/@aws-sdk/xml-builder/src/escape-attribute.ts","../node_modules/@aws-sdk/xml-builder/src/XmlText.ts","../node_modules/@aws-sdk/xml-builder/src/escape-element.ts","../node_modules/@aws-sdk/client-s3/protocols/Aws_restXml.ts","../node_modules/@aws-sdk/middleware-bucket-endpoint/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/util-arn-parser/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/util-arn-parser/src/index.ts","../node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketHostnameUtils.ts","../node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketHostname.ts","../node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketEndpointMiddleware.ts","../node_modules/@aws-sdk/middleware-sdk-s3/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/middleware-sdk-s3/src/validate-bucket-name.ts","../node_modules/@aws-sdk/middleware-sdk-s3/src/use-regional-endpoint.ts","../node_modules/@aws-sdk/middleware-sdk-s3/src/throw-200-exceptions.ts","../node_modules/@aws-sdk/middleware-ssec/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/middleware-ssec/src/index.ts","../node_modules/@aws-sdk/client-s3/commands/CopyObjectCommand.ts","../node_modules/@aws-sdk/client-s3/commands/GetObjectCommand.ts","../node_modules/@aws-sdk/client-s3/commands/DeleteObjectCommand.ts","../node_modules/@aws-sdk/client-s3/commands/ListObjectsV2Command.ts","../node_modules/@aws-sdk/util-format-url/src/index.ts","../node_modules/@aws-sdk/util-create-request/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/util-create-request/src/index.ts","../node_modules/@aws-sdk/s3-request-presigner/node_modules/tslib/tslib.es6.js","../node_modules/@aws-amplify/storage/src/common/StorageErrorStrings.ts","../node_modules/@aws-sdk/s3-request-presigner/src/presigner.ts","../node_modules/@aws-sdk/s3-request-presigner/src/constants.ts","../node_modules/@aws-amplify/storage/src/providers/axios-http-handler.ts","../node_modules/@aws-amplify/storage/src/common/StorageConstants.ts","../node_modules/@aws-amplify/storage/src/common/StorageUtils.ts","../node_modules/@aws-sdk/eventstream-marshaller/src/Int64.ts","../node_modules/@aws-sdk/eventstream-marshaller/src/HeaderMarshaller.ts","../node_modules/@aws-sdk/eventstream-marshaller/src/EventStreamMarshaller.ts","../node_modules/@aws-sdk/eventstream-marshaller/src/splitMessage.ts","../node_modules/@aws-sdk/eventstream-serde-universal/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/eventstream-serde-universal/src/getChunkedStream.ts","../node_modules/@aws-sdk/eventstream-serde-universal/src/EventStreamMarshaller.ts","../node_modules/@aws-sdk/eventstream-serde-universal/src/getUnmarshalledStream.ts","../node_modules/@aws-sdk/eventstream-serde-browser/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/eventstream-serde-browser/src/utils.ts","../node_modules/@aws-sdk/eventstream-serde-browser/src/EventStreamMarshaller.ts","../node_modules/@aws-sdk/hash-blob-browser/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/chunked-blob-reader/src/index.ts","../node_modules/@aws-sdk/hash-blob-browser/src/index.ts","../node_modules/@aws-sdk/md5-js/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/md5-js/src/constants.ts","../node_modules/@aws-sdk/md5-js/src/index.ts","../node_modules/@aws-sdk/client-s3/endpoints.ts","../node_modules/@aws-sdk/client-s3/runtimeConfig.shared.ts","../node_modules/@aws-sdk/client-s3/runtimeConfig.browser.ts","../node_modules/@aws-sdk/eventstream-serde-browser/src/provider.ts","../node_modules/@aws-sdk/eventstream-serde-config-resolver/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/eventstream-serde-config-resolver/src/EventStreamSerdeConfig.ts","../node_modules/@aws-sdk/middleware-expect-continue/node_modules/tslib/tslib.es6.js","../node_modules/@aws-sdk/middleware-expect-continue/src/index.ts","../node_modules/@aws-sdk/client-s3/models/models_1.ts","../node_modules/@aws-sdk/client-s3/S3Client.ts","../node_modules/@aws-sdk/middleware-bucket-endpoint/src/configurations.ts","../node_modules/@aws-amplify/storage/src/common/S3ClientUtils.ts","../node_modules/@aws-sdk/client-s3/commands/PutObjectCommand.ts","../node_modules/@aws-sdk/client-s3/commands/CreateMultipartUploadCommand.ts","../node_modules/@aws-sdk/client-s3/commands/UploadPartCommand.ts","../node_modules/@aws-amplify/storage/src/providers/AWSS3UploadTask.ts","../node_modules/@aws-sdk/client-s3/commands/CompleteMultipartUploadCommand.ts","../node_modules/@aws-sdk/client-s3/commands/AbortMultipartUploadCommand.ts","../node_modules/@aws-sdk/client-s3/commands/ListPartsCommand.ts","../node_modules/@aws-amplify/storage/src/providers/AWSS3ProviderManagedUpload.ts","../node_modules/@aws-amplify/storage/src/providers/AWSS3Provider.ts","../node_modules/@aws-amplify/storage/src/Storage.ts","../node_modules/@aws-amplify/storage/src/index.ts","../node_modules/@aws-amplify/ui-components/dist/esm-es5/storage-helpers-1afafead.js","../node_modules/@aws-sdk/eventstream-marshaller/node_modules/@aws-crypto/crc32/src/aws_crc32.ts","../node_modules/@aws-sdk/eventstream-marshaller/node_modules/@aws-crypto/crc32/src/index.ts","../node_modules/@aws-sdk/eventstream-marshaller/node_modules/tslib/tslib.es6.js","../node_modules/axios/index.js","../node_modules/axios/lib/adapters/xhr.js","../node_modules/axios/lib/axios.js","../node_modules/axios/lib/cancel/Cancel.js","../node_modules/axios/lib/cancel/CancelToken.js","../node_modules/axios/lib/cancel/isCancel.js","../node_modules/axios/lib/core/Axios.js","../node_modules/axios/lib/core/InterceptorManager.js","../node_modules/axios/lib/core/buildFullPath.js","../node_modules/axios/lib/core/createError.js","../node_modules/axios/lib/core/dispatchRequest.js","../node_modules/axios/lib/core/enhanceError.js","../node_modules/axios/lib/core/mergeConfig.js","../node_modules/axios/lib/core/settle.js","../node_modules/axios/lib/core/transformData.js","../node_modules/axios/lib/defaults.js","../node_modules/axios/lib/env/data.js","../node_modules/axios/lib/helpers/bind.js","../node_modules/axios/lib/helpers/buildURL.js","../node_modules/axios/lib/helpers/combineURLs.js","../node_modules/axios/lib/helpers/cookies.js","../node_modules/axios/lib/helpers/isAbsoluteURL.js","../node_modules/axios/lib/helpers/isAxiosError.js","../node_modules/axios/lib/helpers/isURLSameOrigin.js","../node_modules/axios/lib/helpers/normalizeHeaderName.js","../node_modules/axios/lib/helpers/parseHeaders.js","../node_modules/axios/lib/helpers/spread.js","../node_modules/axios/lib/helpers/validator.js","../node_modules/axios/lib/utils.js","../node_modules/events/events.js","../node_modules/fast-xml-parser/src/json2xml.js","../node_modules/fast-xml-parser/src/nimndata.js","../node_modules/fast-xml-parser/src/node2json.js","../node_modules/fast-xml-parser/src/node2json_str.js","../node_modules/fast-xml-parser/src/parser.js","../node_modules/fast-xml-parser/src/util.js","../node_modules/fast-xml-parser/src/validator.js","../node_modules/fast-xml-parser/src/xmlNode.js","../node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","../node_modules/strnum/strnum.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/typeof.js"],"sourcesContent":["import { SENSITIVE_STRING, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\nimport { Readable } from \"stream\";\n\n/**\n * <p>Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will\n *          wait before permanently removing all parts of the upload. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">\n *             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the\n *             <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\nexport interface AbortIncompleteMultipartUpload {\n  /**\n   * <p>Specifies the number of days after which Amazon S3 aborts an incomplete multipart\n   *          upload.</p>\n   */\n  DaysAfterInitiation?: number;\n}\n\nexport namespace AbortIncompleteMultipartUpload {\n  export const filterSensitiveLog = (obj: AbortIncompleteMultipartUpload): any => ({\n    ...obj,\n  });\n}\n\nexport type RequestCharged = \"requester\";\n\nexport interface AbortMultipartUploadOutput {\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace AbortMultipartUploadOutput {\n  export const filterSensitiveLog = (obj: AbortMultipartUploadOutput): any => ({\n    ...obj,\n  });\n}\n\nexport type RequestPayer = \"requester\";\n\nexport interface AbortMultipartUploadRequest {\n  /**\n   * <p>The bucket name to which the upload was taking place. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Key of the object for which the multipart upload was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Upload ID that identifies the multipart upload.</p>\n   */\n  UploadId: string | undefined;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace AbortMultipartUploadRequest {\n  export const filterSensitiveLog = (obj: AbortMultipartUploadRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified multipart upload does not exist.</p>\n */\nexport interface NoSuchUpload extends __SmithyException, $MetadataBearer {\n  name: \"NoSuchUpload\";\n  $fault: \"client\";\n}\n\nexport namespace NoSuchUpload {\n  export const filterSensitiveLog = (obj: NoSuchUpload): any => ({\n    ...obj,\n  });\n}\n\nexport type BucketAccelerateStatus = \"Enabled\" | \"Suspended\";\n\n/**\n * <p>Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\">Amazon S3\n *             Transfer Acceleration</a> in the <i>Amazon Simple Storage Service Developer\n *          Guide</i>.</p>\n */\nexport interface AccelerateConfiguration {\n  /**\n   * <p>Specifies the transfer acceleration status of the bucket.</p>\n   */\n  Status?: BucketAccelerateStatus | string;\n}\n\nexport namespace AccelerateConfiguration {\n  export const filterSensitiveLog = (obj: AccelerateConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport type Type = \"AmazonCustomerByEmail\" | \"CanonicalUser\" | \"Group\";\n\n/**\n * <p>Container for the person being granted permissions.</p>\n */\nexport interface Grantee {\n  /**\n   * <p>Screen name of the grantee.</p>\n   */\n  DisplayName?: string;\n\n  /**\n   * <p>Email address of the grantee.</p>\n   *          <note>\n   *             <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>\n   *             <ul>\n   *                <li>\n   *                   <p>US East (N. Virginia)</p>\n   *                </li>\n   *                <li>\n   *                   <p>US West (N. California)</p>\n   *                </li>\n   *                <li>\n   *                   <p> US West (Oregon)</p>\n   *                </li>\n   *                <li>\n   *                   <p> Asia Pacific (Singapore)</p>\n   *                </li>\n   *                <li>\n   *                   <p>Asia Pacific (Sydney)</p>\n   *                </li>\n   *                <li>\n   *                   <p>Asia Pacific (Tokyo)</p>\n   *                </li>\n   *                <li>\n   *                   <p>Europe (Ireland)</p>\n   *                </li>\n   *                <li>\n   *                   <p>South America (São Paulo)</p>\n   *                </li>\n   *             </ul>\n   *             <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\">Regions and Endpoints</a> in the AWS General Reference.</p>\n   *          </note>\n   */\n  EmailAddress?: string;\n\n  /**\n   * <p>The canonical user ID of the grantee.</p>\n   */\n  ID?: string;\n\n  /**\n   * <p>URI of the grantee group.</p>\n   */\n  URI?: string;\n\n  /**\n   * <p>Type of grantee</p>\n   */\n  Type: Type | string | undefined;\n}\n\nexport namespace Grantee {\n  export const filterSensitiveLog = (obj: Grantee): any => ({\n    ...obj,\n  });\n}\n\nexport type Permission = \"FULL_CONTROL\" | \"READ\" | \"READ_ACP\" | \"WRITE\" | \"WRITE_ACP\";\n\n/**\n * <p>Container for grant information.</p>\n */\nexport interface Grant {\n  /**\n   * <p>The person being granted permissions.</p>\n   */\n  Grantee?: Grantee;\n\n  /**\n   * <p>Specifies the permission given to the grantee.</p>\n   */\n  Permission?: Permission | string;\n}\n\nexport namespace Grant {\n  export const filterSensitiveLog = (obj: Grant): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the owner's display name and ID.</p>\n */\nexport interface Owner {\n  /**\n   * <p>Container for the display name of the owner.</p>\n   */\n  DisplayName?: string;\n\n  /**\n   * <p>Container for the ID of the owner.</p>\n   */\n  ID?: string;\n}\n\nexport namespace Owner {\n  export const filterSensitiveLog = (obj: Owner): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Contains the elements that set the ACL permissions for an object per grantee.</p>\n */\nexport interface AccessControlPolicy {\n  /**\n   * <p>A list of grants.</p>\n   */\n  Grants?: Grant[];\n\n  /**\n   * <p>Container for the bucket owner's display name and ID.</p>\n   */\n  Owner?: Owner;\n}\n\nexport namespace AccessControlPolicy {\n  export const filterSensitiveLog = (obj: AccessControlPolicy): any => ({\n    ...obj,\n  });\n}\n\nexport type OwnerOverride = \"Destination\";\n\n/**\n * <p>A container for information about access control for replicas.</p>\n */\nexport interface AccessControlTranslation {\n  /**\n   * <p>Specifies the replica ownership. For default and valid values, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html\">PUT bucket\n   *             replication</a> in the <i>Amazon Simple Storage Service API Reference</i>.</p>\n   */\n  Owner: OwnerOverride | string | undefined;\n}\n\nexport namespace AccessControlTranslation {\n  export const filterSensitiveLog = (obj: AccessControlTranslation): any => ({\n    ...obj,\n  });\n}\n\nexport type ServerSideEncryption = \"AES256\" | \"aws:kms\";\n\nexport interface CompleteMultipartUploadOutput {\n  /**\n   * <p>The URI that identifies the newly created object.</p>\n   */\n  Location?: string;\n\n  /**\n   * <p>The name of the bucket that contains the newly created object.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket?: string;\n\n  /**\n   * <p>The object key of the newly created object.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>If the object expiration is configured, this will contain the expiration date\n   *          (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.</p>\n   */\n  Expiration?: string;\n\n  /**\n   * <p>Entity tag that identifies the newly created object's data. Objects with different\n   *          object data will have different entity tags. The entity tag is an opaque string. The entity\n   *          tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5\n   *          digest of the object data, it will contain one or more nonhexadecimal characters and/or\n   *          will consist of less than 32 or more than 32 hexadecimal digits.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>If you specified server-side encryption either with an Amazon S3-managed encryption key or an\n   *          AWS KMS customer master key (CMK) in your initiate multipart upload request, the response\n   *          includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the\n   *          object.</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>Version ID of the newly created object, in case the bucket has versioning turned\n   *          on.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) that was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace CompleteMultipartUploadOutput {\n  export const filterSensitiveLog = (obj: CompleteMultipartUploadOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Details of the parts that were uploaded.</p>\n */\nexport interface CompletedPart {\n  /**\n   * <p>Entity tag returned when the part was uploaded.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>Part number that identifies the part. This is a positive integer between 1 and\n   *          10,000.</p>\n   */\n  PartNumber?: number;\n}\n\nexport namespace CompletedPart {\n  export const filterSensitiveLog = (obj: CompletedPart): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container for the completed multipart upload details.</p>\n */\nexport interface CompletedMultipartUpload {\n  /**\n   * <p>Array of CompletedPart data types.</p>\n   */\n  Parts?: CompletedPart[];\n}\n\nexport namespace CompletedMultipartUpload {\n  export const filterSensitiveLog = (obj: CompletedMultipartUpload): any => ({\n    ...obj,\n  });\n}\n\nexport interface CompleteMultipartUploadRequest {\n  /**\n   * <p>Name of the bucket to which the multipart upload was initiated.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Object key for which the multipart upload was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The container for the multipart upload request information.</p>\n   */\n  MultipartUpload?: CompletedMultipartUpload;\n\n  /**\n   * <p>ID for the initiated multipart upload.</p>\n   */\n  UploadId: string | undefined;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace CompleteMultipartUploadRequest {\n  export const filterSensitiveLog = (obj: CompleteMultipartUploadRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for all response elements.</p>\n */\nexport interface CopyObjectResult {\n  /**\n   * <p>Returns the ETag of the new object. The ETag reflects only changes to the contents of an\n   *          object, not its metadata. The source and destination ETag is identical for a successfully\n   *          copied object.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>Returns the date that the object was last modified.</p>\n   */\n  LastModified?: Date;\n}\n\nexport namespace CopyObjectResult {\n  export const filterSensitiveLog = (obj: CopyObjectResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface CopyObjectOutput {\n  /**\n   * <p>Container for all response elements.</p>\n   */\n  CopyObjectResult?: CopyObjectResult;\n\n  /**\n   * <p>If the object expiration is configured, the response includes this header.</p>\n   */\n  Expiration?: string;\n\n  /**\n   * <p>Version of the copied object in the destination bucket.</p>\n   */\n  CopySourceVersionId?: string;\n\n  /**\n   * <p>Version ID of the newly created copy.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) that was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The\n   *          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption\n   *          context key-value pairs.</p>\n   */\n  SSEKMSEncryptionContext?: string;\n\n  /**\n   * <p>Indicates whether the copied object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace CopyObjectOutput {\n  export const filterSensitiveLog = (obj: CopyObjectOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }),\n  });\n}\n\nexport type ObjectCannedACL =\n  | \"authenticated-read\"\n  | \"aws-exec-read\"\n  | \"bucket-owner-full-control\"\n  | \"bucket-owner-read\"\n  | \"private\"\n  | \"public-read\"\n  | \"public-read-write\";\n\nexport type MetadataDirective = \"COPY\" | \"REPLACE\";\n\nexport type ObjectLockLegalHoldStatus = \"OFF\" | \"ON\";\n\nexport type ObjectLockMode = \"COMPLIANCE\" | \"GOVERNANCE\";\n\nexport type StorageClass =\n  | \"DEEP_ARCHIVE\"\n  | \"GLACIER\"\n  | \"INTELLIGENT_TIERING\"\n  | \"ONEZONE_IA\"\n  | \"OUTPOSTS\"\n  | \"REDUCED_REDUNDANCY\"\n  | \"STANDARD\"\n  | \"STANDARD_IA\";\n\nexport type TaggingDirective = \"COPY\" | \"REPLACE\";\n\nexport interface CopyObjectRequest {\n  /**\n   * <p>The canned ACL to apply to the object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  ACL?: ObjectCannedACL | string;\n\n  /**\n   * <p>The name of the destination bucket.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Specifies caching behavior along the request/reply chain.</p>\n   */\n  CacheControl?: string;\n\n  /**\n   * <p>Specifies presentational information for the object.</p>\n   */\n  ContentDisposition?: string;\n\n  /**\n   * <p>Specifies what content encodings have been applied to the object and thus what decoding\n   *          mechanisms must be applied to obtain the media-type referenced by the Content-Type header\n   *          field.</p>\n   */\n  ContentEncoding?: string;\n\n  /**\n   * <p>The language the content is in.</p>\n   */\n  ContentLanguage?: string;\n\n  /**\n   * <p>A standard MIME type describing the format of the object data.</p>\n   */\n  ContentType?: string;\n\n  /**\n   * <p>Specifies the source object for the copy operation. You specify the value in one of two\n   *          formats, depending on whether you want to access the source object through an <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/access-points.html\">access\n   *          point</a>:</p>\n   *          <ul>\n   *             <li>\n   *                <p>For objects not accessed through an access point, specify the name of the source\n   *                bucket and the key of the source object, separated by a slash (/). For example, to\n   *                copy the object <code>reports/january.pdf</code> from the bucket\n   *                   <code>awsexamplebucket</code>, use\n   *                   <code>awsexamplebucket/reports/january.pdf</code>. The value must be URL\n   *                encoded.</p>\n   *             </li>\n   *             <li>\n   *                <p>For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format <code>arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through access point <code>my-access-point</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>. The value must be URL encoded.</p>\n   *                <note>\n   *                   <p>Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same AWS Region.</p>\n   *                </note>\n   *                <p>Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format <code>arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>. The value must be URL encoded.  </p>\n   *             </li>\n   *          </ul>\n   *          <p>To copy a specific version of an object, append <code>?versionId=<version-id></code>\n   *          to the value (for example,\n   *             <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).\n   *          If you don't specify a version ID, Amazon S3 copies the latest version of the source\n   *          object.</p>\n   */\n  CopySource: string | undefined;\n\n  /**\n   * <p>Copies the object if its entity tag (ETag) matches the specified tag.</p>\n   */\n  CopySourceIfMatch?: string;\n\n  /**\n   * <p>Copies the object if it has been modified since the specified time.</p>\n   */\n  CopySourceIfModifiedSince?: Date;\n\n  /**\n   * <p>Copies the object if its entity tag (ETag) is different than the specified ETag.</p>\n   */\n  CopySourceIfNoneMatch?: string;\n\n  /**\n   * <p>Copies the object if it hasn't been modified since the specified time.</p>\n   */\n  CopySourceIfUnmodifiedSince?: Date;\n\n  /**\n   * <p>The date and time at which the object is no longer cacheable.</p>\n   */\n  Expires?: Date;\n\n  /**\n   * <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the\n   *       object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantFullControl?: string;\n\n  /**\n   * <p>Allows grantee to read the object data and its\n   *       metadata.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantRead?: string;\n\n  /**\n   * <p>Allows grantee to read the object ACL.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantReadACP?: string;\n\n  /**\n   * <p>Allows grantee to write the ACL for the applicable\n   *       object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantWriteACP?: string;\n\n  /**\n   * <p>The key of the destination object.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>A map of metadata to store with the object in S3.</p>\n   */\n  Metadata?: { [key: string]: string };\n\n  /**\n   * <p>Specifies whether the metadata is copied from the source object or replaced with\n   *          metadata provided in the request.</p>\n   */\n  MetadataDirective?: MetadataDirective | string;\n\n  /**\n   * <p>Specifies whether the object tag-set are copied from the source object or replaced with\n   *          tag-set provided in the request.</p>\n   */\n  TaggingDirective?: TaggingDirective | string;\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The\n   *          STANDARD storage class provides high durability and high availability. Depending on\n   *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses\n   *          the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3\n   *             Service Developer Guide</i>.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>If the bucket is configured as a website, redirects requests for this object to another\n   *          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in\n   *          the object metadata.</p>\n   */\n  WebsiteRedirectLocation?: string;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for\n   *          an object protected by AWS KMS will fail if not made via SSL or using SigV4. For\n   *          information about configuring using any of the officially supported AWS SDKs and AWS CLI,\n   *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version\">Specifying the\n   *             Signature Version in Request Authentication</a> in the <i>Amazon S3 Developer\n   *             Guide</i>.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Specifies the AWS KMS Encryption Context to use for object encryption. The value of this\n   *          header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value\n   *          pairs.</p>\n   */\n  SSEKMSEncryptionContext?: string;\n\n  /**\n   * <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. </p>\n   *          <p>Specifying this header with a COPY operation doesn’t affect bucket-level settings for S3 Bucket Key.</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>Specifies the algorithm to use when decrypting the source object (for example,\n   *          AES256).</p>\n   */\n  CopySourceSSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source\n   *          object. The encryption key provided in this header must be one that was used when the\n   *          source object was created.</p>\n   */\n  CopySourceSSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  CopySourceSSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The tag-set for the object destination object this value must be used in conjunction\n   *          with the <code>TaggingDirective</code>. The tag-set must be encoded as URL Query\n   *          parameters.</p>\n   */\n  Tagging?: string;\n\n  /**\n   * <p>The Object Lock mode that you want to apply to the copied object.</p>\n   */\n  ObjectLockMode?: ObjectLockMode | string;\n\n  /**\n   * <p>The date and time when you want the copied object's Object Lock to expire.</p>\n   */\n  ObjectLockRetainUntilDate?: Date;\n\n  /**\n   * <p>Specifies whether you want to apply a Legal Hold to the copied object.</p>\n   */\n  ObjectLockLegalHoldStatus?: ObjectLockLegalHoldStatus | string;\n\n  /**\n   * <p>The account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n\n  /**\n   * <p>The account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedSourceBucketOwner?: string;\n}\n\nexport namespace CopyObjectRequest {\n  export const filterSensitiveLog = (obj: CopyObjectRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }),\n    ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>The source object of the COPY operation is not in the active tier and is only stored in\n *          Amazon S3 Glacier.</p>\n */\nexport interface ObjectNotInActiveTierError extends __SmithyException, $MetadataBearer {\n  name: \"ObjectNotInActiveTierError\";\n  $fault: \"client\";\n}\n\nexport namespace ObjectNotInActiveTierError {\n  export const filterSensitiveLog = (obj: ObjectNotInActiveTierError): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The requested bucket name is not available. The bucket namespace is shared by all users\n *          of the system. Select a different name and try again.</p>\n */\nexport interface BucketAlreadyExists extends __SmithyException, $MetadataBearer {\n  name: \"BucketAlreadyExists\";\n  $fault: \"client\";\n}\n\nexport namespace BucketAlreadyExists {\n  export const filterSensitiveLog = (obj: BucketAlreadyExists): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The bucket you tried to create already exists, and you own it. Amazon S3 returns this error\n *          in all AWS Regions except in the North Virginia Region. For legacy compatibility, if you\n *          re-create an existing bucket that you already own in the North Virginia Region, Amazon S3\n *          returns 200 OK and resets the bucket access control lists (ACLs).</p>\n */\nexport interface BucketAlreadyOwnedByYou extends __SmithyException, $MetadataBearer {\n  name: \"BucketAlreadyOwnedByYou\";\n  $fault: \"client\";\n}\n\nexport namespace BucketAlreadyOwnedByYou {\n  export const filterSensitiveLog = (obj: BucketAlreadyOwnedByYou): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateBucketOutput {\n  /**\n   * <p>Specifies the Region where the bucket will be created. If you are creating a bucket on\n   *          the US East (N. Virginia) Region (us-east-1), you do not need to specify the\n   *          location.</p>\n   */\n  Location?: string;\n}\n\nexport namespace CreateBucketOutput {\n  export const filterSensitiveLog = (obj: CreateBucketOutput): any => ({\n    ...obj,\n  });\n}\n\nexport type BucketCannedACL = \"authenticated-read\" | \"private\" | \"public-read\" | \"public-read-write\";\n\nexport type BucketLocationConstraint =\n  | \"EU\"\n  | \"af-south-1\"\n  | \"ap-east-1\"\n  | \"ap-northeast-1\"\n  | \"ap-northeast-2\"\n  | \"ap-northeast-3\"\n  | \"ap-south-1\"\n  | \"ap-southeast-1\"\n  | \"ap-southeast-2\"\n  | \"ca-central-1\"\n  | \"cn-north-1\"\n  | \"cn-northwest-1\"\n  | \"eu-central-1\"\n  | \"eu-north-1\"\n  | \"eu-south-1\"\n  | \"eu-west-1\"\n  | \"eu-west-2\"\n  | \"eu-west-3\"\n  | \"me-south-1\"\n  | \"sa-east-1\"\n  | \"us-east-2\"\n  | \"us-gov-east-1\"\n  | \"us-gov-west-1\"\n  | \"us-west-1\"\n  | \"us-west-2\";\n\n/**\n * <p>The configuration information for the bucket.</p>\n */\nexport interface CreateBucketConfiguration {\n  /**\n   * <p>Specifies the Region where the bucket will be created. If you don't specify a Region,\n   *          the bucket is created in the US East (N. Virginia) Region (us-east-1).</p>\n   */\n  LocationConstraint?: BucketLocationConstraint | string;\n}\n\nexport namespace CreateBucketConfiguration {\n  export const filterSensitiveLog = (obj: CreateBucketConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateBucketRequest {\n  /**\n   * <p>The canned ACL to apply to the bucket.</p>\n   */\n  ACL?: BucketCannedACL | string;\n\n  /**\n   * <p>The name of the bucket to create.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The configuration information for the bucket.</p>\n   */\n  CreateBucketConfiguration?: CreateBucketConfiguration;\n\n  /**\n   * <p>Allows grantee the read, write, read ACP, and write ACP permissions on the\n   *          bucket.</p>\n   */\n  GrantFullControl?: string;\n\n  /**\n   * <p>Allows grantee to list the objects in the bucket.</p>\n   */\n  GrantRead?: string;\n\n  /**\n   * <p>Allows grantee to read the bucket ACL.</p>\n   */\n  GrantReadACP?: string;\n\n  /**\n   * <p>Allows grantee to create, overwrite, and delete any object in the bucket.</p>\n   */\n  GrantWrite?: string;\n\n  /**\n   * <p>Allows grantee to write the ACL for the applicable bucket.</p>\n   */\n  GrantWriteACP?: string;\n\n  /**\n   * <p>Specifies whether you want S3 Object Lock to be enabled for the new bucket.</p>\n   */\n  ObjectLockEnabledForBucket?: boolean;\n}\n\nexport namespace CreateBucketRequest {\n  export const filterSensitiveLog = (obj: CreateBucketRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateMultipartUploadOutput {\n  /**\n   * <p>If the bucket has a lifecycle rule configured with an action to abort incomplete\n   *          multipart uploads and the prefix in the lifecycle rule matches the object name in the\n   *          request, the response includes this header. The header indicates when the initiated\n   *          multipart upload becomes eligible for an abort operation. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">\n   *             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>\n   *\n   *          <p>The response also includes the <code>x-amz-abort-rule-id</code> header that provides the\n   *          ID of the lifecycle configuration rule that defines this action.</p>\n   */\n  AbortDate?: Date;\n\n  /**\n   * <p>This header is returned along with the <code>x-amz-abort-date</code> header. It\n   *          identifies the applicable lifecycle configuration rule that defines the action to abort\n   *          incomplete multipart uploads.</p>\n   */\n  AbortRuleId?: string;\n\n  /**\n   * <p>The name of the bucket to which the multipart upload was initiated. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket?: string;\n\n  /**\n   * <p>Object key for which the multipart upload was initiated.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>ID for the initiated multipart upload.</p>\n   */\n  UploadId?: string;\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) that was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The\n   *          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption\n   *          context key-value pairs.</p>\n   */\n  SSEKMSEncryptionContext?: string;\n\n  /**\n   * <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace CreateMultipartUploadOutput {\n  export const filterSensitiveLog = (obj: CreateMultipartUploadOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }),\n  });\n}\n\nexport interface CreateMultipartUploadRequest {\n  /**\n   * <p>The canned ACL to apply to the object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  ACL?: ObjectCannedACL | string;\n\n  /**\n   * <p>The name of the bucket to which to initiate the upload</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Specifies caching behavior along the request/reply chain.</p>\n   */\n  CacheControl?: string;\n\n  /**\n   * <p>Specifies presentational information for the object.</p>\n   */\n  ContentDisposition?: string;\n\n  /**\n   * <p>Specifies what content encodings have been applied to the object and thus what decoding\n   *          mechanisms must be applied to obtain the media-type referenced by the Content-Type header\n   *          field.</p>\n   */\n  ContentEncoding?: string;\n\n  /**\n   * <p>The language the content is in.</p>\n   */\n  ContentLanguage?: string;\n\n  /**\n   * <p>A standard MIME type describing the format of the object data.</p>\n   */\n  ContentType?: string;\n\n  /**\n   * <p>The date and time at which the object is no longer cacheable.</p>\n   */\n  Expires?: Date;\n\n  /**\n   * <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the\n   *       object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantFullControl?: string;\n\n  /**\n   * <p>Allows grantee to read the object data and its\n   *       metadata.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantRead?: string;\n\n  /**\n   * <p>Allows grantee to read the object ACL.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantReadACP?: string;\n\n  /**\n   * <p>Allows grantee to write the ACL for the applicable\n   *       object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantWriteACP?: string;\n\n  /**\n   * <p>Object key for which the multipart upload is to be initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>A map of metadata to store with the object in S3.</p>\n   */\n  Metadata?: { [key: string]: string };\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The\n   *          STANDARD storage class provides high durability and high availability. Depending on\n   *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses\n   *          the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3\n   *             Service Developer Guide</i>.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>If the bucket is configured as a website, redirects requests for this object to another\n   *          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in\n   *          the object metadata.</p>\n   */\n  WebsiteRedirectLocation?: string;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Specifies the ID of the symmetric customer managed AWS KMS CMK to use for object\n   *          encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not\n   *          made via SSL or using SigV4. For information about configuring using any of the officially\n   *          supported AWS SDKs and AWS CLI, see <a href=\"https://docs.aws.amazon.com/http:/docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version\">Specifying the Signature Version in Request Authentication</a>\n   *          in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Specifies the AWS KMS Encryption Context to use for object encryption. The value of this\n   *          header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value\n   *          pairs.</p>\n   */\n  SSEKMSEncryptionContext?: string;\n\n  /**\n   * <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.</p>\n   *          <p>Specifying this header with an object operation doesn’t affect bucket-level settings for S3 Bucket Key.</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The tag-set for the object. The tag-set must be encoded as URL Query parameters.</p>\n   */\n  Tagging?: string;\n\n  /**\n   * <p>Specifies the Object Lock mode that you want to apply to the uploaded object.</p>\n   */\n  ObjectLockMode?: ObjectLockMode | string;\n\n  /**\n   * <p>Specifies the date and time when you want the Object Lock to expire.</p>\n   */\n  ObjectLockRetainUntilDate?: Date;\n\n  /**\n   * <p>Specifies whether you want to apply a Legal Hold to the uploaded object.</p>\n   */\n  ObjectLockLegalHoldStatus?: ObjectLockLegalHoldStatus | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace CreateMultipartUploadRequest {\n  export const filterSensitiveLog = (obj: CreateMultipartUploadRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DeleteBucketRequest {\n  /**\n   * <p>Specifies the bucket being deleted.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketAnalyticsConfigurationRequest {\n  /**\n   * <p>The name of the bucket from which an analytics configuration is deleted.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID that identifies the analytics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketAnalyticsConfigurationRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketAnalyticsConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketCorsRequest {\n  /**\n   * <p>Specifies the bucket whose <code>cors</code> configuration is being deleted.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketCorsRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketCorsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketEncryptionRequest {\n  /**\n   * <p>The name of the bucket containing the server-side encryption configuration to\n   *          delete.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketEncryptionRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketEncryptionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketIntelligentTieringConfigurationRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>\n   */\n  Id: string | undefined;\n}\n\nexport namespace DeleteBucketIntelligentTieringConfigurationRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketIntelligentTieringConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketInventoryConfigurationRequest {\n  /**\n   * <p>The name of the bucket containing the inventory configuration to delete.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the inventory configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketInventoryConfigurationRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketInventoryConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketLifecycleRequest {\n  /**\n   * <p>The bucket name of the lifecycle to delete.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketLifecycleRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketLifecycleRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketMetricsConfigurationRequest {\n  /**\n   * <p>The name of the bucket containing the metrics configuration to delete.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the metrics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketMetricsConfigurationRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketMetricsConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketOwnershipControlsRequest {\n  /**\n   * <p>The Amazon S3 bucket whose <code>OwnershipControls</code> you want to delete. </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketOwnershipControlsRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketOwnershipControlsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketPolicyRequest {\n  /**\n   * <p>The bucket name.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketPolicyRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketPolicyRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketReplicationRequest {\n  /**\n   * <p> The bucket name. </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketReplicationRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketReplicationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketTaggingRequest {\n  /**\n   * <p>The bucket that has the tag set to be removed.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketTaggingRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketTaggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteBucketWebsiteRequest {\n  /**\n   * <p>The bucket name for which you want to remove the website configuration. </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteBucketWebsiteRequest {\n  export const filterSensitiveLog = (obj: DeleteBucketWebsiteRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteObjectOutput {\n  /**\n   * <p>Specifies whether the versioned object that was permanently deleted was (true) or was\n   *          not (false) a delete marker.</p>\n   */\n  DeleteMarker?: boolean;\n\n  /**\n   * <p>Returns the version ID of the delete marker created as a result of the DELETE\n   *          operation.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace DeleteObjectOutput {\n  export const filterSensitiveLog = (obj: DeleteObjectOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteObjectRequest {\n  /**\n   * <p>The bucket name of the bucket containing the object. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Key name of the object to delete.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The concatenation of the authentication device's serial number, a space, and the value\n   *          that is displayed on your authentication device. Required to permanently delete a versioned\n   *          object if versioning is configured with MFA delete enabled.</p>\n   */\n  MFA?: string;\n\n  /**\n   * <p>VersionId used to reference a specific version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>Indicates whether S3 Object Lock should bypass Governance-mode restrictions to process\n   *          this operation.</p>\n   */\n  BypassGovernanceRetention?: boolean;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteObjectRequest {\n  export const filterSensitiveLog = (obj: DeleteObjectRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Information about the deleted object.</p>\n */\nexport interface DeletedObject {\n  /**\n   * <p>The name of the deleted object.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>The version ID of the deleted object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies whether the versioned object that was permanently deleted was (true) or was\n   *          not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or\n   *          not (false) a delete marker was created.</p>\n   */\n  DeleteMarker?: boolean;\n\n  /**\n   * <p>The version ID of the delete marker created as a result of the DELETE operation. If you\n   *          delete a specific object version, the value returned by this header is the version ID of\n   *          the object version deleted.</p>\n   */\n  DeleteMarkerVersionId?: string;\n}\n\nexport namespace DeletedObject {\n  export const filterSensitiveLog = (obj: DeletedObject): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for all error elements.</p>\n */\nexport interface _Error {\n  /**\n   * <p>The error key.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>The version ID of the error.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The error code is a string that uniquely identifies an error condition. It is meant to\n   *          be read and understood by programs that detect and handle errors by type. </p>\n   *          <p class=\"title\">\n   *             <b>Amazon S3 error codes</b>\n   *          </p>\n   *          <ul>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> AccessDenied </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Access Denied</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> AccountProblem</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> There is a problem with your AWS account\n   *                      that prevents the operation from completing successfully. Contact AWS Support\n   *                      for further assistance.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> AllAccessDisabled</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> All access to this Amazon S3 resource has been\n   *                      disabled. Contact AWS Support for further assistance.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> AmbiguousGrantByEmailAddress</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The email address you provided is\n   *                      associated with more than one account.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> AuthorizationHeaderMalformed</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The authorization header you provided is\n   *                      invalid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> BadDigest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The Content-MD5 you specified did not\n   *                      match what we received.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> BucketAlreadyExists</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The requested bucket name is not\n   *                      available. The bucket namespace is shared by all users of the system. Please\n   *                      select a different name and try again.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 409 Conflict</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> BucketAlreadyOwnedByYou</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The bucket you tried to create already\n   *                      exists, and you own it. Amazon S3 returns this error in all AWS Regions except in\n   *                      the North Virginia Region. For legacy compatibility, if you re-create an\n   *                      existing bucket that you already own in the North Virginia Region, Amazon S3 returns\n   *                      200 OK and resets the bucket access control lists (ACLs).</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> 409 Conflict (in all Regions except the North\n   *                      Virginia Region) </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> BucketNotEmpty</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The bucket you tried to delete is not\n   *                      empty.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 409 Conflict</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> CredentialsNotSupported</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> This request does not support\n   *                      credentials.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> CrossLocationLoggingProhibited</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Cross-location logging not allowed.\n   *                      Buckets in one geographic location cannot log information to a bucket in\n   *                      another location.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> EntityTooSmall</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your proposed upload is smaller than the\n   *                      minimum allowed object size.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> EntityTooLarge</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your proposed upload exceeds the maximum\n   *                      allowed object size.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> ExpiredToken</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The provided token has expired.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> IllegalVersioningConfigurationException </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Indicates that the versioning\n   *                      configuration specified in the request is invalid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> IncompleteBody</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> You did not provide the number of bytes\n   *                      specified by the Content-Length HTTP header</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> IncorrectNumberOfFilesInPostRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> POST requires exactly one file upload per\n   *                      request.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InlineDataTooLarge</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Inline data exceeds the maximum allowed\n   *                      size.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InternalError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> We encountered an internal error. Please\n   *                      try again.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 500 Internal Server Error</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Server</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidAccessKeyId</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The AWS access key ID you provided does\n   *                      not exist in our records.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidAddressingHeader</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> You must specify the Anonymous\n   *                      role.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> N/A</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidArgument</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Invalid Argument</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidBucketName</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified bucket is not valid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidBucketState</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The request is not valid with the current\n   *                      state of the bucket.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 409 Conflict</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidDigest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The Content-MD5 you specified is not\n   *                      valid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidEncryptionAlgorithmError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The encryption request you specified is\n   *                      not valid. The valid value is AES256.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidLocationConstraint</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified location constraint is not\n   *                      valid. For more information about Regions, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro\">How to Select a\n   *                         Region for Your Buckets</a>. </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidObjectState</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The operation is not valid for the current\n   *                      state of the object.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidPart</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> One or more of the specified parts could\n   *                      not be found. The part might not have been uploaded, or the specified entity\n   *                      tag might not have matched the part's entity tag.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidPartOrder</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The list of parts was not in ascending\n   *                      order. Parts list must be specified in order by part number.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidPayer</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> All access to this object has been\n   *                      disabled. Please contact AWS Support for further assistance.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidPolicyDocument</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The content of the form does not meet the\n   *                      conditions specified in the policy document.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRange</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The requested range cannot be\n   *                      satisfied.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 416 Requested Range Not\n   *                      Satisfiable</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Please use AWS4-HMAC-SHA256.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> SOAP requests must be made over an HTTPS\n   *                      connection.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Acceleration is not\n   *                      supported for buckets with non-DNS compliant names.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Acceleration is not\n   *                      supported for buckets with periods (.) in their names.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Accelerate endpoint only\n   *                      supports virtual style requests.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Accelerate is not configured\n   *                      on this bucket.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Accelerate is disabled on\n   *                      this bucket.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Acceleration is not\n   *                      supported on this bucket. Contact AWS Support for more information.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Amazon S3 Transfer Acceleration cannot be\n   *                      enabled on this bucket. Contact AWS Support for more information.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> N/A</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidSecurity</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The provided security credentials are not\n   *                      valid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidSOAPRequest</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The SOAP request body is invalid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidStorageClass</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The storage class you specified is not\n   *                      valid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidTargetBucketForLogging</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The target bucket for logging does not\n   *                      exist, is not owned by you, or does not have the appropriate grants for the\n   *                      log-delivery group. </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidToken</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The provided token is malformed or\n   *                      otherwise invalid.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> InvalidURI</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Couldn't parse the specified URI.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> KeyTooLongError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your key is too long.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MalformedACLError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The XML you provided was not well-formed\n   *                      or did not validate against our published schema.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MalformedPOSTRequest </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The body of your POST request is not\n   *                      well-formed multipart/form-data.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MalformedXML</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> This happens when the user sends malformed\n   *                      XML (XML that doesn't conform to the published XSD) for the configuration. The\n   *                      error message is, \"The XML you provided was not well-formed or did not validate\n   *                      against our published schema.\" </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MaxMessageLengthExceeded</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your request was too big.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MaxPostPreDataLengthExceededError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your POST request fields preceding the\n   *                      upload file were too large.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MetadataTooLarge</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your metadata headers exceed the maximum\n   *                      allowed metadata size.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MethodNotAllowed</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified method is not allowed\n   *                      against this resource.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 405 Method Not Allowed</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MissingAttachment</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> A SOAP attachment was expected, but none\n   *                      were found.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> N/A</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MissingContentLength</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> You must provide the Content-Length HTTP\n   *                      header.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 411 Length Required</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MissingRequestBodyError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> This happens when the user sends an empty\n   *                      XML document as a request. The error message is, \"Request body is empty.\"\n   *                   </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MissingSecurityElement</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The SOAP 1.1 request is missing a security\n   *                      element.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> MissingSecurityHeader</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your request is missing a required\n   *                      header.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoLoggingStatusForKey</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> There is no such thing as a logging status\n   *                      subresource for a key.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoSuchBucket</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified bucket does not\n   *                      exist.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 404 Not Found</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoSuchBucketPolicy</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified bucket does not have a\n   *                      bucket policy.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 404 Not Found</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoSuchKey</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified key does not exist.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 404 Not Found</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoSuchLifecycleConfiguration</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The lifecycle configuration does not\n   *                      exist. </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 404 Not Found</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoSuchUpload</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The specified multipart upload does not\n   *                      exist. The upload ID might be invalid, or the multipart upload might have been\n   *                      aborted or completed.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 404 Not Found</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NoSuchVersion </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Indicates that the version ID specified in\n   *                      the request does not match an existing version.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 404 Not Found</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NotImplemented</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> A header you provided implies\n   *                      functionality that is not implemented.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 501 Not Implemented</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Server</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> NotSignedUp</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your account is not signed up for the Amazon S3\n   *                      service. You must sign up before you can use Amazon S3. You can sign up at the\n   *                      following URL: https://aws.amazon.com/s3</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> OperationAborted</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> A conflicting conditional operation is\n   *                      currently in progress against this resource. Try again.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 409 Conflict</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> PermanentRedirect</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The bucket you are attempting to access\n   *                      must be addressed using the specified endpoint. Send all future requests to\n   *                      this endpoint.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 301 Moved Permanently</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> PreconditionFailed</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> At least one of the preconditions you\n   *                      specified did not hold.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 412 Precondition Failed</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> Redirect</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Temporary redirect.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 307 Moved Temporarily</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> RestoreAlreadyInProgress</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Object restore is already in\n   *                      progress.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 409 Conflict</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> RequestIsNotMultiPartContent</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Bucket POST must be of the enclosure-type\n   *                      multipart/form-data.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> RequestTimeout</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Your socket connection to the server was\n   *                      not read from or written to within the timeout period.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> RequestTimeTooSkewed</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The difference between the request time\n   *                      and the server's time is too large.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> RequestTorrentOfBucketError</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Requesting the torrent file of a bucket is\n   *                      not permitted.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> SignatureDoesNotMatch</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The request signature we calculated does\n   *                      not match the signature you provided. Check your AWS secret access key and\n   *                      signing method. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">REST Authentication</a> and\n   *                         <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html\">SOAP Authentication</a>\n   *                      for details.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 403 Forbidden</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> ServiceUnavailable</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Reduce your request rate.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 503 Service Unavailable</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Server</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> SlowDown</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> Reduce your request rate.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 503 Slow Down</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Server</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> TemporaryRedirect</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> You are being redirected to the bucket\n   *                      while DNS updates.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 307 Moved Temporarily</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> TokenRefreshRequired</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The provided token must be\n   *                      refreshed.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> TooManyBuckets</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> You have attempted to create more buckets\n   *                      than allowed.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> UnexpectedContent</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> This request does not support\n   *                      content.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> UnresolvableGrantByEmailAddress</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The email address you provided does not\n   *                      match any account on record.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <i>Code:</i> UserKeyMustBeSpecified</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>Description:</i> The bucket POST must contain the specified\n   *                      field name. If it is specified, check the order of the fields.</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>HTTP Status Code:</i> 400 Bad Request</p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <i>SOAP Fault Code Prefix:</i> Client</p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *          </ul>\n   *          <p></p>\n   */\n  Code?: string;\n\n  /**\n   * <p>The error message contains a generic description of the error condition in English. It\n   *          is intended for a human audience. Simple programs display the message directly to the end\n   *          user if they encounter an error condition they don't know how or don't care to handle.\n   *          Sophisticated programs with more exhaustive error handling and proper internationalization\n   *          are more likely to ignore the error message.</p>\n   */\n  Message?: string;\n}\n\nexport namespace _Error {\n  export const filterSensitiveLog = (obj: _Error): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteObjectsOutput {\n  /**\n   * <p>Container element for a successful delete. It identifies the object that was\n   *          successfully deleted.</p>\n   */\n  Deleted?: DeletedObject[];\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n\n  /**\n   * <p>Container for a failed delete operation that describes the object that Amazon S3 attempted to\n   *          delete and the error it encountered.</p>\n   */\n  Errors?: _Error[];\n}\n\nexport namespace DeleteObjectsOutput {\n  export const filterSensitiveLog = (obj: DeleteObjectsOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Object Identifier is unique value to identify objects.</p>\n */\nexport interface ObjectIdentifier {\n  /**\n   * <p>Key name of the object to delete.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>VersionId for the specific version of the object to delete.</p>\n   */\n  VersionId?: string;\n}\n\nexport namespace ObjectIdentifier {\n  export const filterSensitiveLog = (obj: ObjectIdentifier): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the objects to delete.</p>\n */\nexport interface Delete {\n  /**\n   * <p>The objects to delete.</p>\n   */\n  Objects: ObjectIdentifier[] | undefined;\n\n  /**\n   * <p>Element to enable quiet mode for the request. When you add this element, you must set\n   *          its value to true.</p>\n   */\n  Quiet?: boolean;\n}\n\nexport namespace Delete {\n  export const filterSensitiveLog = (obj: Delete): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteObjectsRequest {\n  /**\n   * <p>The bucket name containing the objects to delete. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Container for the request.</p>\n   */\n  Delete: Delete | undefined;\n\n  /**\n   * <p>The concatenation of the authentication device's serial number, a space, and the value\n   *          that is displayed on your authentication device. Required to permanently delete a versioned\n   *          object if versioning is configured with MFA delete enabled.</p>\n   */\n  MFA?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>Specifies whether you want to delete this object even if it has a Governance-type Object\n   *          Lock in place. You must have sufficient permissions to perform this operation.</p>\n   */\n  BypassGovernanceRetention?: boolean;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteObjectsRequest {\n  export const filterSensitiveLog = (obj: DeleteObjectsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteObjectTaggingOutput {\n  /**\n   * <p>The versionId of the object the tag-set was removed from.</p>\n   */\n  VersionId?: string;\n}\n\nexport namespace DeleteObjectTaggingOutput {\n  export const filterSensitiveLog = (obj: DeleteObjectTaggingOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteObjectTaggingRequest {\n  /**\n   * <p>The bucket name containing the objects from which to remove the tags. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Name of the object key.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The versionId of the object that the tag-set will be removed from.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeleteObjectTaggingRequest {\n  export const filterSensitiveLog = (obj: DeleteObjectTaggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeletePublicAccessBlockRequest {\n  /**\n   * <p>The Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want to delete.\n   *       </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace DeletePublicAccessBlockRequest {\n  export const filterSensitiveLog = (obj: DeletePublicAccessBlockRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketAccelerateConfigurationOutput {\n  /**\n   * <p>The accelerate configuration of the bucket.</p>\n   */\n  Status?: BucketAccelerateStatus | string;\n}\n\nexport namespace GetBucketAccelerateConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetBucketAccelerateConfigurationOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketAccelerateConfigurationRequest {\n  /**\n   * <p>The name of the bucket for which the accelerate configuration is retrieved.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketAccelerateConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketAccelerateConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketAclOutput {\n  /**\n   * <p>Container for the bucket owner's display name and ID.</p>\n   */\n  Owner?: Owner;\n\n  /**\n   * <p>A list of grants.</p>\n   */\n  Grants?: Grant[];\n}\n\nexport namespace GetBucketAclOutput {\n  export const filterSensitiveLog = (obj: GetBucketAclOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketAclRequest {\n  /**\n   * <p>Specifies the S3 bucket whose ACL is being requested.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketAclRequest {\n  export const filterSensitiveLog = (obj: GetBucketAclRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container of a key value name pair.</p>\n */\nexport interface Tag {\n  /**\n   * <p>Name of the object key.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Value of the tag.</p>\n   */\n  Value: string | undefined;\n}\n\nexport namespace Tag {\n  export const filterSensitiveLog = (obj: Tag): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.\n *          The operator must have at least two predicates in any combination, and an object must match\n *          all of the predicates for the filter to apply.</p>\n */\nexport interface AnalyticsAndOperator {\n  /**\n   * <p>The prefix to use when evaluating an AND predicate: The prefix that an object must have\n   *          to be included in the metrics results.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>The list of tags to use when evaluating an AND predicate.</p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace AnalyticsAndOperator {\n  export const filterSensitiveLog = (obj: AnalyticsAndOperator): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The filter used to describe a set of objects for analyses. A filter must have exactly\n *          one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided,\n *          all objects will be considered in any analysis.</p>\n */\nexport type AnalyticsFilter =\n  | AnalyticsFilter.AndMember\n  | AnalyticsFilter.PrefixMember\n  | AnalyticsFilter.TagMember\n  | AnalyticsFilter.$UnknownMember;\n\nexport namespace AnalyticsFilter {\n  /**\n   * <p>The prefix to use when evaluating an analytics filter.</p>\n   */\n  export interface PrefixMember {\n    Prefix: string;\n    Tag?: never;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The tag to use when evaluating an analytics filter.</p>\n   */\n  export interface TagMember {\n    Prefix?: never;\n    Tag: Tag;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>A conjunction (logical AND) of predicates, which is used in evaluating an analytics\n   *          filter. The operator must have at least two predicates.</p>\n   */\n  export interface AndMember {\n    Prefix?: never;\n    Tag?: never;\n    And: AnalyticsAndOperator;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    Prefix?: never;\n    Tag?: never;\n    And?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    Prefix: (value: string) => T;\n    Tag: (value: Tag) => T;\n    And: (value: AnalyticsAndOperator) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: AnalyticsFilter, visitor: Visitor<T>): T => {\n    if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);\n    if (value.Tag !== undefined) return visitor.Tag(value.Tag);\n    if (value.And !== undefined) return visitor.And(value.And);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  export const filterSensitiveLog = (obj: AnalyticsFilter): any => {\n    if (obj.Prefix !== undefined) return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined) return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n    if (obj.And !== undefined) return { And: AnalyticsAndOperator.filterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\nexport type AnalyticsS3ExportFileFormat = \"CSV\";\n\n/**\n * <p>Contains information about where to publish the analytics results.</p>\n */\nexport interface AnalyticsS3BucketDestination {\n  /**\n   * <p>Specifies the file format used when exporting data to Amazon S3.</p>\n   */\n  Format: AnalyticsS3ExportFileFormat | string | undefined;\n\n  /**\n   * <p>The account ID that owns the destination S3 bucket. If no account ID is provided, the\n   *          owner is not validated before exporting data.</p>\n   *          <note>\n   *             <p> Although this value is optional, we strongly recommend that you set it to help\n   *             prevent problems if the destination bucket ownership changes. </p>\n   *          </note>\n   */\n  BucketAccountId?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the bucket to which data is exported.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The prefix to use when exporting data. The prefix is prepended to all results.</p>\n   */\n  Prefix?: string;\n}\n\nexport namespace AnalyticsS3BucketDestination {\n  export const filterSensitiveLog = (obj: AnalyticsS3BucketDestination): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Where to publish the analytics results.</p>\n */\nexport interface AnalyticsExportDestination {\n  /**\n   * <p>A destination signifying output to an S3 bucket.</p>\n   */\n  S3BucketDestination: AnalyticsS3BucketDestination | undefined;\n}\n\nexport namespace AnalyticsExportDestination {\n  export const filterSensitiveLog = (obj: AnalyticsExportDestination): any => ({\n    ...obj,\n  });\n}\n\nexport type StorageClassAnalysisSchemaVersion = \"V_1\";\n\n/**\n * <p>Container for data related to the storage class analysis for an Amazon S3 bucket for\n *          export.</p>\n */\nexport interface StorageClassAnalysisDataExport {\n  /**\n   * <p>The version of the output schema to use when exporting data. Must be\n   *          <code>V_1</code>.</p>\n   */\n  OutputSchemaVersion: StorageClassAnalysisSchemaVersion | string | undefined;\n\n  /**\n   * <p>The place to store the data for an analysis.</p>\n   */\n  Destination: AnalyticsExportDestination | undefined;\n}\n\nexport namespace StorageClassAnalysisDataExport {\n  export const filterSensitiveLog = (obj: StorageClassAnalysisDataExport): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies data related to access patterns to be collected and made available to analyze\n *          the tradeoffs between different storage classes for an Amazon S3 bucket.</p>\n */\nexport interface StorageClassAnalysis {\n  /**\n   * <p>Specifies how data related to the storage class analysis for an Amazon S3 bucket should be\n   *          exported.</p>\n   */\n  DataExport?: StorageClassAnalysisDataExport;\n}\n\nexport namespace StorageClassAnalysis {\n  export const filterSensitiveLog = (obj: StorageClassAnalysis): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> Specifies the configuration and any analyses for the analytics filter of an Amazon S3\n *          bucket.</p>\n */\nexport interface AnalyticsConfiguration {\n  /**\n   * <p>The ID that identifies the analytics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The filter used to describe a set of objects for analyses. A filter must have exactly\n   *          one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided,\n   *          all objects will be considered in any analysis.</p>\n   */\n  Filter?: AnalyticsFilter;\n\n  /**\n   * <p> Contains data related to access patterns to be collected and made available to analyze\n   *          the tradeoffs between different storage classes. </p>\n   */\n  StorageClassAnalysis: StorageClassAnalysis | undefined;\n}\n\nexport namespace AnalyticsConfiguration {\n  export const filterSensitiveLog = (obj: AnalyticsConfiguration): any => ({\n    ...obj,\n    ...(obj.Filter && { Filter: AnalyticsFilter.filterSensitiveLog(obj.Filter) }),\n  });\n}\n\nexport interface GetBucketAnalyticsConfigurationOutput {\n  /**\n   * <p>The configuration and any analyses for the analytics filter.</p>\n   */\n  AnalyticsConfiguration?: AnalyticsConfiguration;\n}\n\nexport namespace GetBucketAnalyticsConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetBucketAnalyticsConfigurationOutput): any => ({\n    ...obj,\n    ...(obj.AnalyticsConfiguration && {\n      AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration),\n    }),\n  });\n}\n\nexport interface GetBucketAnalyticsConfigurationRequest {\n  /**\n   * <p>The name of the bucket from which an analytics configuration is retrieved.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID that identifies the analytics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketAnalyticsConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketAnalyticsConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies a cross-origin access rule for an Amazon S3 bucket.</p>\n */\nexport interface CORSRule {\n  /**\n   * <p>Headers that are specified in the <code>Access-Control-Request-Headers</code> header.\n   *          These headers are allowed in a preflight OPTIONS request. In response to any preflight\n   *          OPTIONS request, Amazon S3 returns any requested headers that are allowed.</p>\n   */\n  AllowedHeaders?: string[];\n\n  /**\n   * <p>An HTTP method that you allow the origin to execute. Valid values are <code>GET</code>,\n   *             <code>PUT</code>, <code>HEAD</code>, <code>POST</code>, and <code>DELETE</code>.</p>\n   */\n  AllowedMethods: string[] | undefined;\n\n  /**\n   * <p>One or more origins you want customers to be able to access the bucket from.</p>\n   */\n  AllowedOrigins: string[] | undefined;\n\n  /**\n   * <p>One or more headers in the response that you want customers to be able to access from\n   *          their applications (for example, from a JavaScript <code>XMLHttpRequest</code>\n   *          object).</p>\n   */\n  ExposeHeaders?: string[];\n\n  /**\n   * <p>The time in seconds that your browser is to cache the preflight response for the\n   *          specified resource.</p>\n   */\n  MaxAgeSeconds?: number;\n}\n\nexport namespace CORSRule {\n  export const filterSensitiveLog = (obj: CORSRule): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketCorsOutput {\n  /**\n   * <p>A set of origins and methods (cross-origin access that you want to allow). You can add\n   *          up to 100 rules to the configuration.</p>\n   */\n  CORSRules?: CORSRule[];\n}\n\nexport namespace GetBucketCorsOutput {\n  export const filterSensitiveLog = (obj: GetBucketCorsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketCorsRequest {\n  /**\n   * <p>The bucket name for which to get the cors configuration.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketCorsRequest {\n  export const filterSensitiveLog = (obj: GetBucketCorsRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the default server-side encryption to apply to new objects in the bucket. If a\n *          PUT Object request doesn't specify any server-side encryption, this default encryption will\n *          be applied. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html\">PUT Bucket encryption</a> in\n *          the <i>Amazon Simple Storage Service API Reference</i>.</p>\n */\nexport interface ServerSideEncryptionByDefault {\n  /**\n   * <p>Server-side encryption algorithm to use for the default encryption.</p>\n   */\n  SSEAlgorithm: ServerSideEncryption | string | undefined;\n\n  /**\n   * <p>AWS Key Management Service (KMS) customer master key ID to use for the default\n   *          encryption. This parameter is allowed if and only if <code>SSEAlgorithm</code> is set to\n   *             <code>aws:kms</code>.</p>\n   *          <p>You can specify the key ID or the Amazon Resource Name (ARN) of the CMK. However, if you\n   *          are using encryption with cross-account operations, you must use a fully qualified CMK ARN.\n   *          For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy\">Using encryption for cross-account operations</a>. </p>\n   *          <p>\n   *             <b>For example:</b>\n   *          </p>\n   *          <ul>\n   *             <li>\n   *                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Key ARN:\n   *                   <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   *          <important>\n   *             <p>Amazon S3 only supports symmetric CMKs and not asymmetric CMKs. For more information, see\n   *                <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and\n   *                Asymmetric Keys</a> in the <i>AWS Key Management Service Developer\n   *                Guide</i>.</p>\n   *          </important>\n   */\n  KMSMasterKeyID?: string;\n}\n\nexport namespace ServerSideEncryptionByDefault {\n  export const filterSensitiveLog = (obj: ServerSideEncryptionByDefault): any => ({\n    ...obj,\n    ...(obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Specifies the default server-side encryption configuration.</p>\n */\nexport interface ServerSideEncryptionRule {\n  /**\n   * <p>Specifies the default server-side encryption to apply to new objects in the bucket. If a\n   *          PUT Object request doesn't specify any server-side encryption, this default encryption will\n   *          be applied.</p>\n   */\n  ApplyServerSideEncryptionByDefault?: ServerSideEncryptionByDefault;\n\n  /**\n   * <p>Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the <code>BucketKeyEnabled</code> element to <code>true</code> causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html\">Amazon S3 Bucket Keys</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  BucketKeyEnabled?: boolean;\n}\n\nexport namespace ServerSideEncryptionRule {\n  export const filterSensitiveLog = (obj: ServerSideEncryptionRule): any => ({\n    ...obj,\n    ...(obj.ApplyServerSideEncryptionByDefault && {\n      ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault.filterSensitiveLog(\n        obj.ApplyServerSideEncryptionByDefault\n      ),\n    }),\n  });\n}\n\n/**\n * <p>Specifies the default server-side-encryption configuration.</p>\n */\nexport interface ServerSideEncryptionConfiguration {\n  /**\n   * <p>Container for information about a particular server-side encryption configuration\n   *          rule.</p>\n   */\n  Rules: ServerSideEncryptionRule[] | undefined;\n}\n\nexport namespace ServerSideEncryptionConfiguration {\n  export const filterSensitiveLog = (obj: ServerSideEncryptionConfiguration): any => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRule.filterSensitiveLog(item)) }),\n  });\n}\n\nexport interface GetBucketEncryptionOutput {\n  /**\n   * <p>Specifies the default server-side-encryption configuration.</p>\n   */\n  ServerSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;\n}\n\nexport namespace GetBucketEncryptionOutput {\n  export const filterSensitiveLog = (obj: GetBucketEncryptionOutput): any => ({\n    ...obj,\n    ...(obj.ServerSideEncryptionConfiguration && {\n      ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(\n        obj.ServerSideEncryptionConfiguration\n      ),\n    }),\n  });\n}\n\nexport interface GetBucketEncryptionRequest {\n  /**\n   * <p>The name of the bucket from which the server-side encryption configuration is\n   *          retrieved.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketEncryptionRequest {\n  export const filterSensitiveLog = (obj: GetBucketEncryptionRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for specifying S3 Intelligent-Tiering filters. The filters determine the\n *          subset of objects to which the rule applies.</p>\n */\nexport interface IntelligentTieringAndOperator {\n  /**\n   * <p>An object key name prefix that identifies the subset of objects to which the\n   *          configuration applies.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>All of these tags must exist in the object's tag set in order for the configuration to\n   *          apply.</p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace IntelligentTieringAndOperator {\n  export const filterSensitiveLog = (obj: IntelligentTieringAndOperator): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The <code>Filter</code> is used to identify objects that the S3 Intelligent-Tiering\n *          configuration applies to.</p>\n */\nexport interface IntelligentTieringFilter {\n  /**\n   * <p>An object key name prefix that identifies the subset of objects to which the rule\n   *          applies.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>A container of a key value name pair.</p>\n   */\n  Tag?: Tag;\n\n  /**\n   * <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.\n   *          The operator must have at least two predicates, and an object must match all of the\n   *          predicates in order for the filter to apply.</p>\n   */\n  And?: IntelligentTieringAndOperator;\n}\n\nexport namespace IntelligentTieringFilter {\n  export const filterSensitiveLog = (obj: IntelligentTieringFilter): any => ({\n    ...obj,\n  });\n}\n\nexport type IntelligentTieringStatus = \"Disabled\" | \"Enabled\";\n\nexport type IntelligentTieringAccessTier = \"ARCHIVE_ACCESS\" | \"DEEP_ARCHIVE_ACCESS\";\n\n/**\n * <p>The S3 Intelligent-Tiering storage class is designed to optimize storage costs by\n *          automatically moving data to the most cost-effective storage access tier, without\n *          additional operational overhead.</p>\n */\nexport interface Tiering {\n  /**\n   * <p>The number of consecutive days of no access after which an object will be eligible to be\n   *          transitioned to the corresponding tier. The minimum number of days specified for\n   *          Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least\n   *          180 days. The maximum can be up to 2 years (730 days).</p>\n   */\n  Days: number | undefined;\n\n  /**\n   * <p>S3 Intelligent-Tiering access tier. See <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access\">Storage class for\n   *             automatically optimizing frequently and infrequently accessed objects</a> for a list\n   *          of access tiers in the S3 Intelligent-Tiering storage class.</p>\n   */\n  AccessTier: IntelligentTieringAccessTier | string | undefined;\n}\n\nexport namespace Tiering {\n  export const filterSensitiveLog = (obj: Tiering): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.</p>\n *          <p>For information about the S3 Intelligent-Tiering storage class, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access\">Storage class for\n *             automatically optimizing frequently and infrequently accessed objects</a>.</p>\n */\nexport interface IntelligentTieringConfiguration {\n  /**\n   * <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>Specifies a bucket filter. The configuration only includes objects that meet the\n   *          filter's criteria.</p>\n   */\n  Filter?: IntelligentTieringFilter;\n\n  /**\n   * <p>Specifies the status of the configuration.</p>\n   */\n  Status: IntelligentTieringStatus | string | undefined;\n\n  /**\n   * <p>Specifies the S3 Intelligent-Tiering storage class tier of the configuration.</p>\n   */\n  Tierings: Tiering[] | undefined;\n}\n\nexport namespace IntelligentTieringConfiguration {\n  export const filterSensitiveLog = (obj: IntelligentTieringConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketIntelligentTieringConfigurationOutput {\n  /**\n   * <p>Container for S3 Intelligent-Tiering configuration.</p>\n   */\n  IntelligentTieringConfiguration?: IntelligentTieringConfiguration;\n}\n\nexport namespace GetBucketIntelligentTieringConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetBucketIntelligentTieringConfigurationOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketIntelligentTieringConfigurationRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>\n   */\n  Id: string | undefined;\n}\n\nexport namespace GetBucketIntelligentTieringConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketIntelligentTieringConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the use of SSE-KMS to encrypt delivered inventory reports.</p>\n */\nexport interface SSEKMS {\n  /**\n   * <p>Specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed\n   *          customer master key (CMK) to use for encrypting inventory reports.</p>\n   */\n  KeyId: string | undefined;\n}\n\nexport namespace SSEKMS {\n  export const filterSensitiveLog = (obj: SSEKMS): any => ({\n    ...obj,\n    ...(obj.KeyId && { KeyId: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Specifies the use of SSE-S3 to encrypt delivered inventory reports.</p>\n */\nexport interface SSES3 {}\n\nexport namespace SSES3 {\n  export const filterSensitiveLog = (obj: SSES3): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Contains the type of server-side encryption used to encrypt the inventory\n *          results.</p>\n */\nexport interface InventoryEncryption {\n  /**\n   * <p>Specifies the use of SSE-S3 to encrypt delivered inventory reports.</p>\n   */\n  SSES3?: SSES3;\n\n  /**\n   * <p>Specifies the use of SSE-KMS to encrypt delivered inventory reports.</p>\n   */\n  SSEKMS?: SSEKMS;\n}\n\nexport namespace InventoryEncryption {\n  export const filterSensitiveLog = (obj: InventoryEncryption): any => ({\n    ...obj,\n    ...(obj.SSEKMS && { SSEKMS: SSEKMS.filterSensitiveLog(obj.SSEKMS) }),\n  });\n}\n\nexport type InventoryFormat = \"CSV\" | \"ORC\" | \"Parquet\";\n\n/**\n * <p>Contains the bucket name, file format, bucket owner (optional), and prefix (optional)\n *          where inventory results are published.</p>\n */\nexport interface InventoryS3BucketDestination {\n  /**\n   * <p>The account ID that owns the destination S3 bucket. If no account ID is provided, the\n   *          owner is not validated before exporting data. </p>\n   *          <note>\n   *             <p> Although this value is optional, we strongly recommend that you set it to help\n   *             prevent problems if the destination bucket ownership changes. </p>\n   *          </note>\n   */\n  AccountId?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the bucket where inventory results will be\n   *          published.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Specifies the output format of the inventory results.</p>\n   */\n  Format: InventoryFormat | string | undefined;\n\n  /**\n   * <p>The prefix that is prepended to all inventory results.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Contains the type of server-side encryption used to encrypt the inventory\n   *          results.</p>\n   */\n  Encryption?: InventoryEncryption;\n}\n\nexport namespace InventoryS3BucketDestination {\n  export const filterSensitiveLog = (obj: InventoryS3BucketDestination): any => ({\n    ...obj,\n    ...(obj.Encryption && { Encryption: InventoryEncryption.filterSensitiveLog(obj.Encryption) }),\n  });\n}\n\n/**\n * <p>Specifies the inventory configuration for an Amazon S3 bucket.</p>\n */\nexport interface InventoryDestination {\n  /**\n   * <p>Contains the bucket name, file format, bucket owner (optional), and prefix (optional)\n   *          where inventory results are published.</p>\n   */\n  S3BucketDestination: InventoryS3BucketDestination | undefined;\n}\n\nexport namespace InventoryDestination {\n  export const filterSensitiveLog = (obj: InventoryDestination): any => ({\n    ...obj,\n    ...(obj.S3BucketDestination && {\n      S3BucketDestination: InventoryS3BucketDestination.filterSensitiveLog(obj.S3BucketDestination),\n    }),\n  });\n}\n\n/**\n * <p>Specifies an inventory filter. The inventory only includes objects that meet the\n *          filter's criteria.</p>\n */\nexport interface InventoryFilter {\n  /**\n   * <p>The prefix that an object must have to be included in the inventory results.</p>\n   */\n  Prefix: string | undefined;\n}\n\nexport namespace InventoryFilter {\n  export const filterSensitiveLog = (obj: InventoryFilter): any => ({\n    ...obj,\n  });\n}\n\nexport type InventoryIncludedObjectVersions = \"All\" | \"Current\";\n\nexport type InventoryOptionalField =\n  | \"ETag\"\n  | \"EncryptionStatus\"\n  | \"IntelligentTieringAccessTier\"\n  | \"IsMultipartUploaded\"\n  | \"LastModifiedDate\"\n  | \"ObjectLockLegalHoldStatus\"\n  | \"ObjectLockMode\"\n  | \"ObjectLockRetainUntilDate\"\n  | \"ReplicationStatus\"\n  | \"Size\"\n  | \"StorageClass\";\n\nexport type InventoryFrequency = \"Daily\" | \"Weekly\";\n\n/**\n * <p>Specifies the schedule for generating inventory results.</p>\n */\nexport interface InventorySchedule {\n  /**\n   * <p>Specifies how frequently inventory results are produced.</p>\n   */\n  Frequency: InventoryFrequency | string | undefined;\n}\n\nexport namespace InventorySchedule {\n  export const filterSensitiveLog = (obj: InventorySchedule): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the inventory configuration for an Amazon S3 bucket. For more information, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html\">GET Bucket inventory</a> in the <i>Amazon Simple Storage Service API Reference</i>.\n *       </p>\n */\nexport interface InventoryConfiguration {\n  /**\n   * <p>Contains information about where to publish the inventory results.</p>\n   */\n  Destination: InventoryDestination | undefined;\n\n  /**\n   * <p>Specifies whether the inventory is enabled or disabled. If set to <code>True</code>, an\n   *          inventory list is generated. If set to <code>False</code>, no inventory list is\n   *          generated.</p>\n   */\n  IsEnabled: boolean | undefined;\n\n  /**\n   * <p>Specifies an inventory filter. The inventory only includes objects that meet the\n   *          filter's criteria.</p>\n   */\n  Filter?: InventoryFilter;\n\n  /**\n   * <p>The ID used to identify the inventory configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>Object versions to include in the inventory list. If set to <code>All</code>, the list\n   *          includes all the object versions, which adds the version-related fields\n   *             <code>VersionId</code>, <code>IsLatest</code>, and <code>DeleteMarker</code> to the\n   *          list. If set to <code>Current</code>, the list does not contain these version-related\n   *          fields.</p>\n   */\n  IncludedObjectVersions: InventoryIncludedObjectVersions | string | undefined;\n\n  /**\n   * <p>Contains the optional fields that are included in the inventory results.</p>\n   */\n  OptionalFields?: (InventoryOptionalField | string)[];\n\n  /**\n   * <p>Specifies the schedule for generating inventory results.</p>\n   */\n  Schedule: InventorySchedule | undefined;\n}\n\nexport namespace InventoryConfiguration {\n  export const filterSensitiveLog = (obj: InventoryConfiguration): any => ({\n    ...obj,\n    ...(obj.Destination && { Destination: InventoryDestination.filterSensitiveLog(obj.Destination) }),\n  });\n}\n\nexport interface GetBucketInventoryConfigurationOutput {\n  /**\n   * <p>Specifies the inventory configuration.</p>\n   */\n  InventoryConfiguration?: InventoryConfiguration;\n}\n\nexport namespace GetBucketInventoryConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetBucketInventoryConfigurationOutput): any => ({\n    ...obj,\n    ...(obj.InventoryConfiguration && {\n      InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration),\n    }),\n  });\n}\n\nexport interface GetBucketInventoryConfigurationRequest {\n  /**\n   * <p>The name of the bucket containing the inventory configuration to retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the inventory configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketInventoryConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketInventoryConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the expiration for the lifecycle of the object.</p>\n */\nexport interface LifecycleExpiration {\n  /**\n   * <p>Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601\n   *          Format.</p>\n   */\n  Date?: Date;\n\n  /**\n   * <p>Indicates the lifetime, in days, of the objects that are subject to the rule. The value\n   *          must be a non-zero positive integer.</p>\n   */\n  Days?: number;\n\n  /**\n   * <p>Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set\n   *          to true, the delete marker will be expired; if set to false the policy takes no action.\n   *          This cannot be specified with Days or Date in a Lifecycle Expiration Policy.</p>\n   */\n  ExpiredObjectDeleteMarker?: boolean;\n}\n\nexport namespace LifecycleExpiration {\n  export const filterSensitiveLog = (obj: LifecycleExpiration): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This is used in a Lifecycle Rule Filter to apply a logical AND to two or more\n *          predicates. The Lifecycle Rule will apply to any object matching all of the predicates\n *          configured inside the And operator.</p>\n */\nexport interface LifecycleRuleAndOperator {\n  /**\n   * <p>Prefix identifying one or more objects to which the rule applies.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>All of these tags must exist in the object's tag set in order for the rule to\n   *          apply.</p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace LifecycleRuleAndOperator {\n  export const filterSensitiveLog = (obj: LifecycleRuleAndOperator): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A\n *             <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or\n *             <code>And</code> specified.</p>\n */\nexport type LifecycleRuleFilter =\n  | LifecycleRuleFilter.AndMember\n  | LifecycleRuleFilter.PrefixMember\n  | LifecycleRuleFilter.TagMember\n  | LifecycleRuleFilter.$UnknownMember;\n\nexport namespace LifecycleRuleFilter {\n  /**\n   * <p>Prefix identifying one or more objects to which the rule applies.</p>\n   */\n  export interface PrefixMember {\n    Prefix: string;\n    Tag?: never;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>This tag must exist in the object's tag set in order for the rule to apply.</p>\n   */\n  export interface TagMember {\n    Prefix?: never;\n    Tag: Tag;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>This is used in a Lifecycle Rule Filter to apply a logical AND to two or more\n   *          predicates. The Lifecycle Rule will apply to any object matching all of the predicates\n   *          configured inside the And operator.</p>\n   */\n  export interface AndMember {\n    Prefix?: never;\n    Tag?: never;\n    And: LifecycleRuleAndOperator;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    Prefix?: never;\n    Tag?: never;\n    And?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    Prefix: (value: string) => T;\n    Tag: (value: Tag) => T;\n    And: (value: LifecycleRuleAndOperator) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: LifecycleRuleFilter, visitor: Visitor<T>): T => {\n    if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);\n    if (value.Tag !== undefined) return visitor.Tag(value.Tag);\n    if (value.And !== undefined) return visitor.And(value.And);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  export const filterSensitiveLog = (obj: LifecycleRuleFilter): any => {\n    if (obj.Prefix !== undefined) return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined) return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n    if (obj.And !== undefined) return { And: LifecycleRuleAndOperator.filterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\n/**\n * <p>Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently\n *          deletes the noncurrent object versions. You set this lifecycle configuration action on a\n *          bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent\n *          object versions at a specific period in the object's lifetime.</p>\n */\nexport interface NoncurrentVersionExpiration {\n  /**\n   * <p>Specifies the number of days an object is noncurrent before Amazon S3 can perform the\n   *          associated action. For information about the noncurrent days calculations, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations\">How\n   *             Amazon S3 Calculates When an Object Became Noncurrent</a> in the <i>Amazon Simple\n   *             Storage Service Developer Guide</i>.</p>\n   */\n  NoncurrentDays?: number;\n}\n\nexport namespace NoncurrentVersionExpiration {\n  export const filterSensitiveLog = (obj: NoncurrentVersionExpiration): any => ({\n    ...obj,\n  });\n}\n\nexport type TransitionStorageClass = \"DEEP_ARCHIVE\" | \"GLACIER\" | \"INTELLIGENT_TIERING\" | \"ONEZONE_IA\" | \"STANDARD_IA\";\n\n/**\n * <p>Container for the transition rule that describes when noncurrent objects transition to\n *          the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>,\n *             <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your bucket is\n *          versioning-enabled (or versioning is suspended), you can set this action to request that\n *          Amazon S3 transition noncurrent object versions to the <code>STANDARD_IA</code>,\n *             <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or\n *             <code>DEEP_ARCHIVE</code> storage class at a specific period in the object's\n *          lifetime.</p>\n */\nexport interface NoncurrentVersionTransition {\n  /**\n   * <p>Specifies the number of days an object is noncurrent before Amazon S3 can perform the\n   *          associated action. For information about the noncurrent days calculations, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations\">How\n   *             Amazon S3 Calculates How Long an Object Has Been Noncurrent</a> in the\n   *             <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  NoncurrentDays?: number;\n\n  /**\n   * <p>The class of storage used to store the object.</p>\n   */\n  StorageClass?: TransitionStorageClass | string;\n}\n\nexport namespace NoncurrentVersionTransition {\n  export const filterSensitiveLog = (obj: NoncurrentVersionTransition): any => ({\n    ...obj,\n  });\n}\n\nexport type ExpirationStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>Specifies when an object transitions to a specified storage class. For more information\n *          about Amazon S3 lifecycle configuration rules, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html\">Transitioning\n *             Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\nexport interface Transition {\n  /**\n   * <p>Indicates when objects are transitioned to the specified storage class. The date value\n   *          must be in ISO 8601 format. The time is always midnight UTC.</p>\n   */\n  Date?: Date;\n\n  /**\n   * <p>Indicates the number of days after creation when objects are transitioned to the\n   *          specified storage class. The value must be a positive integer.</p>\n   */\n  Days?: number;\n\n  /**\n   * <p>The storage class to which you want the object to transition.</p>\n   */\n  StorageClass?: TransitionStorageClass | string;\n}\n\nexport namespace Transition {\n  export const filterSensitiveLog = (obj: Transition): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A lifecycle rule for individual objects in an Amazon S3 bucket.</p>\n */\nexport interface LifecycleRule {\n  /**\n   * <p>Specifies the expiration for the lifecycle of the object in the form of date, days and,\n   *          whether the object has a delete marker.</p>\n   */\n  Expiration?: LifecycleExpiration;\n\n  /**\n   * <p>Unique identifier for the rule. The value cannot be longer than 255 characters.</p>\n   */\n  ID?: string;\n\n  /**\n   * @deprecated\n   *\n   * <p>Prefix identifying one or more objects to which the rule applies. This is\n   *          No longer used; use <code>Filter</code> instead.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A\n   *             <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or\n   *             <code>And</code> specified.</p>\n   */\n  Filter?: LifecycleRuleFilter;\n\n  /**\n   * <p>If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not\n   *          currently being applied.</p>\n   */\n  Status: ExpirationStatus | string | undefined;\n\n  /**\n   * <p>Specifies when an Amazon S3 object transitions to a specified storage class.</p>\n   */\n  Transitions?: Transition[];\n\n  /**\n   * <p> Specifies the transition rule for the lifecycle rule that describes when noncurrent\n   *          objects transition to a specific storage class. If your bucket is versioning-enabled (or\n   *          versioning is suspended), you can set this action to request that Amazon S3 transition\n   *          noncurrent object versions to a specific storage class at a set period in the object's\n   *          lifetime. </p>\n   */\n  NoncurrentVersionTransitions?: NoncurrentVersionTransition[];\n\n  /**\n   * <p>Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently\n   *          deletes the noncurrent object versions. You set this lifecycle configuration action on a\n   *          bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent\n   *          object versions at a specific period in the object's lifetime.</p>\n   */\n  NoncurrentVersionExpiration?: NoncurrentVersionExpiration;\n\n  /**\n   * <p>Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will\n   *          wait before permanently removing all parts of the upload. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">\n   *             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the\n   *             <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  AbortIncompleteMultipartUpload?: AbortIncompleteMultipartUpload;\n}\n\nexport namespace LifecycleRule {\n  export const filterSensitiveLog = (obj: LifecycleRule): any => ({\n    ...obj,\n    ...(obj.Filter && { Filter: LifecycleRuleFilter.filterSensitiveLog(obj.Filter) }),\n  });\n}\n\nexport interface GetBucketLifecycleConfigurationOutput {\n  /**\n   * <p>Container for a lifecycle rule.</p>\n   */\n  Rules?: LifecycleRule[];\n}\n\nexport namespace GetBucketLifecycleConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetBucketLifecycleConfigurationOutput): any => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRule.filterSensitiveLog(item)) }),\n  });\n}\n\nexport interface GetBucketLifecycleConfigurationRequest {\n  /**\n   * <p>The name of the bucket for which to get the lifecycle information.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketLifecycleConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketLifecycleConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketLocationOutput {\n  /**\n   * <p>Specifies the Region where the bucket resides. For a list of all the Amazon S3 supported\n   *          location constraints by Region, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\">Regions and Endpoints</a>.\n   *          Buckets in Region <code>us-east-1</code> have a LocationConstraint of\n   *          <code>null</code>.</p>\n   */\n  LocationConstraint?: BucketLocationConstraint | string;\n}\n\nexport namespace GetBucketLocationOutput {\n  export const filterSensitiveLog = (obj: GetBucketLocationOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketLocationRequest {\n  /**\n   * <p>The name of the bucket for which to get the location.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketLocationRequest {\n  export const filterSensitiveLog = (obj: GetBucketLocationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type BucketLogsPermission = \"FULL_CONTROL\" | \"READ\" | \"WRITE\";\n\n/**\n * <p>Container for granting information.</p>\n */\nexport interface TargetGrant {\n  /**\n   * <p>Container for the person being granted permissions.</p>\n   */\n  Grantee?: Grantee;\n\n  /**\n   * <p>Logging permissions assigned to the grantee for the bucket.</p>\n   */\n  Permission?: BucketLogsPermission | string;\n}\n\nexport namespace TargetGrant {\n  export const filterSensitiveLog = (obj: TargetGrant): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys\n *          for a bucket. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html\">PUT Bucket logging</a> in the\n *             <i>Amazon Simple Storage Service API Reference</i>.</p>\n */\nexport interface LoggingEnabled {\n  /**\n   * <p>Specifies the bucket where you want Amazon S3 to store server access logs. You can have your\n   *          logs delivered to any bucket that you own, including the same bucket that is being logged.\n   *          You can also configure multiple buckets to deliver their logs to the same target bucket. In\n   *          this case, you should choose a different <code>TargetPrefix</code> for each source bucket\n   *          so that the delivered log files can be distinguished by key.</p>\n   */\n  TargetBucket: string | undefined;\n\n  /**\n   * <p>Container for granting information.</p>\n   */\n  TargetGrants?: TargetGrant[];\n\n  /**\n   * <p>A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a\n   *          single bucket, you can use a prefix to distinguish which log files came from which\n   *          bucket.</p>\n   */\n  TargetPrefix: string | undefined;\n}\n\nexport namespace LoggingEnabled {\n  export const filterSensitiveLog = (obj: LoggingEnabled): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketLoggingOutput {\n  /**\n   * <p>Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys\n   *          for a bucket. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html\">PUT Bucket logging</a> in the\n   *             <i>Amazon Simple Storage Service API Reference</i>.</p>\n   */\n  LoggingEnabled?: LoggingEnabled;\n}\n\nexport namespace GetBucketLoggingOutput {\n  export const filterSensitiveLog = (obj: GetBucketLoggingOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketLoggingRequest {\n  /**\n   * <p>The bucket name for which to get the logging information.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketLoggingRequest {\n  export const filterSensitiveLog = (obj: GetBucketLoggingRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.\n *          The operator must have at least two predicates, and an object must match all of the\n *          predicates in order for the filter to apply.</p>\n */\nexport interface MetricsAndOperator {\n  /**\n   * <p>The prefix used when evaluating an AND predicate.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>The list of tags used when evaluating an AND predicate.</p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace MetricsAndOperator {\n  export const filterSensitiveLog = (obj: MetricsAndOperator): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies a metrics configuration filter. The metrics configuration only includes\n *          objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction\n *          (MetricsAndOperator).</p>\n */\nexport type MetricsFilter =\n  | MetricsFilter.AndMember\n  | MetricsFilter.PrefixMember\n  | MetricsFilter.TagMember\n  | MetricsFilter.$UnknownMember;\n\nexport namespace MetricsFilter {\n  /**\n   * <p>The prefix used when evaluating a metrics filter.</p>\n   */\n  export interface PrefixMember {\n    Prefix: string;\n    Tag?: never;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The tag used when evaluating a metrics filter.</p>\n   */\n  export interface TagMember {\n    Prefix?: never;\n    Tag: Tag;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.\n   *          The operator must have at least two predicates, and an object must match all of the\n   *          predicates in order for the filter to apply.</p>\n   */\n  export interface AndMember {\n    Prefix?: never;\n    Tag?: never;\n    And: MetricsAndOperator;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    Prefix?: never;\n    Tag?: never;\n    And?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    Prefix: (value: string) => T;\n    Tag: (value: Tag) => T;\n    And: (value: MetricsAndOperator) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: MetricsFilter, visitor: Visitor<T>): T => {\n    if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);\n    if (value.Tag !== undefined) return visitor.Tag(value.Tag);\n    if (value.And !== undefined) return visitor.And(value.And);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  export const filterSensitiveLog = (obj: MetricsFilter): any => {\n    if (obj.Prefix !== undefined) return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined) return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n    if (obj.And !== undefined) return { And: MetricsAndOperator.filterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\n/**\n * <p>Specifies a metrics configuration for the CloudWatch request metrics (specified by the\n *          metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics\n *          configuration, note that this is a full replacement of the existing metrics configuration.\n *          If you don't include the elements you want to keep, they are erased. For more information,\n *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html\"> PUT Bucket\n *             metrics</a> in the <i>Amazon Simple Storage Service API Reference</i>.</p>\n */\nexport interface MetricsConfiguration {\n  /**\n   * <p>The ID used to identify the metrics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>Specifies a metrics configuration filter. The metrics configuration will only include\n   *          objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction\n   *          (MetricsAndOperator).</p>\n   */\n  Filter?: MetricsFilter;\n}\n\nexport namespace MetricsConfiguration {\n  export const filterSensitiveLog = (obj: MetricsConfiguration): any => ({\n    ...obj,\n    ...(obj.Filter && { Filter: MetricsFilter.filterSensitiveLog(obj.Filter) }),\n  });\n}\n\nexport interface GetBucketMetricsConfigurationOutput {\n  /**\n   * <p>Specifies the metrics configuration.</p>\n   */\n  MetricsConfiguration?: MetricsConfiguration;\n}\n\nexport namespace GetBucketMetricsConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetBucketMetricsConfigurationOutput): any => ({\n    ...obj,\n    ...(obj.MetricsConfiguration && {\n      MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration),\n    }),\n  });\n}\n\nexport interface GetBucketMetricsConfigurationRequest {\n  /**\n   * <p>The name of the bucket containing the metrics configuration to retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the metrics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketMetricsConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketMetricsConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketNotificationConfigurationRequest {\n  /**\n   * <p>The name of the bucket for which to get the notification configuration.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketNotificationConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetBucketNotificationConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type Event =\n  | \"s3:ObjectCreated:*\"\n  | \"s3:ObjectCreated:CompleteMultipartUpload\"\n  | \"s3:ObjectCreated:Copy\"\n  | \"s3:ObjectCreated:Post\"\n  | \"s3:ObjectCreated:Put\"\n  | \"s3:ObjectRemoved:*\"\n  | \"s3:ObjectRemoved:Delete\"\n  | \"s3:ObjectRemoved:DeleteMarkerCreated\"\n  | \"s3:ObjectRestore:*\"\n  | \"s3:ObjectRestore:Completed\"\n  | \"s3:ObjectRestore:Post\"\n  | \"s3:ReducedRedundancyLostObject\"\n  | \"s3:Replication:*\"\n  | \"s3:Replication:OperationFailedReplication\"\n  | \"s3:Replication:OperationMissedThreshold\"\n  | \"s3:Replication:OperationNotTracked\"\n  | \"s3:Replication:OperationReplicatedAfterThreshold\";\n\nexport type FilterRuleName = \"prefix\" | \"suffix\";\n\n/**\n * <p>Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or\n *          prefix of the key name.</p>\n */\nexport interface FilterRule {\n  /**\n   * <p>The object key name prefix or suffix identifying one or more objects to which the\n   *          filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and\n   *          suffixes are not supported. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring Event Notifications</a>\n   *          in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Name?: FilterRuleName | string;\n\n  /**\n   * <p>The value that the filter searches for in object key names.</p>\n   */\n  Value?: string;\n}\n\nexport namespace FilterRule {\n  export const filterSensitiveLog = (obj: FilterRule): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for object key name prefix and suffix filtering rules.</p>\n */\nexport interface S3KeyFilter {\n  /**\n   * <p>A list of containers for the key-value pair that defines the criteria for the filter\n   *          rule.</p>\n   */\n  FilterRules?: FilterRule[];\n}\n\nexport namespace S3KeyFilter {\n  export const filterSensitiveLog = (obj: S3KeyFilter): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies object key name filtering rules. For information about key name filtering, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring\n *             Event Notifications</a> in the <i>Amazon Simple Storage Service Developer\n *          Guide</i>.</p>\n */\nexport interface NotificationConfigurationFilter {\n  /**\n   * <p>A container for object key name prefix and suffix filtering rules.</p>\n   */\n  Key?: S3KeyFilter;\n}\n\nexport namespace NotificationConfigurationFilter {\n  export const filterSensitiveLog = (obj: NotificationConfigurationFilter): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for specifying the configuration for AWS Lambda notifications.</p>\n */\nexport interface LambdaFunctionConfiguration {\n  /**\n   * <p>An optional unique identifier for configurations in a notification configuration. If you\n   *          don't provide one, Amazon S3 will assign an ID.</p>\n   */\n  Id?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 invokes when the\n   *          specified event type occurs.</p>\n   */\n  LambdaFunctionArn: string | undefined;\n\n  /**\n   * <p>The Amazon S3 bucket event for which to invoke the AWS Lambda function. For more information,\n   *          see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Supported\n   *             Event Types</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Events: (Event | string)[] | undefined;\n\n  /**\n   * <p>Specifies object key name filtering rules. For information about key name filtering, see\n   *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring\n   *             Event Notifications</a> in the <i>Amazon Simple Storage Service Developer\n   *          Guide</i>.</p>\n   */\n  Filter?: NotificationConfigurationFilter;\n}\n\nexport namespace LambdaFunctionConfiguration {\n  export const filterSensitiveLog = (obj: LambdaFunctionConfiguration): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the configuration for publishing messages to an Amazon Simple Queue Service\n *          (Amazon SQS) queue when Amazon S3 detects specified events.</p>\n */\nexport interface QueueConfiguration {\n  /**\n   * <p>An optional unique identifier for configurations in a notification configuration. If you\n   *          don't provide one, Amazon S3 will assign an ID.</p>\n   */\n  Id?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message\n   *          when it detects events of the specified type.</p>\n   */\n  QueueArn: string | undefined;\n\n  /**\n   * <p>A collection of bucket events for which to send notifications</p>\n   */\n  Events: (Event | string)[] | undefined;\n\n  /**\n   * <p>Specifies object key name filtering rules. For information about key name filtering, see\n   *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring\n   *             Event Notifications</a> in the <i>Amazon Simple Storage Service Developer\n   *          Guide</i>.</p>\n   */\n  Filter?: NotificationConfigurationFilter;\n}\n\nexport namespace QueueConfiguration {\n  export const filterSensitiveLog = (obj: QueueConfiguration): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for specifying the configuration for publication of messages to an Amazon\n *          Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.</p>\n */\nexport interface TopicConfiguration {\n  /**\n   * <p>An optional unique identifier for configurations in a notification configuration. If you\n   *          don't provide one, Amazon S3 will assign an ID.</p>\n   */\n  Id?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message\n   *          when it detects events of the specified type.</p>\n   */\n  TopicArn: string | undefined;\n\n  /**\n   * <p>The Amazon S3 bucket event about which to send notifications. For more information, see\n   *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Supported\n   *             Event Types</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Events: (Event | string)[] | undefined;\n\n  /**\n   * <p>Specifies object key name filtering rules. For information about key name filtering, see\n   *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Configuring\n   *             Event Notifications</a> in the <i>Amazon Simple Storage Service Developer\n   *          Guide</i>.</p>\n   */\n  Filter?: NotificationConfigurationFilter;\n}\n\nexport namespace TopicConfiguration {\n  export const filterSensitiveLog = (obj: TopicConfiguration): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for specifying the notification configuration of the bucket. If this element\n *          is empty, notifications are turned off for the bucket.</p>\n */\nexport interface NotificationConfiguration {\n  /**\n   * <p>The topic to which notifications are sent and the events for which notifications are\n   *          generated.</p>\n   */\n  TopicConfigurations?: TopicConfiguration[];\n\n  /**\n   * <p>The Amazon Simple Queue Service queues to publish messages to and the events for which\n   *          to publish messages.</p>\n   */\n  QueueConfigurations?: QueueConfiguration[];\n\n  /**\n   * <p>Describes the AWS Lambda functions to invoke and the events for which to invoke\n   *          them.</p>\n   */\n  LambdaFunctionConfigurations?: LambdaFunctionConfiguration[];\n}\n\nexport namespace NotificationConfiguration {\n  export const filterSensitiveLog = (obj: NotificationConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport type ObjectOwnership = \"BucketOwnerPreferred\" | \"ObjectWriter\";\n\n/**\n * <p>The container element for an ownership control rule.</p>\n */\nexport interface OwnershipControlsRule {\n  /**\n   * <p>The container element for object ownership for a bucket's ownership controls.</p>\n   *          <p>BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket\n   *          owner if the objects are uploaded with the <code>bucket-owner-full-control</code> canned\n   *          ACL.</p>\n   *          <p>ObjectWriter - The uploading account will own the object if the object is uploaded with\n   *          the <code>bucket-owner-full-control</code> canned ACL.</p>\n   */\n  ObjectOwnership: ObjectOwnership | string | undefined;\n}\n\nexport namespace OwnershipControlsRule {\n  export const filterSensitiveLog = (obj: OwnershipControlsRule): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container element for a bucket's ownership controls.</p>\n */\nexport interface OwnershipControls {\n  /**\n   * <p>The container element for an ownership control rule.</p>\n   */\n  Rules: OwnershipControlsRule[] | undefined;\n}\n\nexport namespace OwnershipControls {\n  export const filterSensitiveLog = (obj: OwnershipControls): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketOwnershipControlsOutput {\n  /**\n   * <p>The <code>OwnershipControls</code> (BucketOwnerPreferred or ObjectWriter) currently in\n   *          effect for this Amazon S3 bucket.</p>\n   */\n  OwnershipControls?: OwnershipControls;\n}\n\nexport namespace GetBucketOwnershipControlsOutput {\n  export const filterSensitiveLog = (obj: GetBucketOwnershipControlsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketOwnershipControlsRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose <code>OwnershipControls</code> you want to retrieve.\n   *       </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketOwnershipControlsRequest {\n  export const filterSensitiveLog = (obj: GetBucketOwnershipControlsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketPolicyOutput {\n  /**\n   * <p>The bucket policy as a JSON document.</p>\n   */\n  Policy?: string;\n}\n\nexport namespace GetBucketPolicyOutput {\n  export const filterSensitiveLog = (obj: GetBucketPolicyOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketPolicyRequest {\n  /**\n   * <p>The bucket name for which to get the bucket policy.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketPolicyRequest {\n  export const filterSensitiveLog = (obj: GetBucketPolicyRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container element for a bucket's policy status.</p>\n */\nexport interface PolicyStatus {\n  /**\n   * <p>The policy status for this bucket. <code>TRUE</code> indicates that this bucket is\n   *          public. <code>FALSE</code> indicates that the bucket is not public.</p>\n   */\n  IsPublic?: boolean;\n}\n\nexport namespace PolicyStatus {\n  export const filterSensitiveLog = (obj: PolicyStatus): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketPolicyStatusOutput {\n  /**\n   * <p>The policy status for the specified bucket.</p>\n   */\n  PolicyStatus?: PolicyStatus;\n}\n\nexport namespace GetBucketPolicyStatusOutput {\n  export const filterSensitiveLog = (obj: GetBucketPolicyStatusOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketPolicyStatusRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose policy status you want to retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketPolicyStatusRequest {\n  export const filterSensitiveLog = (obj: GetBucketPolicyStatusRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type DeleteMarkerReplicationStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>Specifies whether Amazon S3 replicates delete markers. If you specify a <code>Filter</code>\n *          in your replication configuration, you must also include a\n *             <code>DeleteMarkerReplication</code> element. If your <code>Filter</code> includes a\n *             <code>Tag</code> element, the <code>DeleteMarkerReplication</code>\n *             <code>Status</code> must be set to Disabled, because Amazon S3 does not support replicating\n *          delete markers for tag-based rules. For an example configuration, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config\">Basic Rule Configuration</a>. </p>\n *          <p>For more information about delete marker replication, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html\">Basic Rule\n *             Configuration</a>. </p>\n *          <note>\n *             <p>If you are using an earlier version of the replication configuration, Amazon S3 handles\n *             replication of delete markers differently. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations\">Backward Compatibility</a>.</p>\n *          </note>\n */\nexport interface DeleteMarkerReplication {\n  /**\n   * <p>Indicates whether to replicate delete markers.</p>\n   *          <note>\n   *             <p>Indicates whether to replicate delete markers.</p>\n   *          </note>\n   */\n  Status?: DeleteMarkerReplicationStatus | string;\n}\n\nexport namespace DeleteMarkerReplication {\n  export const filterSensitiveLog = (obj: DeleteMarkerReplication): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies encryption-related information for an Amazon S3 bucket that is a destination for\n *          replicated objects.</p>\n */\nexport interface EncryptionConfiguration {\n  /**\n   * <p>Specifies the ID (Key ARN or Alias ARN) of the customer managed customer master key\n   *          (CMK) stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses\n   *          this key to encrypt replica objects. Amazon S3 only supports symmetric customer managed CMKs.\n   *          For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and\n   *             Asymmetric Keys</a> in the <i>AWS Key Management Service Developer\n   *             Guide</i>.</p>\n   */\n  ReplicaKmsKeyID?: string;\n}\n\nexport namespace EncryptionConfiguration {\n  export const filterSensitiveLog = (obj: EncryptionConfiguration): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics\n *             <code>EventThreshold</code>. </p>\n */\nexport interface ReplicationTimeValue {\n  /**\n   * <p> Contains an integer specifying time in minutes. </p>\n   *          <p> Valid values: 15 minutes. </p>\n   */\n  Minutes?: number;\n}\n\nexport namespace ReplicationTimeValue {\n  export const filterSensitiveLog = (obj: ReplicationTimeValue): any => ({\n    ...obj,\n  });\n}\n\nexport type MetricsStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p> A container specifying replication metrics-related settings enabling replication\n *          metrics and events.</p>\n */\nexport interface Metrics {\n  /**\n   * <p> Specifies whether the replication metrics are enabled. </p>\n   */\n  Status: MetricsStatus | string | undefined;\n\n  /**\n   * <p> A container specifying the time threshold for emitting the\n   *             <code>s3:Replication:OperationMissedThreshold</code> event. </p>\n   */\n  EventThreshold?: ReplicationTimeValue;\n}\n\nexport namespace Metrics {\n  export const filterSensitiveLog = (obj: Metrics): any => ({\n    ...obj,\n  });\n}\n\nexport type ReplicationTimeStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p> A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is\n *          enabled and the time when all objects and operations on objects must be replicated. Must be\n *          specified together with a <code>Metrics</code> block. </p>\n */\nexport interface ReplicationTime {\n  /**\n   * <p> Specifies whether the replication time is enabled. </p>\n   */\n  Status: ReplicationTimeStatus | string | undefined;\n\n  /**\n   * <p> A container specifying the time by which replication should be complete for all objects\n   *          and operations on objects. </p>\n   */\n  Time: ReplicationTimeValue | undefined;\n}\n\nexport namespace ReplicationTime {\n  export const filterSensitiveLog = (obj: ReplicationTime): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies information about where to publish analysis or configuration results for an\n *          Amazon S3 bucket and S3 Replication Time Control (S3 RTC).</p>\n */\nexport interface Destination {\n  /**\n   * <p> The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the\n   *          results.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to\n   *          change replica ownership to the AWS account that owns the destination bucket by specifying\n   *          the <code>AccessControlTranslation</code> property, this is the account ID of the\n   *          destination bucket owner. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-change-owner.html\">Replication Additional\n   *             Configuration: Changing the Replica Owner</a> in the <i>Amazon Simple Storage\n   *             Service Developer Guide</i>.</p>\n   */\n  Account?: string;\n\n  /**\n   * <p> The storage class to use when replicating objects, such as S3 Standard or reduced\n   *          redundancy. By default, Amazon S3 uses the storage class of the source object to create the\n   *          object replica. </p>\n   *          <p>For valid values, see the <code>StorageClass</code> element of the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html\">PUT Bucket\n   *             replication</a> action in the <i>Amazon Simple Storage Service API Reference</i>.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>Specify this only in a cross-account scenario (where source and destination bucket\n   *          owners are not the same), and you want to change replica ownership to the AWS account that\n   *          owns the destination bucket. If this is not specified in the replication configuration, the\n   *          replicas are owned by same AWS account that owns the source object.</p>\n   */\n  AccessControlTranslation?: AccessControlTranslation;\n\n  /**\n   * <p>A container that provides information about encryption. If\n   *             <code>SourceSelectionCriteria</code> is specified, you must specify this element.</p>\n   */\n  EncryptionConfiguration?: EncryptionConfiguration;\n\n  /**\n   * <p> A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time\n   *          when all objects and operations on objects must be replicated. Must be specified together\n   *          with a <code>Metrics</code> block. </p>\n   */\n  ReplicationTime?: ReplicationTime;\n\n  /**\n   * <p> A container specifying replication metrics-related settings enabling replication\n   *          metrics and events. </p>\n   */\n  Metrics?: Metrics;\n}\n\nexport namespace Destination {\n  export const filterSensitiveLog = (obj: Destination): any => ({\n    ...obj,\n  });\n}\n\nexport type ExistingObjectReplicationStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>Optional configuration to replicate existing source bucket objects. For more\n *          information, see <a href=\" https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication\">Replicating Existing Objects</a> in the <i>Amazon S3 Developer Guide</i>.\n *       </p>\n */\nexport interface ExistingObjectReplication {\n  /**\n   * <p></p>\n   */\n  Status: ExistingObjectReplicationStatus | string | undefined;\n}\n\nexport namespace ExistingObjectReplication {\n  export const filterSensitiveLog = (obj: ExistingObjectReplication): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for specifying rule filters. The filters determine the subset of objects to\n *          which the rule applies. This element is required only if you specify more than one filter. </p>\n *          <p>For example:</p>\n *          <ul>\n *             <li>\n *                <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap\n *                these filters in an <code>And</code> tag. </p>\n *             </li>\n *             <li>\n *                <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements\n *                in an <code>And</code> tag</p>\n *             </li>\n *          </ul>\n */\nexport interface ReplicationRuleAndOperator {\n  /**\n   * <p>An object key name prefix that identifies the subset of objects to which the rule\n   *          applies.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>An array of tags containing key and value pairs.</p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace ReplicationRuleAndOperator {\n  export const filterSensitiveLog = (obj: ReplicationRuleAndOperator): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A filter that identifies the subset of objects to which the replication rule applies. A\n *             <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or\n *          an <code>And</code> child element.</p>\n */\nexport type ReplicationRuleFilter =\n  | ReplicationRuleFilter.AndMember\n  | ReplicationRuleFilter.PrefixMember\n  | ReplicationRuleFilter.TagMember\n  | ReplicationRuleFilter.$UnknownMember;\n\nexport namespace ReplicationRuleFilter {\n  /**\n   * <p>An object key name prefix that identifies the subset of objects to which the rule\n   *          applies.</p>\n   */\n  export interface PrefixMember {\n    Prefix: string;\n    Tag?: never;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>A container for specifying a tag key and value. </p>\n   *          <p>The rule applies only to objects that have the tag in their tag set.</p>\n   */\n  export interface TagMember {\n    Prefix?: never;\n    Tag: Tag;\n    And?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>A container for specifying rule filters. The filters determine the subset of objects to\n   *          which the rule applies. This element is required only if you specify more than one filter.\n   *          For example: </p>\n   *          <ul>\n   *             <li>\n   *                <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap\n   *                these filters in an <code>And</code> tag.</p>\n   *             </li>\n   *             <li>\n   *                <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements\n   *                in an <code>And</code> tag.</p>\n   *             </li>\n   *          </ul>\n   */\n  export interface AndMember {\n    Prefix?: never;\n    Tag?: never;\n    And: ReplicationRuleAndOperator;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    Prefix?: never;\n    Tag?: never;\n    And?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    Prefix: (value: string) => T;\n    Tag: (value: Tag) => T;\n    And: (value: ReplicationRuleAndOperator) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: ReplicationRuleFilter, visitor: Visitor<T>): T => {\n    if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);\n    if (value.Tag !== undefined) return visitor.Tag(value.Tag);\n    if (value.And !== undefined) return visitor.And(value.And);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  export const filterSensitiveLog = (obj: ReplicationRuleFilter): any => {\n    if (obj.Prefix !== undefined) return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined) return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n    if (obj.And !== undefined) return { And: ReplicationRuleAndOperator.filterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\nexport type ReplicaModificationsStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>A filter that you can specify for selection for modifications on replicas. Amazon S3 doesn't\n *          replicate replica modifications by default. In the latest version of replication\n *          configuration (when <code>Filter</code> is specified), you can specify this element and set\n *          the status to <code>Enabled</code> to replicate modifications on replicas. </p>\n *          <note>\n *             <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the\n *             replication configuration is the earlier version, V1. In the earlier version, this\n *             element is not allowed.</p>\n *          </note>\n */\nexport interface ReplicaModifications {\n  /**\n   * <p>Specifies whether Amazon S3 replicates modifications on replicas.</p>\n   */\n  Status: ReplicaModificationsStatus | string | undefined;\n}\n\nexport namespace ReplicaModifications {\n  export const filterSensitiveLog = (obj: ReplicaModifications): any => ({\n    ...obj,\n  });\n}\n\nexport type SseKmsEncryptedObjectsStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>A container for filter information for the selection of S3 objects encrypted with AWS\n *          KMS.</p>\n */\nexport interface SseKmsEncryptedObjects {\n  /**\n   * <p>Specifies whether Amazon S3 replicates objects created with server-side encryption using a\n   *          customer master key (CMK) stored in AWS Key Management Service.</p>\n   */\n  Status: SseKmsEncryptedObjectsStatus | string | undefined;\n}\n\nexport namespace SseKmsEncryptedObjects {\n  export const filterSensitiveLog = (obj: SseKmsEncryptedObjects): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container that describes additional filters for identifying the source objects that\n *          you want to replicate. You can choose to enable or disable the replication of these\n *          objects. Currently, Amazon S3 supports only the filter that you can specify for objects created\n *          with server-side encryption using a customer master key (CMK) stored in AWS Key Management\n *          Service (SSE-KMS).</p>\n */\nexport interface SourceSelectionCriteria {\n  /**\n   * <p> A container for filter information for the selection of Amazon S3 objects encrypted with AWS\n   *          KMS. If you include <code>SourceSelectionCriteria</code> in the replication configuration,\n   *          this element is required. </p>\n   */\n  SseKmsEncryptedObjects?: SseKmsEncryptedObjects;\n\n  /**\n   * <p>A filter that you can specify for selections for modifications on replicas. Amazon S3 doesn't\n   *          replicate replica modifications by default. In the latest version of replication\n   *          configuration (when <code>Filter</code> is specified), you can specify this element and set\n   *          the status to <code>Enabled</code> to replicate modifications on replicas. </p>\n   *          <note>\n   *             <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the\n   *             replication configuration is the earlier version, V1. In the earlier version, this\n   *             element is not allowed</p>\n   *          </note>\n   */\n  ReplicaModifications?: ReplicaModifications;\n}\n\nexport namespace SourceSelectionCriteria {\n  export const filterSensitiveLog = (obj: SourceSelectionCriteria): any => ({\n    ...obj,\n  });\n}\n\nexport type ReplicationRuleStatus = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>Specifies which Amazon S3 objects to replicate and where to store the replicas.</p>\n */\nexport interface ReplicationRule {\n  /**\n   * <p>A unique identifier for the rule. The maximum value is 255 characters.</p>\n   */\n  ID?: string;\n\n  /**\n   * <p>The priority indicates which rule has precedence whenever two or more replication rules\n   *          conflict. Amazon S3 will attempt to replicate objects according to all replication rules.\n   *          However, if there are two or more rules with the same destination bucket, then objects will\n   *          be replicated according to the rule with the highest priority. The higher the number, the\n   *          higher the priority. </p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html\">Replication</a> in the\n   *             <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Priority?: number;\n\n  /**\n   * @deprecated\n   *\n   * <p>An object key name prefix that identifies the object or objects to which the rule\n   *          applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket,\n   *          specify an empty string. </p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>A filter that identifies the subset of objects to which the replication rule applies. A\n   *             <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or\n   *          an <code>And</code> child element.</p>\n   */\n  Filter?: ReplicationRuleFilter;\n\n  /**\n   * <p>Specifies whether the rule is enabled.</p>\n   */\n  Status: ReplicationRuleStatus | string | undefined;\n\n  /**\n   * <p>A container that describes additional filters for identifying the source objects that\n   *          you want to replicate. You can choose to enable or disable the replication of these\n   *          objects. Currently, Amazon S3 supports only the filter that you can specify for objects created\n   *          with server-side encryption using a customer master key (CMK) stored in AWS Key Management\n   *          Service (SSE-KMS).</p>\n   */\n  SourceSelectionCriteria?: SourceSelectionCriteria;\n\n  /**\n   * <p></p>\n   */\n  ExistingObjectReplication?: ExistingObjectReplication;\n\n  /**\n   * <p>A container for information about the replication destination and its configurations\n   *          including enabling the S3 Replication Time Control (S3 RTC).</p>\n   */\n  Destination: Destination | undefined;\n\n  /**\n   * <p>Specifies whether Amazon S3 replicates delete markers. If you specify a <code>Filter</code>\n   *          in your replication configuration, you must also include a\n   *             <code>DeleteMarkerReplication</code> element. If your <code>Filter</code> includes a\n   *             <code>Tag</code> element, the <code>DeleteMarkerReplication</code>\n   *             <code>Status</code> must be set to Disabled, because Amazon S3 does not support replicating\n   *          delete markers for tag-based rules. For an example configuration, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config\">Basic Rule Configuration</a>. </p>\n   *          <p>For more information about delete marker replication, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html\">Basic Rule\n   *             Configuration</a>. </p>\n   *          <note>\n   *             <p>If you are using an earlier version of the replication configuration, Amazon S3 handles\n   *             replication of delete markers differently. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations\">Backward Compatibility</a>.</p>\n   *          </note>\n   */\n  DeleteMarkerReplication?: DeleteMarkerReplication;\n}\n\nexport namespace ReplicationRule {\n  export const filterSensitiveLog = (obj: ReplicationRule): any => ({\n    ...obj,\n    ...(obj.Filter && { Filter: ReplicationRuleFilter.filterSensitiveLog(obj.Filter) }),\n  });\n}\n\n/**\n * <p>A container for replication rules. You can add up to 1,000 rules. The maximum size of a\n *          replication configuration is 2 MB.</p>\n */\nexport interface ReplicationConfiguration {\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *          Amazon S3 assumes when replicating objects. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html\">How to Set Up\n   *             Replication</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Role: string | undefined;\n\n  /**\n   * <p>A container for one or more replication rules. A replication configuration must have at\n   *          least one rule and can contain a maximum of 1,000 rules. </p>\n   */\n  Rules: ReplicationRule[] | undefined;\n}\n\nexport namespace ReplicationConfiguration {\n  export const filterSensitiveLog = (obj: ReplicationConfiguration): any => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => ReplicationRule.filterSensitiveLog(item)) }),\n  });\n}\n\nexport interface GetBucketReplicationOutput {\n  /**\n   * <p>A container for replication rules. You can add up to 1,000 rules. The maximum size of a\n   *          replication configuration is 2 MB.</p>\n   */\n  ReplicationConfiguration?: ReplicationConfiguration;\n}\n\nexport namespace GetBucketReplicationOutput {\n  export const filterSensitiveLog = (obj: GetBucketReplicationOutput): any => ({\n    ...obj,\n    ...(obj.ReplicationConfiguration && {\n      ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration),\n    }),\n  });\n}\n\nexport interface GetBucketReplicationRequest {\n  /**\n   * <p>The bucket name for which to get the replication information.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketReplicationRequest {\n  export const filterSensitiveLog = (obj: GetBucketReplicationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type Payer = \"BucketOwner\" | \"Requester\";\n\nexport interface GetBucketRequestPaymentOutput {\n  /**\n   * <p>Specifies who pays for the download and request fees.</p>\n   */\n  Payer?: Payer | string;\n}\n\nexport namespace GetBucketRequestPaymentOutput {\n  export const filterSensitiveLog = (obj: GetBucketRequestPaymentOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketRequestPaymentRequest {\n  /**\n   * <p>The name of the bucket for which to get the payment request configuration</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketRequestPaymentRequest {\n  export const filterSensitiveLog = (obj: GetBucketRequestPaymentRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketTaggingOutput {\n  /**\n   * <p>Contains the tag set.</p>\n   */\n  TagSet: Tag[] | undefined;\n}\n\nexport namespace GetBucketTaggingOutput {\n  export const filterSensitiveLog = (obj: GetBucketTaggingOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketTaggingRequest {\n  /**\n   * <p>The name of the bucket for which to get the tagging information.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketTaggingRequest {\n  export const filterSensitiveLog = (obj: GetBucketTaggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type MFADeleteStatus = \"Disabled\" | \"Enabled\";\n\nexport type BucketVersioningStatus = \"Enabled\" | \"Suspended\";\n\nexport interface GetBucketVersioningOutput {\n  /**\n   * <p>The versioning state of the bucket.</p>\n   */\n  Status?: BucketVersioningStatus | string;\n\n  /**\n   * <p>Specifies whether MFA delete is enabled in the bucket versioning configuration. This\n   *          element is only returned if the bucket has been configured with MFA delete. If the bucket\n   *          has never been so configured, this element is not returned.</p>\n   */\n  MFADelete?: MFADeleteStatus | string;\n}\n\nexport namespace GetBucketVersioningOutput {\n  export const filterSensitiveLog = (obj: GetBucketVersioningOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketVersioningRequest {\n  /**\n   * <p>The name of the bucket for which to get the versioning information.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketVersioningRequest {\n  export const filterSensitiveLog = (obj: GetBucketVersioningRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The error information.</p>\n */\nexport interface ErrorDocument {\n  /**\n   * <p>The object key name to use when a 4XX class error occurs.</p>\n   */\n  Key: string | undefined;\n}\n\nexport namespace ErrorDocument {\n  export const filterSensitiveLog = (obj: ErrorDocument): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the <code>Suffix</code> element.</p>\n */\nexport interface IndexDocument {\n  /**\n   * <p>A suffix that is appended to a request that is for a directory on the website endpoint\n   *          (for example,if the suffix is index.html and you make a request to samplebucket/images/ the\n   *          data that is returned will be for the object with the key name images/index.html) The\n   *          suffix must not be empty and must not include a slash character.</p>\n   */\n  Suffix: string | undefined;\n}\n\nexport namespace IndexDocument {\n  export const filterSensitiveLog = (obj: IndexDocument): any => ({\n    ...obj,\n  });\n}\n\nexport type Protocol = \"http\" | \"https\";\n\n/**\n * <p>Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3\n *          bucket.</p>\n */\nexport interface RedirectAllRequestsTo {\n  /**\n   * <p>Name of the host where requests are redirected.</p>\n   */\n  HostName: string | undefined;\n\n  /**\n   * <p>Protocol to use when redirecting requests. The default is the protocol that is used in\n   *          the original request.</p>\n   */\n  Protocol?: Protocol | string;\n}\n\nexport namespace RedirectAllRequestsTo {\n  export const filterSensitiveLog = (obj: RedirectAllRequestsTo): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A container for describing a condition that must be met for the specified redirect to\n *          apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect\n *          to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect\n *          request to another host where you might process the error.</p>\n */\nexport interface Condition {\n  /**\n   * <p>The HTTP error code when the redirect is applied. In the event of an error, if the error\n   *          code equals this value, then the specified redirect is applied. Required when parent\n   *          element <code>Condition</code> is specified and sibling <code>KeyPrefixEquals</code> is not\n   *          specified. If both are specified, then both must be true for the redirect to be\n   *          applied.</p>\n   */\n  HttpErrorCodeReturnedEquals?: string;\n\n  /**\n   * <p>The object key name prefix when the redirect is applied. For example, to redirect\n   *          requests for <code>ExamplePage.html</code>, the key prefix will be\n   *             <code>ExamplePage.html</code>. To redirect request for all pages with the prefix\n   *             <code>docs/</code>, the key prefix will be <code>/docs</code>, which identifies all\n   *          objects in the <code>docs/</code> folder. Required when the parent element\n   *             <code>Condition</code> is specified and sibling <code>HttpErrorCodeReturnedEquals</code>\n   *          is not specified. If both conditions are specified, both must be true for the redirect to\n   *          be applied.</p>\n   */\n  KeyPrefixEquals?: string;\n}\n\nexport namespace Condition {\n  export const filterSensitiveLog = (obj: Condition): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies how requests are redirected. In the event of an error, you can specify a\n *          different error code to return.</p>\n */\nexport interface Redirect {\n  /**\n   * <p>The host name to use in the redirect request.</p>\n   */\n  HostName?: string;\n\n  /**\n   * <p>The HTTP redirect code to use on the response. Not required if one of the siblings is\n   *          present.</p>\n   */\n  HttpRedirectCode?: string;\n\n  /**\n   * <p>Protocol to use when redirecting requests. The default is the protocol that is used in\n   *          the original request.</p>\n   */\n  Protocol?: Protocol | string;\n\n  /**\n   * <p>The object key prefix to use in the redirect request. For example, to redirect requests\n   *          for all pages with prefix <code>docs/</code> (objects in the <code>docs/</code> folder) to\n   *             <code>documents/</code>, you can set a condition block with <code>KeyPrefixEquals</code>\n   *          set to <code>docs/</code> and in the Redirect set <code>ReplaceKeyPrefixWith</code> to\n   *             <code>/documents</code>. Not required if one of the siblings is present. Can be present\n   *          only if <code>ReplaceKeyWith</code> is not provided.</p>\n   */\n  ReplaceKeyPrefixWith?: string;\n\n  /**\n   * <p>The specific object key to use in the redirect request. For example, redirect request to\n   *             <code>error.html</code>. Not required if one of the siblings is present. Can be present\n   *          only if <code>ReplaceKeyPrefixWith</code> is not provided.</p>\n   */\n  ReplaceKeyWith?: string;\n}\n\nexport namespace Redirect {\n  export const filterSensitiveLog = (obj: Redirect): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the redirect behavior and when a redirect is applied. For more information\n *          about routing rules, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects\">Configuring advanced conditional redirects</a> in the\n *             <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\nexport interface RoutingRule {\n  /**\n   * <p>A container for describing a condition that must be met for the specified redirect to\n   *          apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect\n   *          to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect\n   *          request to another host where you might process the error.</p>\n   */\n  Condition?: Condition;\n\n  /**\n   * <p>Container for redirect information. You can redirect requests to another host, to\n   *          another page, or with another protocol. In the event of an error, you can specify a\n   *          different error code to return.</p>\n   */\n  Redirect: Redirect | undefined;\n}\n\nexport namespace RoutingRule {\n  export const filterSensitiveLog = (obj: RoutingRule): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketWebsiteOutput {\n  /**\n   * <p>Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3\n   *          bucket.</p>\n   */\n  RedirectAllRequestsTo?: RedirectAllRequestsTo;\n\n  /**\n   * <p>The name of the index document for the website (for example\n   *          <code>index.html</code>).</p>\n   */\n  IndexDocument?: IndexDocument;\n\n  /**\n   * <p>The object key name of the website error document to use for 4XX class errors.</p>\n   */\n  ErrorDocument?: ErrorDocument;\n\n  /**\n   * <p>Rules that define when a redirect is applied and the redirect behavior.</p>\n   */\n  RoutingRules?: RoutingRule[];\n}\n\nexport namespace GetBucketWebsiteOutput {\n  export const filterSensitiveLog = (obj: GetBucketWebsiteOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetBucketWebsiteRequest {\n  /**\n   * <p>The bucket name for which to get the website configuration.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetBucketWebsiteRequest {\n  export const filterSensitiveLog = (obj: GetBucketWebsiteRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type ReplicationStatus = \"COMPLETE\" | \"FAILED\" | \"PENDING\" | \"REPLICA\";\n\nexport interface GetObjectOutput {\n  /**\n   * <p>Object data.</p>\n   */\n  Body?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p>Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If\n   *          false, this response header does not appear in the response.</p>\n   */\n  DeleteMarker?: boolean;\n\n  /**\n   * <p>Indicates that a range of bytes was specified.</p>\n   */\n  AcceptRanges?: string;\n\n  /**\n   * <p>If the object expiration is configured (see PUT Bucket lifecycle), the response includes\n   *          this header. It includes the expiry-date and rule-id key-value pairs providing object\n   *          expiration information. The value of the rule-id is URL encoded.</p>\n   */\n  Expiration?: string;\n\n  /**\n   * <p>Provides information about object restoration operation and expiration time of the\n   *          restored object copy.</p>\n   */\n  Restore?: string;\n\n  /**\n   * <p>Last modified date of the object</p>\n   */\n  LastModified?: Date;\n\n  /**\n   * <p>Size of the body in bytes.</p>\n   */\n  ContentLength?: number;\n\n  /**\n   * <p>An ETag is an opaque identifier assigned by a web server to a specific version of a\n   *          resource found at a URL.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>This is set to the number of metadata entries not returned in <code>x-amz-meta</code>\n   *          headers. This can happen if you create metadata using an API like SOAP that supports more\n   *          flexible metadata than the REST API. For example, using SOAP, you can create metadata whose\n   *          values are not legal HTTP headers.</p>\n   */\n  MissingMeta?: number;\n\n  /**\n   * <p>Version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies caching behavior along the request/reply chain.</p>\n   */\n  CacheControl?: string;\n\n  /**\n   * <p>Specifies presentational information for the object.</p>\n   */\n  ContentDisposition?: string;\n\n  /**\n   * <p>Specifies what content encodings have been applied to the object and thus what decoding\n   *          mechanisms must be applied to obtain the media-type referenced by the Content-Type header\n   *          field.</p>\n   */\n  ContentEncoding?: string;\n\n  /**\n   * <p>The language the content is in.</p>\n   */\n  ContentLanguage?: string;\n\n  /**\n   * <p>The portion of the object returned in the response.</p>\n   */\n  ContentRange?: string;\n\n  /**\n   * <p>A standard MIME type describing the format of the object data.</p>\n   */\n  ContentType?: string;\n\n  /**\n   * <p>The date and time at which the object is no longer cacheable.</p>\n   */\n  Expires?: Date;\n\n  /**\n   * <p>If the bucket is configured as a website, redirects requests for this object to another\n   *          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in\n   *          the object metadata.</p>\n   */\n  WebsiteRedirectLocation?: string;\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>A map of metadata to store with the object in S3.</p>\n   */\n  Metadata?: { [key: string]: string };\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) that was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Indicates whether the object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>Provides storage class information of the object. Amazon S3 returns this header for all\n   *          objects except for S3 Standard storage class objects.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n\n  /**\n   * <p>Amazon S3 can return this if your request involves a bucket that is either a source or\n   *          destination in a replication rule.</p>\n   */\n  ReplicationStatus?: ReplicationStatus | string;\n\n  /**\n   * <p>The count of parts this object has.</p>\n   */\n  PartsCount?: number;\n\n  /**\n   * <p>The number of tags, if any, on the object.</p>\n   */\n  TagCount?: number;\n\n  /**\n   * <p>The Object Lock mode currently in place for this object.</p>\n   */\n  ObjectLockMode?: ObjectLockMode | string;\n\n  /**\n   * <p>The date and time when this object's Object Lock will expire.</p>\n   */\n  ObjectLockRetainUntilDate?: Date;\n\n  /**\n   * <p>Indicates whether this object has an active legal hold. This field is only returned if\n   *          you have permission to view an object's legal hold status. </p>\n   */\n  ObjectLockLegalHoldStatus?: ObjectLockLegalHoldStatus | string;\n}\n\nexport namespace GetObjectOutput {\n  export const filterSensitiveLog = (obj: GetObjectOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n  });\n}\n\nexport interface GetObjectRequest {\n  /**\n   * <p>The bucket name containing the object. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Return the object only if its entity tag (ETag) is the same as the one specified,\n   *          otherwise return a 412 (precondition failed).</p>\n   */\n  IfMatch?: string;\n\n  /**\n   * <p>Return the object only if it has been modified since the specified time, otherwise\n   *          return a 304 (not modified).</p>\n   */\n  IfModifiedSince?: Date;\n\n  /**\n   * <p>Return the object only if its entity tag (ETag) is different from the one specified,\n   *          otherwise return a 304 (not modified).</p>\n   */\n  IfNoneMatch?: string;\n\n  /**\n   * <p>Return the object only if it has not been modified since the specified time, otherwise\n   *          return a 412 (precondition failed).</p>\n   */\n  IfUnmodifiedSince?: Date;\n\n  /**\n   * <p>Key of the object to get.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Downloads the specified range bytes of an object. For more information about the HTTP\n   *          Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>\n   *          <note>\n   *             <p>Amazon S3 doesn't support retrieving multiple ranges of data per <code>GET</code>\n   *             request.</p>\n   *          </note>\n   */\n  Range?: string;\n\n  /**\n   * <p>Sets the <code>Cache-Control</code> header of the response.</p>\n   */\n  ResponseCacheControl?: string;\n\n  /**\n   * <p>Sets the <code>Content-Disposition</code> header of the response</p>\n   */\n  ResponseContentDisposition?: string;\n\n  /**\n   * <p>Sets the <code>Content-Encoding</code> header of the response.</p>\n   */\n  ResponseContentEncoding?: string;\n\n  /**\n   * <p>Sets the <code>Content-Language</code> header of the response.</p>\n   */\n  ResponseContentLanguage?: string;\n\n  /**\n   * <p>Sets the <code>Content-Type</code> header of the response.</p>\n   */\n  ResponseContentType?: string;\n\n  /**\n   * <p>Sets the <code>Expires</code> header of the response.</p>\n   */\n  ResponseExpires?: Date;\n\n  /**\n   * <p>VersionId used to reference a specific version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>Part number of the object being read. This is a positive integer between 1 and 10,000.\n   *          Effectively performs a 'ranged' GET request for the part specified. Useful for downloading\n   *          just a part of an object.</p>\n   */\n  PartNumber?: number;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectRequest {\n  export const filterSensitiveLog = (obj: GetObjectRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Object is archived and inaccessible until restored.</p>\n */\nexport interface InvalidObjectState extends __SmithyException, $MetadataBearer {\n  name: \"InvalidObjectState\";\n  $fault: \"client\";\n  StorageClass?: StorageClass | string;\n  AccessTier?: IntelligentTieringAccessTier | string;\n}\n\nexport namespace InvalidObjectState {\n  export const filterSensitiveLog = (obj: InvalidObjectState): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified key does not exist.</p>\n */\nexport interface NoSuchKey extends __SmithyException, $MetadataBearer {\n  name: \"NoSuchKey\";\n  $fault: \"client\";\n}\n\nexport namespace NoSuchKey {\n  export const filterSensitiveLog = (obj: NoSuchKey): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectAclOutput {\n  /**\n   * <p> Container for the bucket owner's display name and ID.</p>\n   */\n  Owner?: Owner;\n\n  /**\n   * <p>A list of grants.</p>\n   */\n  Grants?: Grant[];\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace GetObjectAclOutput {\n  export const filterSensitiveLog = (obj: GetObjectAclOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectAclRequest {\n  /**\n   * <p>The bucket name that contains the object for which to get the ACL information. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The key of the object for which to get the ACL information.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>VersionId used to reference a specific version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectAclRequest {\n  export const filterSensitiveLog = (obj: GetObjectAclRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A Legal Hold configuration for an object.</p>\n */\nexport interface ObjectLockLegalHold {\n  /**\n   * <p>Indicates whether the specified object has a Legal Hold in place.</p>\n   */\n  Status?: ObjectLockLegalHoldStatus | string;\n}\n\nexport namespace ObjectLockLegalHold {\n  export const filterSensitiveLog = (obj: ObjectLockLegalHold): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectLegalHoldOutput {\n  /**\n   * <p>The current Legal Hold status for the specified object.</p>\n   */\n  LegalHold?: ObjectLockLegalHold;\n}\n\nexport namespace GetObjectLegalHoldOutput {\n  export const filterSensitiveLog = (obj: GetObjectLegalHoldOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectLegalHoldRequest {\n  /**\n   * <p>The bucket name containing the object whose Legal Hold status you want to retrieve. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The key name for the object whose Legal Hold status you want to retrieve.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The version ID of the object whose Legal Hold status you want to retrieve.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectLegalHoldRequest {\n  export const filterSensitiveLog = (obj: GetObjectLegalHoldRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type ObjectLockEnabled = \"Enabled\";\n\nexport type ObjectLockRetentionMode = \"COMPLIANCE\" | \"GOVERNANCE\";\n\n/**\n * <p>The container element for specifying the default Object Lock retention settings for new\n *          objects placed in the specified bucket.</p>\n */\nexport interface DefaultRetention {\n  /**\n   * <p>The default Object Lock retention mode you want to apply to new objects placed in the\n   *          specified bucket.</p>\n   */\n  Mode?: ObjectLockRetentionMode | string;\n\n  /**\n   * <p>The number of days that you want to specify for the default retention period.</p>\n   */\n  Days?: number;\n\n  /**\n   * <p>The number of years that you want to specify for the default retention period.</p>\n   */\n  Years?: number;\n}\n\nexport namespace DefaultRetention {\n  export const filterSensitiveLog = (obj: DefaultRetention): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container element for an Object Lock rule.</p>\n */\nexport interface ObjectLockRule {\n  /**\n   * <p>The default retention period that you want to apply to new objects placed in the\n   *          specified bucket.</p>\n   */\n  DefaultRetention?: DefaultRetention;\n}\n\nexport namespace ObjectLockRule {\n  export const filterSensitiveLog = (obj: ObjectLockRule): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container element for Object Lock configuration parameters.</p>\n */\nexport interface ObjectLockConfiguration {\n  /**\n   * <p>Indicates whether this bucket has an Object Lock configuration enabled.</p>\n   */\n  ObjectLockEnabled?: ObjectLockEnabled | string;\n\n  /**\n   * <p>The Object Lock rule in place for the specified object.</p>\n   */\n  Rule?: ObjectLockRule;\n}\n\nexport namespace ObjectLockConfiguration {\n  export const filterSensitiveLog = (obj: ObjectLockConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectLockConfigurationOutput {\n  /**\n   * <p>The specified bucket's Object Lock configuration.</p>\n   */\n  ObjectLockConfiguration?: ObjectLockConfiguration;\n}\n\nexport namespace GetObjectLockConfigurationOutput {\n  export const filterSensitiveLog = (obj: GetObjectLockConfigurationOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectLockConfigurationRequest {\n  /**\n   * <p>The bucket whose Object Lock configuration you want to retrieve.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectLockConfigurationRequest {\n  export const filterSensitiveLog = (obj: GetObjectLockConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A Retention configuration for an object.</p>\n */\nexport interface ObjectLockRetention {\n  /**\n   * <p>Indicates the Retention mode for the specified object.</p>\n   */\n  Mode?: ObjectLockRetentionMode | string;\n\n  /**\n   * <p>The date on which this Object Lock Retention will expire.</p>\n   */\n  RetainUntilDate?: Date;\n}\n\nexport namespace ObjectLockRetention {\n  export const filterSensitiveLog = (obj: ObjectLockRetention): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectRetentionOutput {\n  /**\n   * <p>The container element for an object's retention settings.</p>\n   */\n  Retention?: ObjectLockRetention;\n}\n\nexport namespace GetObjectRetentionOutput {\n  export const filterSensitiveLog = (obj: GetObjectRetentionOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectRetentionRequest {\n  /**\n   * <p>The bucket name containing the object whose retention settings you want to retrieve. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The key name for the object whose retention settings you want to retrieve.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The version ID for the object whose retention settings you want to retrieve.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectRetentionRequest {\n  export const filterSensitiveLog = (obj: GetObjectRetentionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectTaggingOutput {\n  /**\n   * <p>The versionId of the object for which you got the tagging information.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Contains the tag set.</p>\n   */\n  TagSet: Tag[] | undefined;\n}\n\nexport namespace GetObjectTaggingOutput {\n  export const filterSensitiveLog = (obj: GetObjectTaggingOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectTaggingRequest {\n  /**\n   * <p>The bucket name containing the object for which to get the tagging information. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Object key for which to get the tagging information.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The versionId of the object for which to get the tagging information.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectTaggingRequest {\n  export const filterSensitiveLog = (obj: GetObjectTaggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectTorrentOutput {\n  /**\n   * <p>A Bencoded dictionary as defined by the BitTorrent specification</p>\n   */\n  Body?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace GetObjectTorrentOutput {\n  export const filterSensitiveLog = (obj: GetObjectTorrentOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetObjectTorrentRequest {\n  /**\n   * <p>The name of the bucket containing the object for which to get the torrent files.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The object key for which to get the information.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetObjectTorrentRequest {\n  export const filterSensitiveLog = (obj: GetObjectTorrentRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can\n *          enable the configuration options in any combination. For more information about when Amazon S3\n *          considers a bucket or object public, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status\">The Meaning of \"Public\"</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>\n */\nexport interface PublicAccessBlockConfiguration {\n  /**\n   * <p>Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket\n   *          and objects in this bucket. Setting this element to <code>TRUE</code> causes the following\n   *          behavior:</p>\n   *          <ul>\n   *             <li>\n   *                <p>PUT Bucket acl and PUT Object acl calls fail if the specified ACL is\n   *                public.</p>\n   *             </li>\n   *             <li>\n   *                <p>PUT Object calls fail if the request includes a public ACL.</p>\n   *             </li>\n   *             <li>\n   *                <p>PUT Bucket calls fail if the request includes a public ACL.</p>\n   *             </li>\n   *          </ul>\n   *          <p>Enabling this setting doesn't affect existing policies or ACLs.</p>\n   */\n  BlockPublicAcls?: boolean;\n\n  /**\n   * <p>Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this\n   *          bucket. Setting this element to <code>TRUE</code> causes Amazon S3 to ignore all public ACLs on\n   *          this bucket and objects in this bucket.</p>\n   *          <p>Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't\n   *          prevent new public ACLs from being set.</p>\n   */\n  IgnorePublicAcls?: boolean;\n\n  /**\n   * <p>Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this\n   *          element to <code>TRUE</code> causes Amazon S3 to reject calls to PUT Bucket policy if the\n   *          specified bucket policy allows public access. </p>\n   *          <p>Enabling this setting doesn't affect existing bucket policies.</p>\n   */\n  BlockPublicPolicy?: boolean;\n\n  /**\n   * <p>Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting\n   *          this element to <code>TRUE</code> restricts access to this bucket to only AWS service\n   *          principals and authorized users within this account if the bucket has a public\n   *          policy.</p>\n   *          <p>Enabling this setting doesn't affect previously stored bucket policies, except that\n   *          public and cross-account access within any public bucket policy, including non-public\n   *          delegation to specific accounts, is blocked.</p>\n   */\n  RestrictPublicBuckets?: boolean;\n}\n\nexport namespace PublicAccessBlockConfiguration {\n  export const filterSensitiveLog = (obj: PublicAccessBlockConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetPublicAccessBlockOutput {\n  /**\n   * <p>The <code>PublicAccessBlock</code> configuration currently in effect for this Amazon S3\n   *          bucket.</p>\n   */\n  PublicAccessBlockConfiguration?: PublicAccessBlockConfiguration;\n}\n\nexport namespace GetPublicAccessBlockOutput {\n  export const filterSensitiveLog = (obj: GetPublicAccessBlockOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetPublicAccessBlockRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want\n   *          to retrieve. </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace GetPublicAccessBlockRequest {\n  export const filterSensitiveLog = (obj: GetPublicAccessBlockRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface HeadBucketRequest {\n  /**\n   * <p>The bucket name.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace HeadBucketRequest {\n  export const filterSensitiveLog = (obj: HeadBucketRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified bucket does not exist.</p>\n */\nexport interface NoSuchBucket extends __SmithyException, $MetadataBearer {\n  name: \"NoSuchBucket\";\n  $fault: \"client\";\n}\n\nexport namespace NoSuchBucket {\n  export const filterSensitiveLog = (obj: NoSuchBucket): any => ({\n    ...obj,\n  });\n}\n\nexport type ArchiveStatus = \"ARCHIVE_ACCESS\" | \"DEEP_ARCHIVE_ACCESS\";\n\nexport interface HeadObjectOutput {\n  /**\n   * <p>Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If\n   *          false, this response header does not appear in the response.</p>\n   */\n  DeleteMarker?: boolean;\n\n  /**\n   * <p>Indicates that a range of bytes was specified.</p>\n   */\n  AcceptRanges?: string;\n\n  /**\n   * <p>If the object expiration is configured (see PUT Bucket lifecycle), the response includes\n   *          this header. It includes the expiry-date and rule-id key-value pairs providing object\n   *          expiration information. The value of the rule-id is URL encoded.</p>\n   */\n  Expiration?: string;\n\n  /**\n   * <p>If the object is an archived object (an object whose storage class is GLACIER), the\n   *          response includes this header if either the archive restoration is in progress (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html\">RestoreObject</a> or an archive copy is already restored.</p>\n   *\n   *          <p> If an archive copy is already restored, the header value indicates when Amazon S3 is\n   *          scheduled to delete the object copy. For example:</p>\n   *\n   *          <p>\n   *             <code>x-amz-restore: ongoing-request=\"false\", expiry-date=\"Fri, 23 Dec 2012 00:00:00\n   *             GMT\"</code>\n   *          </p>\n   *\n   *          <p>If the object restoration is in progress, the header returns the value\n   *             <code>ongoing-request=\"true\"</code>.</p>\n   *\n   *          <p>For more information about archiving objects, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations\">Transitioning Objects: General Considerations</a>.</p>\n   */\n  Restore?: string;\n\n  /**\n   * <p>The archive state of the head object.</p>\n   */\n  ArchiveStatus?: ArchiveStatus | string;\n\n  /**\n   * <p>Last modified date of the object</p>\n   */\n  LastModified?: Date;\n\n  /**\n   * <p>Size of the body in bytes.</p>\n   */\n  ContentLength?: number;\n\n  /**\n   * <p>An ETag is an opaque identifier assigned by a web server to a specific version of a\n   *          resource found at a URL.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>This is set to the number of metadata entries not returned in <code>x-amz-meta</code>\n   *          headers. This can happen if you create metadata using an API like SOAP that supports more\n   *          flexible metadata than the REST API. For example, using SOAP, you can create metadata whose\n   *          values are not legal HTTP headers.</p>\n   */\n  MissingMeta?: number;\n\n  /**\n   * <p>Version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies caching behavior along the request/reply chain.</p>\n   */\n  CacheControl?: string;\n\n  /**\n   * <p>Specifies presentational information for the object.</p>\n   */\n  ContentDisposition?: string;\n\n  /**\n   * <p>Specifies what content encodings have been applied to the object and thus what decoding\n   *          mechanisms must be applied to obtain the media-type referenced by the Content-Type header\n   *          field.</p>\n   */\n  ContentEncoding?: string;\n\n  /**\n   * <p>The language the content is in.</p>\n   */\n  ContentLanguage?: string;\n\n  /**\n   * <p>A standard MIME type describing the format of the object data.</p>\n   */\n  ContentType?: string;\n\n  /**\n   * <p>The date and time at which the object is no longer cacheable.</p>\n   */\n  Expires?: Date;\n\n  /**\n   * <p>If the bucket is configured as a website, redirects requests for this object to another\n   *          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in\n   *          the object metadata.</p>\n   */\n  WebsiteRedirectLocation?: string;\n\n  /**\n   * <p>If the object is stored using server-side encryption either with an AWS KMS customer\n   *          master key (CMK) or an Amazon S3-managed encryption key, the response includes this header with\n   *          the value of the server-side encryption algorithm used when storing this object in Amazon\n   *          S3 (for example, AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>A map of metadata to store with the object in S3.</p>\n   */\n  Metadata?: { [key: string]: string };\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) that was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Indicates whether the object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>Provides storage class information of the object. Amazon S3 returns this header for all\n   *          objects except for S3 Standard storage class objects.</p>\n   *\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage\n   *             Classes</a>.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n\n  /**\n   * <p>Amazon S3 can return this header if your request involves a bucket that is either a source or\n   *          a destination in a replication rule.</p>\n   *\n   *          <p>In replication, you have a source bucket on which you configure replication and\n   *          destination bucket or buckets where Amazon S3 stores object replicas. When you request an object\n   *             (<code>GetObject</code>) or object metadata (<code>HeadObject</code>) from these\n   *          buckets, Amazon S3 will return the <code>x-amz-replication-status</code> header in the response\n   *          as follows:</p>\n   *          <ul>\n   *             <li>\n   *                <p>If requesting an object from the source bucket — Amazon S3 will return the\n   *                   <code>x-amz-replication-status</code> header if the object in your request is\n   *                eligible for replication.</p>\n   *                <p> For example, suppose that in your replication configuration, you specify object\n   *                prefix <code>TaxDocs</code> requesting Amazon S3 to replicate objects with key prefix\n   *                   <code>TaxDocs</code>. Any objects you upload with this key name prefix, for\n   *                example <code>TaxDocs/document1.pdf</code>, are eligible for replication. For any\n   *                object request with this key name prefix, Amazon S3 will return the\n   *                   <code>x-amz-replication-status</code> header with value PENDING, COMPLETED or\n   *                FAILED indicating object replication status.</p>\n   *             </li>\n   *             <li>\n   *                <p>If requesting an object from a destination bucket — Amazon S3 will return the\n   *                   <code>x-amz-replication-status</code> header with value REPLICA if the object in\n   *                your request is a replica that Amazon S3 created and there is no replica modification\n   *                replication in progress.</p>\n   *             </li>\n   *             <li>\n   *                <p>When replicating objects to multiple destination buckets the\n   *                   <code>x-amz-replication-status</code> header acts differently. The header of the\n   *                source object will only return a value of COMPLETED when replication is successful to\n   *                all destinations. The header will remain at value PENDING until replication has\n   *                completed for all destinations. If one or more destinations fails replication the\n   *                header will return FAILED. </p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Replication</a>.</p>\n   */\n  ReplicationStatus?: ReplicationStatus | string;\n\n  /**\n   * <p>The count of parts this object has.</p>\n   */\n  PartsCount?: number;\n\n  /**\n   * <p>The Object Lock mode, if any, that's in effect for this object. This header is only\n   *          returned if the requester has the <code>s3:GetObjectRetention</code> permission. For more\n   *          information about S3 Object Lock, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html\">Object\n   *             Lock</a>. </p>\n   */\n  ObjectLockMode?: ObjectLockMode | string;\n\n  /**\n   * <p>The date and time when the Object Lock retention period expires. This header is only\n   *          returned if the requester has the <code>s3:GetObjectRetention</code> permission.</p>\n   */\n  ObjectLockRetainUntilDate?: Date;\n\n  /**\n   * <p>Specifies whether a legal hold is in effect for this object. This header is only\n   *          returned if the requester has the <code>s3:GetObjectLegalHold</code> permission. This\n   *          header is not returned if the specified version of this object has never had a legal hold\n   *          applied. For more information about S3 Object Lock, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html\">Object Lock</a>.</p>\n   */\n  ObjectLockLegalHoldStatus?: ObjectLockLegalHoldStatus | string;\n}\n\nexport namespace HeadObjectOutput {\n  export const filterSensitiveLog = (obj: HeadObjectOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n  });\n}\n\nexport interface HeadObjectRequest {\n  /**\n   * <p>The name of the bucket containing the object.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Return the object only if its entity tag (ETag) is the same as the one specified,\n   *          otherwise return a 412 (precondition failed).</p>\n   */\n  IfMatch?: string;\n\n  /**\n   * <p>Return the object only if it has been modified since the specified time, otherwise\n   *          return a 304 (not modified).</p>\n   */\n  IfModifiedSince?: Date;\n\n  /**\n   * <p>Return the object only if its entity tag (ETag) is different from the one specified,\n   *          otherwise return a 304 (not modified).</p>\n   */\n  IfNoneMatch?: string;\n\n  /**\n   * <p>Return the object only if it has not been modified since the specified time, otherwise\n   *          return a 412 (precondition failed).</p>\n   */\n  IfUnmodifiedSince?: Date;\n\n  /**\n   * <p>The object key.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Downloads the specified range bytes of an object. For more information about the HTTP\n   *          Range header, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>\n   *          <note>\n   *             <p>Amazon S3 doesn't support retrieving multiple ranges of data per <code>GET</code>\n   *             request.</p>\n   *          </note>\n   */\n  Range?: string;\n\n  /**\n   * <p>VersionId used to reference a specific version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>Part number of the object being read. This is a positive integer between 1 and 10,000.\n   *          Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about\n   *          the size of the part and the number of parts in this object.</p>\n   */\n  PartNumber?: number;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace HeadObjectRequest {\n  export const filterSensitiveLog = (obj: HeadObjectRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n  });\n}\n\nexport interface ListBucketAnalyticsConfigurationsOutput {\n  /**\n   * <p>Indicates whether the returned list of analytics configurations is complete. A value of\n   *          true indicates that the list is not complete and the NextContinuationToken will be provided\n   *          for a subsequent request.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>The marker that is used as a starting point for this analytics configuration list\n   *          response. This value is present if it was sent in the request.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>\n   *             <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is true, which\n   *          indicates that there are more analytics configurations to list. The next request must\n   *          include this <code>NextContinuationToken</code>. The token is obfuscated and is not a\n   *          usable value.</p>\n   */\n  NextContinuationToken?: string;\n\n  /**\n   * <p>The list of analytics configurations for a bucket.</p>\n   */\n  AnalyticsConfigurationList?: AnalyticsConfiguration[];\n}\n\nexport namespace ListBucketAnalyticsConfigurationsOutput {\n  export const filterSensitiveLog = (obj: ListBucketAnalyticsConfigurationsOutput): any => ({\n    ...obj,\n    ...(obj.AnalyticsConfigurationList && {\n      AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map((item) =>\n        AnalyticsConfiguration.filterSensitiveLog(item)\n      ),\n    }),\n  });\n}\n\nexport interface ListBucketAnalyticsConfigurationsRequest {\n  /**\n   * <p>The name of the bucket from which analytics configurations are retrieved.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ContinuationToken that represents a placeholder from where this request should\n   *          begin.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListBucketAnalyticsConfigurationsRequest {\n  export const filterSensitiveLog = (obj: ListBucketAnalyticsConfigurationsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListBucketIntelligentTieringConfigurationsOutput {\n  /**\n   * <p>Indicates whether the returned list of analytics configurations is complete. A value of\n   *          true indicates that the list is not complete and the NextContinuationToken will be provided\n   *          for a subsequent request.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>The ContinuationToken that represents a placeholder from where this request should\n   *          begin.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The marker used to continue this inventory configuration listing. Use the\n   *             <code>NextContinuationToken</code> from this response to continue the listing in a\n   *          subsequent request. The continuation token is an opaque value that Amazon S3 understands.</p>\n   */\n  NextContinuationToken?: string;\n\n  /**\n   * <p>The list of S3 Intelligent-Tiering configurations for a bucket.</p>\n   */\n  IntelligentTieringConfigurationList?: IntelligentTieringConfiguration[];\n}\n\nexport namespace ListBucketIntelligentTieringConfigurationsOutput {\n  export const filterSensitiveLog = (obj: ListBucketIntelligentTieringConfigurationsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListBucketIntelligentTieringConfigurationsRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ContinuationToken that represents a placeholder from where this request should\n   *          begin.</p>\n   */\n  ContinuationToken?: string;\n}\n\nexport namespace ListBucketIntelligentTieringConfigurationsRequest {\n  export const filterSensitiveLog = (obj: ListBucketIntelligentTieringConfigurationsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListBucketInventoryConfigurationsOutput {\n  /**\n   * <p>If sent in the request, the marker that is used as a starting point for this inventory\n   *          configuration list response.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The list of inventory configurations for a bucket.</p>\n   */\n  InventoryConfigurationList?: InventoryConfiguration[];\n\n  /**\n   * <p>Tells whether the returned list of inventory configurations is complete. A value of true\n   *          indicates that the list is not complete and the NextContinuationToken is provided for a\n   *          subsequent request.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>The marker used to continue this inventory configuration listing. Use the\n   *             <code>NextContinuationToken</code> from this response to continue the listing in a\n   *          subsequent request. The continuation token is an opaque value that Amazon S3 understands.</p>\n   */\n  NextContinuationToken?: string;\n}\n\nexport namespace ListBucketInventoryConfigurationsOutput {\n  export const filterSensitiveLog = (obj: ListBucketInventoryConfigurationsOutput): any => ({\n    ...obj,\n    ...(obj.InventoryConfigurationList && {\n      InventoryConfigurationList: obj.InventoryConfigurationList.map((item) =>\n        InventoryConfiguration.filterSensitiveLog(item)\n      ),\n    }),\n  });\n}\n\nexport interface ListBucketInventoryConfigurationsRequest {\n  /**\n   * <p>The name of the bucket containing the inventory configurations to retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The marker used to continue an inventory configuration listing that has been truncated.\n   *          Use the NextContinuationToken from a previously truncated list response to continue the\n   *          listing. The continuation token is an opaque value that Amazon S3 understands.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListBucketInventoryConfigurationsRequest {\n  export const filterSensitiveLog = (obj: ListBucketInventoryConfigurationsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListBucketMetricsConfigurationsOutput {\n  /**\n   * <p>Indicates whether the returned list of metrics configurations is complete. A value of\n   *          true indicates that the list is not complete and the NextContinuationToken will be provided\n   *          for a subsequent request.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>The marker that is used as a starting point for this metrics configuration list\n   *          response. This value is present if it was sent in the request.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The marker used to continue a metrics configuration listing that has been truncated. Use\n   *          the <code>NextContinuationToken</code> from a previously truncated list response to\n   *          continue the listing. The continuation token is an opaque value that Amazon S3\n   *          understands.</p>\n   */\n  NextContinuationToken?: string;\n\n  /**\n   * <p>The list of metrics configurations for a bucket.</p>\n   */\n  MetricsConfigurationList?: MetricsConfiguration[];\n}\n\nexport namespace ListBucketMetricsConfigurationsOutput {\n  export const filterSensitiveLog = (obj: ListBucketMetricsConfigurationsOutput): any => ({\n    ...obj,\n    ...(obj.MetricsConfigurationList && {\n      MetricsConfigurationList: obj.MetricsConfigurationList.map((item) =>\n        MetricsConfiguration.filterSensitiveLog(item)\n      ),\n    }),\n  });\n}\n\nexport interface ListBucketMetricsConfigurationsRequest {\n  /**\n   * <p>The name of the bucket containing the metrics configurations to retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The marker that is used to continue a metrics configuration listing that has been\n   *          truncated. Use the NextContinuationToken from a previously truncated list response to\n   *          continue the listing. The continuation token is an opaque value that Amazon S3\n   *          understands.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListBucketMetricsConfigurationsRequest {\n  export const filterSensitiveLog = (obj: ListBucketMetricsConfigurationsRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally\n *          unique, and the namespace is shared by all AWS accounts. </p>\n */\nexport interface Bucket {\n  /**\n   * <p>The name of the bucket.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>Date the bucket was created. This date can change when making changes to your bucket, such as editing its bucket policy.</p>\n   */\n  CreationDate?: Date;\n}\n\nexport namespace Bucket {\n  export const filterSensitiveLog = (obj: Bucket): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListBucketsOutput {\n  /**\n   * <p>The list of buckets owned by the requestor.</p>\n   */\n  Buckets?: Bucket[];\n\n  /**\n   * <p>The owner of the buckets listed.</p>\n   */\n  Owner?: Owner;\n}\n\nexport namespace ListBucketsOutput {\n  export const filterSensitiveLog = (obj: ListBucketsOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for all (if there are any) keys between Prefix and the next occurrence of the\n *          string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in\n *          the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter\n *          is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. </p>\n */\nexport interface CommonPrefix {\n  /**\n   * <p>Container for the specified common prefix.</p>\n   */\n  Prefix?: string;\n}\n\nexport namespace CommonPrefix {\n  export const filterSensitiveLog = (obj: CommonPrefix): any => ({\n    ...obj,\n  });\n}\n\nexport type EncodingType = \"url\";\n\n/**\n * <p>Container element that identifies who initiated the multipart upload. </p>\n */\nexport interface Initiator {\n  /**\n   * <p>If the principal is an AWS account, it provides the Canonical User ID. If the principal\n   *          is an IAM User, it provides a user ARN value.</p>\n   */\n  ID?: string;\n\n  /**\n   * <p>Name of the Principal.</p>\n   */\n  DisplayName?: string;\n}\n\nexport namespace Initiator {\n  export const filterSensitiveLog = (obj: Initiator): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the <code>MultipartUpload</code> for the Amazon S3 object.</p>\n */\nexport interface MultipartUpload {\n  /**\n   * <p>Upload ID that identifies the multipart upload.</p>\n   */\n  UploadId?: string;\n\n  /**\n   * <p>Key of the object for which the multipart upload was initiated.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>Date and time at which the multipart upload was initiated.</p>\n   */\n  Initiated?: Date;\n\n  /**\n   * <p>The class of storage used to store the object.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>Specifies the owner of the object that is part of the multipart upload. </p>\n   */\n  Owner?: Owner;\n\n  /**\n   * <p>Identifies who initiated the multipart upload.</p>\n   */\n  Initiator?: Initiator;\n}\n\nexport namespace MultipartUpload {\n  export const filterSensitiveLog = (obj: MultipartUpload): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListMultipartUploadsOutput {\n  /**\n   * <p>The name of the bucket to which the multipart upload was initiated.</p>\n   */\n  Bucket?: string;\n\n  /**\n   * <p>The key at or after which the listing began.</p>\n   */\n  KeyMarker?: string;\n\n  /**\n   * <p>Upload ID after which listing began.</p>\n   */\n  UploadIdMarker?: string;\n\n  /**\n   * <p>When a list is truncated, this element specifies the value that should be used for the\n   *          key-marker request parameter in a subsequent request.</p>\n   */\n  NextKeyMarker?: string;\n\n  /**\n   * <p>When a prefix is provided in the request, this field contains the specified prefix. The\n   *          result contains only keys starting with the specified prefix.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Contains the delimiter you specified in the request. If you don't specify a delimiter in\n   *          your request, this element is absent from the response.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>When a list is truncated, this element specifies the value that should be used for the\n   *             <code>upload-id-marker</code> request parameter in a subsequent request.</p>\n   */\n  NextUploadIdMarker?: string;\n\n  /**\n   * <p>Maximum number of multipart uploads that could have been included in the\n   *          response.</p>\n   */\n  MaxUploads?: number;\n\n  /**\n   * <p>Indicates whether the returned list of multipart uploads is truncated. A value of true\n   *          indicates that the list was truncated. The list can be truncated if the number of multipart\n   *          uploads exceeds the limit allowed or specified by max uploads.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>Container for elements related to a particular multipart upload. A response can contain\n   *          zero or more <code>Upload</code> elements.</p>\n   */\n  Uploads?: MultipartUpload[];\n\n  /**\n   * <p>If you specify a delimiter in the request, then the result returns each distinct key\n   *          prefix containing the delimiter in a <code>CommonPrefixes</code> element. The distinct key\n   *          prefixes are returned in the <code>Prefix</code> child element.</p>\n   */\n  CommonPrefixes?: CommonPrefix[];\n\n  /**\n   * <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>\n   *          <p>If you specify <code>encoding-type</code> request parameter, Amazon S3 includes this element\n   *          in the response, and returns encoded key name values in the following response\n   *          elements:</p>\n   *\n   *          <p>\n   *             <code>Delimiter</code>, <code>KeyMarker</code>, <code>Prefix</code>,\n   *             <code>NextKeyMarker</code>, <code>Key</code>.</p>\n   */\n  EncodingType?: EncodingType | string;\n}\n\nexport namespace ListMultipartUploadsOutput {\n  export const filterSensitiveLog = (obj: ListMultipartUploadsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListMultipartUploadsRequest {\n  /**\n   * <p>The name of the bucket to which the multipart upload was initiated. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Character you use to group keys.</p>\n   *          <p>All keys that contain the same string between the prefix, if specified, and the first\n   *          occurrence of the delimiter after the prefix are grouped under a single result element,\n   *             <code>CommonPrefixes</code>. If you don't specify the prefix parameter, then the\n   *          substring starts at the beginning of the key. The keys that are grouped under\n   *             <code>CommonPrefixes</code> result element are not returned elsewhere in the\n   *          response.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding\n   *          method to use. An object key may contain any Unicode character; however, XML 1.0 parser\n   *          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For\n   *          characters that are not supported in XML 1.0, you can add this parameter to request that\n   *          Amazon S3 encode the keys in the response.</p>\n   */\n  EncodingType?: EncodingType | string;\n\n  /**\n   * <p>Together with upload-id-marker, this parameter specifies the multipart upload after\n   *          which listing should begin.</p>\n   *          <p>If <code>upload-id-marker</code> is not specified, only the keys lexicographically\n   *          greater than the specified <code>key-marker</code> will be included in the list.</p>\n   *\n   *          <p>If <code>upload-id-marker</code> is specified, any multipart uploads for a key equal to\n   *          the <code>key-marker</code> might also be included, provided those multipart uploads have\n   *          upload IDs lexicographically greater than the specified\n   *          <code>upload-id-marker</code>.</p>\n   */\n  KeyMarker?: string;\n\n  /**\n   * <p>Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response\n   *          body. 1,000 is the maximum number of uploads that can be returned in a response.</p>\n   */\n  MaxUploads?: number;\n\n  /**\n   * <p>Lists in-progress uploads only for those keys that begin with the specified prefix. You\n   *          can use prefixes to separate a bucket into different grouping of keys. (You can think of\n   *          using prefix to make groups in the same way you'd use a folder in a file system.)</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Together with key-marker, specifies the multipart upload after which listing should\n   *          begin. If key-marker is not specified, the upload-id-marker parameter is ignored.\n   *          Otherwise, any multipart uploads for a key equal to the key-marker might be included in the\n   *          list only if they have an upload ID lexicographically greater than the specified\n   *             <code>upload-id-marker</code>.</p>\n   */\n  UploadIdMarker?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListMultipartUploadsRequest {\n  export const filterSensitiveLog = (obj: ListMultipartUploadsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type ObjectStorageClass =\n  | \"DEEP_ARCHIVE\"\n  | \"GLACIER\"\n  | \"INTELLIGENT_TIERING\"\n  | \"ONEZONE_IA\"\n  | \"OUTPOSTS\"\n  | \"REDUCED_REDUNDANCY\"\n  | \"STANDARD\"\n  | \"STANDARD_IA\";\n\n/**\n * <p>An object consists of data and its descriptive metadata.</p>\n */\nexport interface _Object {\n  /**\n   * <p>The name that you assign to an object. You use the object key to retrieve the\n   *          object.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>The date the Object was Last Modified</p>\n   */\n  LastModified?: Date;\n\n  /**\n   * <p>The entity tag is a hash of the object. The ETag reflects changes only to the contents\n   *          of an object, not its metadata. The ETag may or may not be an MD5 digest of the object\n   *          data. Whether or not it is depends on how the object was created and how it is encrypted as\n   *          described below:</p>\n   *          <ul>\n   *             <li>\n   *                <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the\n   *                AWS Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that are\n   *                an MD5 digest of their object data.</p>\n   *             </li>\n   *             <li>\n   *                <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the\n   *                AWS Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are\n   *                not an MD5 digest of their object data.</p>\n   *             </li>\n   *             <li>\n   *                <p>If an object is created by either the Multipart Upload or Part Copy operation, the\n   *                ETag is not an MD5 digest, regardless of the method of encryption.</p>\n   *             </li>\n   *          </ul>\n   */\n  ETag?: string;\n\n  /**\n   * <p>Size in bytes of the object</p>\n   */\n  Size?: number;\n\n  /**\n   * <p>The class of storage used to store the object.</p>\n   */\n  StorageClass?: ObjectStorageClass | string;\n\n  /**\n   * <p>The owner of the object</p>\n   */\n  Owner?: Owner;\n}\n\nexport namespace _Object {\n  export const filterSensitiveLog = (obj: _Object): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListObjectsOutput {\n  /**\n   * <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search\n   *          criteria.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>Indicates where in the bucket listing begins. Marker is included in the response if it\n   *          was sent with the request.</p>\n   */\n  Marker?: string;\n\n  /**\n   * <p>When response is truncated (the IsTruncated element value in the response is true), you\n   *          can use the key name in this field as marker in the subsequent request to get next set of\n   *          objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if\n   *          you have delimiter request parameter specified. If response does not include the NextMarker\n   *          and it is truncated, you can use the value of the last Key in the response as the marker in\n   *          the subsequent request to get the next set of object keys.</p>\n   */\n  NextMarker?: string;\n\n  /**\n   * <p>Metadata about each object returned.</p>\n   */\n  Contents?: _Object[];\n\n  /**\n   * <p>The bucket name.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>Keys that begin with the indicated prefix.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Causes keys that contain the same string between the prefix and the first occurrence of\n   *          the delimiter to be rolled up into a single result element in the\n   *             <code>CommonPrefixes</code> collection. These rolled-up keys are not returned elsewhere\n   *          in the response. Each rolled-up result counts as only one return against the\n   *             <code>MaxKeys</code> value.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>The maximum number of keys returned in the response body.</p>\n   */\n  MaxKeys?: number;\n\n  /**\n   * <p>All of the keys rolled up in a common prefix count as a single return when calculating\n   *          the number of returns. </p>\n   *\n   *          <p>A response can contain CommonPrefixes only if you specify a delimiter.</p>\n   *\n   *          <p>CommonPrefixes contains all (if there are any) keys between Prefix and the next\n   *          occurrence of the string specified by the delimiter.</p>\n   *\n   *          <p> CommonPrefixes lists keys that act like subdirectories in the directory specified by\n   *          Prefix.</p>\n   *\n   *          <p>For example, if the prefix is notes/ and the delimiter is a slash (/) as in\n   *          notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a\n   *          common prefix count as a single return when calculating the number of returns.</p>\n   */\n  CommonPrefixes?: CommonPrefix[];\n\n  /**\n   * <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>\n   */\n  EncodingType?: EncodingType | string;\n}\n\nexport namespace ListObjectsOutput {\n  export const filterSensitiveLog = (obj: ListObjectsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListObjectsRequest {\n  /**\n   * <p>The name of the bucket containing the objects.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>A delimiter is a character you use to group keys.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding\n   *          method to use. An object key may contain any Unicode character; however, XML 1.0 parser\n   *          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For\n   *          characters that are not supported in XML 1.0, you can add this parameter to request that\n   *          Amazon S3 encode the keys in the response.</p>\n   */\n  EncodingType?: EncodingType | string;\n\n  /**\n   * <p>Specifies the key to start with when listing objects in a bucket.</p>\n   */\n  Marker?: string;\n\n  /**\n   * <p>Sets the maximum number of keys returned in the response. By default the API returns up\n   *          to 1,000 key names. The response might contain fewer keys but will never contain more.\n   *       </p>\n   */\n  MaxKeys?: number;\n\n  /**\n   * <p>Limits the response to keys that begin with the specified prefix.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Confirms that the requester knows that she or he will be charged for the list objects\n   *          request. Bucket owners need not specify this parameter in their requests.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListObjectsRequest {\n  export const filterSensitiveLog = (obj: ListObjectsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListObjectsV2Output {\n  /**\n   * <p>Set to false if all of the results were returned. Set to true if more keys are available\n   *          to return. If the number of results exceeds that specified by MaxKeys, all of the results\n   *          might not be returned.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>Metadata about each object returned.</p>\n   */\n  Contents?: _Object[];\n\n  /**\n   * <p>The bucket name.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p> Keys that begin with the indicated prefix.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Causes keys that contain the same string between the prefix and the first occurrence of\n   *          the delimiter to be rolled up into a single result element in the CommonPrefixes\n   *          collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up\n   *          result counts as only one return against the <code>MaxKeys</code> value.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>Sets the maximum number of keys returned in the response. By default the API returns up\n   *          to 1,000 key names. The response might contain fewer keys but will never contain\n   *          more.</p>\n   */\n  MaxKeys?: number;\n\n  /**\n   * <p>All of the keys rolled up into a common prefix count as a single return when calculating\n   *          the number of returns.</p>\n   *\n   *          <p>A response can contain <code>CommonPrefixes</code> only if you specify a\n   *          delimiter.</p>\n   *\n   *          <p>\n   *             <code>CommonPrefixes</code> contains all (if there are any) keys between\n   *             <code>Prefix</code> and the next occurrence of the string specified by a\n   *          delimiter.</p>\n   *\n   *          <p>\n   *             <code>CommonPrefixes</code> lists keys that act like subdirectories in the directory\n   *          specified by <code>Prefix</code>.</p>\n   *\n   *          <p>For example, if the prefix is <code>notes/</code> and the delimiter is a slash\n   *             (<code>/</code>) as in <code>notes/summer/july</code>, the common prefix is\n   *             <code>notes/summer/</code>. All of the keys that roll up into a common prefix count as a\n   *          single return when calculating the number of returns. </p>\n   */\n  CommonPrefixes?: CommonPrefix[];\n\n  /**\n   * <p>Encoding type used by Amazon S3 to encode object key names in the XML response.</p>\n   *\n   *          <p>If you specify the encoding-type request parameter, Amazon S3 includes this element in the\n   *          response, and returns encoded key name values in the following response elements:</p>\n   *\n   *          <p>\n   *             <code>Delimiter, Prefix, Key,</code> and <code>StartAfter</code>.</p>\n   */\n  EncodingType?: EncodingType | string;\n\n  /**\n   * <p>KeyCount is the number of keys returned with this request. KeyCount will always be less\n   *          than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than\n   *          equals 50 keys </p>\n   */\n  KeyCount?: number;\n\n  /**\n   * <p> If ContinuationToken was sent with the request, it is included in the response.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>\n   *             <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is true, which\n   *          means there are more keys in the bucket that can be listed. The next list requests to Amazon S3\n   *          can be continued with this <code>NextContinuationToken</code>.\n   *             <code>NextContinuationToken</code> is obfuscated and is not a real key</p>\n   */\n  NextContinuationToken?: string;\n\n  /**\n   * <p>If StartAfter was sent with the request, it is included in the response.</p>\n   */\n  StartAfter?: string;\n}\n\nexport namespace ListObjectsV2Output {\n  export const filterSensitiveLog = (obj: ListObjectsV2Output): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListObjectsV2Request {\n  /**\n   * <p>Bucket name to list. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>A delimiter is a character you use to group keys.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>\n   */\n  EncodingType?: EncodingType | string;\n\n  /**\n   * <p>Sets the maximum number of keys returned in the response. By default the API returns up\n   *          to 1,000 key names. The response might contain fewer keys but will never contain\n   *          more.</p>\n   */\n  MaxKeys?: number;\n\n  /**\n   * <p>Limits the response to keys that begin with the specified prefix.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a\n   *          token. ContinuationToken is obfuscated and is not a real key.</p>\n   */\n  ContinuationToken?: string;\n\n  /**\n   * <p>The owner field is not present in listV2 by default, if you want to return owner field\n   *          with each key in the result then set the fetch owner field to true.</p>\n   */\n  FetchOwner?: boolean;\n\n  /**\n   * <p>StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this\n   *          specified key. StartAfter can be any key in the bucket.</p>\n   */\n  StartAfter?: string;\n\n  /**\n   * <p>Confirms that the requester knows that she or he will be charged for the list objects\n   *          request in V2 style. Bucket owners need not specify this parameter in their\n   *          requests.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListObjectsV2Request {\n  export const filterSensitiveLog = (obj: ListObjectsV2Request): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Information about the delete marker.</p>\n */\nexport interface DeleteMarkerEntry {\n  /**\n   * <p>The account that created the delete marker.></p>\n   */\n  Owner?: Owner;\n\n  /**\n   * <p>The object key.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>Version ID of an object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies whether the object is (true) or is not (false) the latest version of an\n   *          object.</p>\n   */\n  IsLatest?: boolean;\n\n  /**\n   * <p>Date and time the object was last modified.</p>\n   */\n  LastModified?: Date;\n}\n\nexport namespace DeleteMarkerEntry {\n  export const filterSensitiveLog = (obj: DeleteMarkerEntry): any => ({\n    ...obj,\n  });\n}\n\nexport type ObjectVersionStorageClass = \"STANDARD\";\n\n/**\n * <p>The version of an object.</p>\n */\nexport interface ObjectVersion {\n  /**\n   * <p>The entity tag is an MD5 hash of that version of the object.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>Size in bytes of the object.</p>\n   */\n  Size?: number;\n\n  /**\n   * <p>The class of storage used to store the object.</p>\n   */\n  StorageClass?: ObjectVersionStorageClass | string;\n\n  /**\n   * <p>The object key.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>Version ID of an object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Specifies whether the object is (true) or is not (false) the latest version of an\n   *          object.</p>\n   */\n  IsLatest?: boolean;\n\n  /**\n   * <p>Date and time the object was last modified.</p>\n   */\n  LastModified?: Date;\n\n  /**\n   * <p>Specifies the owner of the object.</p>\n   */\n  Owner?: Owner;\n}\n\nexport namespace ObjectVersion {\n  export const filterSensitiveLog = (obj: ObjectVersion): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListObjectVersionsOutput {\n  /**\n   * <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search\n   *          criteria. If your results were truncated, you can make a follow-up paginated request using\n   *          the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in\n   *          another request to return the rest of the results.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p>Marks the last key returned in a truncated response.</p>\n   */\n  KeyMarker?: string;\n\n  /**\n   * <p>Marks the last version of the key returned in a truncated response.</p>\n   */\n  VersionIdMarker?: string;\n\n  /**\n   * <p>When the number of responses exceeds the value of <code>MaxKeys</code>,\n   *             <code>NextKeyMarker</code> specifies the first key not returned that satisfies the\n   *          search criteria. Use this value for the key-marker request parameter in a subsequent\n   *          request.</p>\n   */\n  NextKeyMarker?: string;\n\n  /**\n   * <p>When the number of responses exceeds the value of <code>MaxKeys</code>,\n   *             <code>NextVersionIdMarker</code> specifies the first object version not returned that\n   *          satisfies the search criteria. Use this value for the version-id-marker request parameter\n   *          in a subsequent request.</p>\n   */\n  NextVersionIdMarker?: string;\n\n  /**\n   * <p>Container for version information.</p>\n   */\n  Versions?: ObjectVersion[];\n\n  /**\n   * <p>Container for an object that is a delete marker.</p>\n   */\n  DeleteMarkers?: DeleteMarkerEntry[];\n\n  /**\n   * <p>The bucket name.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>Selects objects that start with the value supplied by this parameter.</p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>The delimiter grouping the included keys. A delimiter is a character that you specify to\n   *          group keys. All keys that contain the same string between the prefix and the first\n   *          occurrence of the delimiter are grouped under a single result element in\n   *             <code>CommonPrefixes</code>. These groups are counted as one result against the max-keys\n   *          limitation. These keys are not returned elsewhere in the response.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>Specifies the maximum number of objects to return.</p>\n   */\n  MaxKeys?: number;\n\n  /**\n   * <p>All of the keys rolled up into a common prefix count as a single return when calculating\n   *          the number of returns.</p>\n   */\n  CommonPrefixes?: CommonPrefix[];\n\n  /**\n   * <p> Encoding type used by Amazon S3 to encode object key names in the XML response.</p>\n   *\n   *          <p>If you specify encoding-type request parameter, Amazon S3 includes this element in the\n   *          response, and returns encoded key name values in the following response elements:</p>\n   *\n   *          <p>\n   *             <code>KeyMarker, NextKeyMarker, Prefix, Key</code>, and <code>Delimiter</code>.</p>\n   */\n  EncodingType?: EncodingType | string;\n}\n\nexport namespace ListObjectVersionsOutput {\n  export const filterSensitiveLog = (obj: ListObjectVersionsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListObjectVersionsRequest {\n  /**\n   * <p>The bucket name that contains the objects. </p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>A delimiter is a character that you specify to group keys. All keys that contain the\n   *          same string between the <code>prefix</code> and the first occurrence of the delimiter are\n   *          grouped under a single result element in CommonPrefixes. These groups are counted as one\n   *          result against the max-keys limitation. These keys are not returned elsewhere in the\n   *          response.</p>\n   */\n  Delimiter?: string;\n\n  /**\n   * <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding\n   *          method to use. An object key may contain any Unicode character; however, XML 1.0 parser\n   *          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For\n   *          characters that are not supported in XML 1.0, you can add this parameter to request that\n   *          Amazon S3 encode the keys in the response.</p>\n   */\n  EncodingType?: EncodingType | string;\n\n  /**\n   * <p>Specifies the key to start with when listing objects in a bucket.</p>\n   */\n  KeyMarker?: string;\n\n  /**\n   * <p>Sets the maximum number of keys returned in the response. By default the API returns up\n   *          to 1,000 key names. The response might contain fewer keys but will never contain more. If\n   *          additional keys satisfy the search criteria, but were not returned because max-keys was\n   *          exceeded, the response contains <isTruncated>true</isTruncated>. To return the\n   *          additional keys, see key-marker and version-id-marker.</p>\n   */\n  MaxKeys?: number;\n\n  /**\n   * <p>Use this parameter to select only those keys that begin with the specified prefix. You\n   *          can use prefixes to separate a bucket into different groupings of keys. (You can think of\n   *          using prefix to make groups in the same way you'd use a folder in a file system.) You can\n   *          use prefix with delimiter to roll up numerous objects into a single result under\n   *          CommonPrefixes. </p>\n   */\n  Prefix?: string;\n\n  /**\n   * <p>Specifies the object version you want to start listing from.</p>\n   */\n  VersionIdMarker?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListObjectVersionsRequest {\n  export const filterSensitiveLog = (obj: ListObjectVersionsRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for elements related to a part.</p>\n */\nexport interface Part {\n  /**\n   * <p>Part number identifying the part. This is a positive integer between 1 and\n   *          10,000.</p>\n   */\n  PartNumber?: number;\n\n  /**\n   * <p>Date and time at which the part was uploaded.</p>\n   */\n  LastModified?: Date;\n\n  /**\n   * <p>Entity tag returned when the part was uploaded.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>Size in bytes of the uploaded part data.</p>\n   */\n  Size?: number;\n}\n\nexport namespace Part {\n  export const filterSensitiveLog = (obj: Part): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListPartsOutput {\n  /**\n   * <p>If the bucket has a lifecycle rule configured with an action to abort incomplete\n   *          multipart uploads and the prefix in the lifecycle rule matches the object name in the\n   *          request, then the response includes this header indicating when the initiated multipart\n   *          upload will become eligible for abort operation. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">Aborting\n   *             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>\n   *\n   *          <p>The response will also include the <code>x-amz-abort-rule-id</code> header that will\n   *          provide the ID of the lifecycle configuration rule that defines this action.</p>\n   */\n  AbortDate?: Date;\n\n  /**\n   * <p>This header is returned along with the <code>x-amz-abort-date</code> header. It\n   *          identifies applicable lifecycle configuration rule that defines the action to abort\n   *          incomplete multipart uploads.</p>\n   */\n  AbortRuleId?: string;\n\n  /**\n   * <p>The name of the bucket to which the multipart upload was initiated.</p>\n   */\n  Bucket?: string;\n\n  /**\n   * <p>Object key for which the multipart upload was initiated.</p>\n   */\n  Key?: string;\n\n  /**\n   * <p>Upload ID identifying the multipart upload whose parts are being listed.</p>\n   */\n  UploadId?: string;\n\n  /**\n   * <p>When a list is truncated, this element specifies the last part in the list, as well as\n   *          the value to use for the part-number-marker request parameter in a subsequent\n   *          request.</p>\n   */\n  PartNumberMarker?: string;\n\n  /**\n   * <p>When a list is truncated, this element specifies the last part in the list, as well as\n   *          the value to use for the part-number-marker request parameter in a subsequent\n   *          request.</p>\n   */\n  NextPartNumberMarker?: string;\n\n  /**\n   * <p>Maximum number of parts that were allowed in the response.</p>\n   */\n  MaxParts?: number;\n\n  /**\n   * <p> Indicates whether the returned list of parts is truncated. A true value indicates that\n   *          the list was truncated. A list can be truncated if the number of parts exceeds the limit\n   *          returned in the MaxParts element.</p>\n   */\n  IsTruncated?: boolean;\n\n  /**\n   * <p> Container for elements related to a particular part. A response can contain zero or\n   *          more <code>Part</code> elements.</p>\n   */\n  Parts?: Part[];\n\n  /**\n   * <p>Container element that identifies who initiated the multipart upload. If the initiator\n   *          is an AWS account, this element provides the same information as the <code>Owner</code>\n   *          element. If the initiator is an IAM User, this element provides the user ARN and display\n   *          name.</p>\n   */\n  Initiator?: Initiator;\n\n  /**\n   * <p> Container element that identifies the object owner, after the object is created. If\n   *          multipart upload is initiated by an IAM user, this element provides the parent account ID\n   *          and display name.</p>\n   */\n  Owner?: Owner;\n\n  /**\n   * <p>Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded\n   *          object.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace ListPartsOutput {\n  export const filterSensitiveLog = (obj: ListPartsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListPartsRequest {\n  /**\n   * <p>The name of the bucket to which the parts are being uploaded. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Object key for which the multipart upload was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Sets the maximum number of parts to return.</p>\n   */\n  MaxParts?: number;\n\n  /**\n   * <p>Specifies the part after which listing should begin. Only parts with higher part numbers\n   *          will be listed.</p>\n   */\n  PartNumberMarker?: string;\n\n  /**\n   * <p>Upload ID identifying the multipart upload whose parts are being listed.</p>\n   */\n  UploadId: string | undefined;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace ListPartsRequest {\n  export const filterSensitiveLog = (obj: ListPartsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketAccelerateConfigurationRequest {\n  /**\n   * <p>The name of the bucket for which the accelerate configuration is set.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Container for setting the transfer acceleration state.</p>\n   */\n  AccelerateConfiguration: AccelerateConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketAccelerateConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketAccelerateConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketAclRequest {\n  /**\n   * <p>The canned ACL to apply to the bucket.</p>\n   */\n  ACL?: BucketCannedACL | string;\n\n  /**\n   * <p>Contains the elements that set the ACL permissions for an object per grantee.</p>\n   */\n  AccessControlPolicy?: AccessControlPolicy;\n\n  /**\n   * <p>The bucket to which to apply the ACL.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, go to <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC\n   *          1864.</a>\n   *          </p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Allows grantee the read, write, read ACP, and write ACP permissions on the\n   *          bucket.</p>\n   */\n  GrantFullControl?: string;\n\n  /**\n   * <p>Allows grantee to list the objects in the bucket.</p>\n   */\n  GrantRead?: string;\n\n  /**\n   * <p>Allows grantee to read the bucket ACL.</p>\n   */\n  GrantReadACP?: string;\n\n  /**\n   * <p>Allows grantee to create, overwrite, and delete any object in the bucket.</p>\n   */\n  GrantWrite?: string;\n\n  /**\n   * <p>Allows grantee to write the ACL for the applicable bucket.</p>\n   */\n  GrantWriteACP?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketAclRequest {\n  export const filterSensitiveLog = (obj: PutBucketAclRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketAnalyticsConfigurationRequest {\n  /**\n   * <p>The name of the bucket to which an analytics configuration is stored.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID that identifies the analytics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>The configuration and any analyses for the analytics filter.</p>\n   */\n  AnalyticsConfiguration: AnalyticsConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketAnalyticsConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketAnalyticsConfigurationRequest): any => ({\n    ...obj,\n    ...(obj.AnalyticsConfiguration && {\n      AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration),\n    }),\n  });\n}\n\n/**\n * <p>Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html\">Enabling\n *             Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer\n *             Guide</i>.</p>\n */\nexport interface CORSConfiguration {\n  /**\n   * <p>A set of origins and methods (cross-origin access that you want to allow). You can add\n   *          up to 100 rules to the configuration.</p>\n   */\n  CORSRules: CORSRule[] | undefined;\n}\n\nexport namespace CORSConfiguration {\n  export const filterSensitiveLog = (obj: CORSConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketCorsRequest {\n  /**\n   * <p>Specifies the bucket impacted by the <code>cors</code>configuration.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more\n   *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html\">Enabling Cross-Origin Resource\n   *             Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  CORSConfiguration: CORSConfiguration | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, go to <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC\n   *          1864.</a>\n   *          </p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketCorsRequest {\n  export const filterSensitiveLog = (obj: PutBucketCorsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketEncryptionRequest {\n  /**\n   * <p>Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed\n   *          keys (SSE-S3) or customer master keys stored in AWS KMS (SSE-KMS). For information about\n   *          the Amazon S3 default encryption feature, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html\">Amazon S3 Default Bucket Encryption</a>\n   *          in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Specifies the default server-side-encryption configuration.</p>\n   */\n  ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketEncryptionRequest {\n  export const filterSensitiveLog = (obj: PutBucketEncryptionRequest): any => ({\n    ...obj,\n    ...(obj.ServerSideEncryptionConfiguration && {\n      ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(\n        obj.ServerSideEncryptionConfiguration\n      ),\n    }),\n  });\n}\n\nexport interface PutBucketIntelligentTieringConfigurationRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>Container for S3 Intelligent-Tiering configuration.</p>\n   */\n  IntelligentTieringConfiguration: IntelligentTieringConfiguration | undefined;\n}\n\nexport namespace PutBucketIntelligentTieringConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketIntelligentTieringConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketInventoryConfigurationRequest {\n  /**\n   * <p>The name of the bucket where the inventory configuration will be stored.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the inventory configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>Specifies the inventory configuration.</p>\n   */\n  InventoryConfiguration: InventoryConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketInventoryConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketInventoryConfigurationRequest): any => ({\n    ...obj,\n    ...(obj.InventoryConfiguration && {\n      InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration),\n    }),\n  });\n}\n\n/**\n * <p>Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html\">Object Lifecycle Management</a>\n *          in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\nexport interface BucketLifecycleConfiguration {\n  /**\n   * <p>A lifecycle rule for individual objects in an Amazon S3 bucket.</p>\n   */\n  Rules: LifecycleRule[] | undefined;\n}\n\nexport namespace BucketLifecycleConfiguration {\n  export const filterSensitiveLog = (obj: BucketLifecycleConfiguration): any => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRule.filterSensitiveLog(item)) }),\n  });\n}\n\nexport interface PutBucketLifecycleConfigurationRequest {\n  /**\n   * <p>The name of the bucket for which to set the configuration.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Container for lifecycle rules. You can add as many as 1,000 rules.</p>\n   */\n  LifecycleConfiguration?: BucketLifecycleConfiguration;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketLifecycleConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketLifecycleConfigurationRequest): any => ({\n    ...obj,\n    ...(obj.LifecycleConfiguration && {\n      LifecycleConfiguration: BucketLifecycleConfiguration.filterSensitiveLog(obj.LifecycleConfiguration),\n    }),\n  });\n}\n\n/**\n * <p>Container for logging status information.</p>\n */\nexport interface BucketLoggingStatus {\n  /**\n   * <p>Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys\n   *          for a bucket. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html\">PUT Bucket logging</a> in the\n   *             <i>Amazon Simple Storage Service API Reference</i>.</p>\n   */\n  LoggingEnabled?: LoggingEnabled;\n}\n\nexport namespace BucketLoggingStatus {\n  export const filterSensitiveLog = (obj: BucketLoggingStatus): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketLoggingRequest {\n  /**\n   * <p>The name of the bucket for which to set the logging parameters.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Container for logging status information.</p>\n   */\n  BucketLoggingStatus: BucketLoggingStatus | undefined;\n\n  /**\n   * <p>The MD5 hash of the <code>PutBucketLogging</code> request body.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketLoggingRequest {\n  export const filterSensitiveLog = (obj: PutBucketLoggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketMetricsConfigurationRequest {\n  /**\n   * <p>The name of the bucket for which the metrics configuration is set.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The ID used to identify the metrics configuration.</p>\n   */\n  Id: string | undefined;\n\n  /**\n   * <p>Specifies the metrics configuration.</p>\n   */\n  MetricsConfiguration: MetricsConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketMetricsConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketMetricsConfigurationRequest): any => ({\n    ...obj,\n    ...(obj.MetricsConfiguration && {\n      MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration),\n    }),\n  });\n}\n\nexport interface PutBucketNotificationConfigurationRequest {\n  /**\n   * <p>The name of the bucket.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>A container for specifying the notification configuration of the bucket. If this element\n   *          is empty, notifications are turned off for the bucket.</p>\n   */\n  NotificationConfiguration: NotificationConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketNotificationConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutBucketNotificationConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketOwnershipControlsRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose <code>OwnershipControls</code> you want to set.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The MD5 hash of the <code>OwnershipControls</code> request body. </p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n\n  /**\n   * <p>The <code>OwnershipControls</code> (BucketOwnerPreferred or ObjectWriter) that you want\n   *          to apply to this Amazon S3 bucket.</p>\n   */\n  OwnershipControls: OwnershipControls | undefined;\n}\n\nexport namespace PutBucketOwnershipControlsRequest {\n  export const filterSensitiveLog = (obj: PutBucketOwnershipControlsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketPolicyRequest {\n  /**\n   * <p>The name of the bucket.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The MD5 hash of the request body.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Set this parameter to true to confirm that you want to remove your permissions to change\n   *          this bucket policy in the future.</p>\n   */\n  ConfirmRemoveSelfBucketAccess?: boolean;\n\n  /**\n   * <p>The bucket policy as a JSON document.</p>\n   */\n  Policy: string | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketPolicyRequest {\n  export const filterSensitiveLog = (obj: PutBucketPolicyRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketReplicationRequest {\n  /**\n   * <p>The name of the bucket</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, see <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC 1864</a>.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>A container for replication rules. You can add up to 1,000 rules. The maximum size of a\n   *          replication configuration is 2 MB.</p>\n   */\n  ReplicationConfiguration: ReplicationConfiguration | undefined;\n\n  /**\n   * <p>A token to allow Object Lock to be enabled for an existing bucket.</p>\n   */\n  Token?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketReplicationRequest {\n  export const filterSensitiveLog = (obj: PutBucketReplicationRequest): any => ({\n    ...obj,\n    ...(obj.ReplicationConfiguration && {\n      ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration),\n    }),\n  });\n}\n\n/**\n * <p>Container for Payer.</p>\n */\nexport interface RequestPaymentConfiguration {\n  /**\n   * <p>Specifies who pays for the download and request fees.</p>\n   */\n  Payer: Payer | string | undefined;\n}\n\nexport namespace RequestPaymentConfiguration {\n  export const filterSensitiveLog = (obj: RequestPaymentConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketRequestPaymentRequest {\n  /**\n   * <p>The bucket name.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a\n   *          message integrity check to verify that the request body was not corrupted in transit. For\n   *          more information, see <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC\n   *          1864</a>.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Container for Payer.</p>\n   */\n  RequestPaymentConfiguration: RequestPaymentConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketRequestPaymentRequest {\n  export const filterSensitiveLog = (obj: PutBucketRequestPaymentRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for <code>TagSet</code> elements.</p>\n */\nexport interface Tagging {\n  /**\n   * <p>A collection for a set of tags</p>\n   */\n  TagSet: Tag[] | undefined;\n}\n\nexport namespace Tagging {\n  export const filterSensitiveLog = (obj: Tagging): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketTaggingRequest {\n  /**\n   * <p>The bucket name.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, see <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC 1864</a>.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Container for the <code>TagSet</code> and <code>Tag</code> elements.</p>\n   */\n  Tagging: Tagging | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketTaggingRequest {\n  export const filterSensitiveLog = (obj: PutBucketTaggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport type MFADelete = \"Disabled\" | \"Enabled\";\n\n/**\n * <p>Describes the versioning state of an Amazon S3 bucket. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html\">PUT\n *             Bucket versioning</a> in the <i>Amazon Simple Storage Service API Reference</i>.</p>\n */\nexport interface VersioningConfiguration {\n  /**\n   * <p>Specifies whether MFA delete is enabled in the bucket versioning configuration. This\n   *          element is only returned if the bucket has been configured with MFA delete. If the bucket\n   *          has never been so configured, this element is not returned.</p>\n   */\n  MFADelete?: MFADelete | string;\n\n  /**\n   * <p>The versioning state of the bucket.</p>\n   */\n  Status?: BucketVersioningStatus | string;\n}\n\nexport namespace VersioningConfiguration {\n  export const filterSensitiveLog = (obj: VersioningConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketVersioningRequest {\n  /**\n   * <p>The bucket name.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a\n   *          message integrity check to verify that the request body was not corrupted in transit. For\n   *          more information, see <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC\n   *          1864</a>.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The concatenation of the authentication device's serial number, a space, and the value\n   *          that is displayed on your authentication device.</p>\n   */\n  MFA?: string;\n\n  /**\n   * <p>Container for setting the versioning state.</p>\n   */\n  VersioningConfiguration: VersioningConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketVersioningRequest {\n  export const filterSensitiveLog = (obj: PutBucketVersioningRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies website configuration parameters for an Amazon S3 bucket.</p>\n */\nexport interface WebsiteConfiguration {\n  /**\n   * <p>The name of the error document for the website.</p>\n   */\n  ErrorDocument?: ErrorDocument;\n\n  /**\n   * <p>The name of the index document for the website.</p>\n   */\n  IndexDocument?: IndexDocument;\n\n  /**\n   * <p>The redirect behavior for every request to this bucket's website endpoint.</p>\n   *          <important>\n   *             <p>If you specify this property, you can't specify any other property.</p>\n   *          </important>\n   */\n  RedirectAllRequestsTo?: RedirectAllRequestsTo;\n\n  /**\n   * <p>Rules that define when a redirect is applied and the redirect behavior.</p>\n   */\n  RoutingRules?: RoutingRule[];\n}\n\nexport namespace WebsiteConfiguration {\n  export const filterSensitiveLog = (obj: WebsiteConfiguration): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutBucketWebsiteRequest {\n  /**\n   * <p>The bucket name.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, see <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC 1864</a>.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Container for the request.</p>\n   */\n  WebsiteConfiguration: WebsiteConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutBucketWebsiteRequest {\n  export const filterSensitiveLog = (obj: PutBucketWebsiteRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectOutput {\n  /**\n   * <p> If the expiration is configured for the object (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html\">PutBucketLifecycleConfiguration</a>), the response includes this header. It\n   *          includes the expiry-date and rule-id key-value pairs that provide information about object\n   *          expiration. The value of the rule-id is URL encoded.</p>\n   */\n  Expiration?: string;\n\n  /**\n   * <p>Entity tag for the uploaded object.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>If you specified server-side encryption either with an AWS KMS customer master key (CMK)\n   *          or Amazon S3-managed encryption key in your PUT request, the response includes this header. It\n   *          confirms the encryption algorithm that Amazon S3 used to encrypt the object.</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>Version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If <code>x-amz-server-side-encryption</code> is present and has the value of\n   *             <code>aws:kms</code>, this header specifies the ID of the AWS Key Management Service\n   *          (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the\n   *          object. </p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The\n   *          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption\n   *          context key-value pairs.</p>\n   */\n  SSEKMSEncryptionContext?: string;\n\n  /**\n   * <p>Indicates whether the uploaded object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace PutObjectOutput {\n  export const filterSensitiveLog = (obj: PutObjectOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }),\n  });\n}\n\nexport interface PutObjectRequest {\n  /**\n   * <p>The canned ACL to apply to the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned\n   *       ACL</a>.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  ACL?: ObjectCannedACL | string;\n\n  /**\n   * <p>Object data.</p>\n   */\n  Body?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p>The bucket name to which the PUT operation was initiated. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p> Can be used to specify caching behavior along the request/reply chain. For more\n   *          information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>\n   */\n  CacheControl?: string;\n\n  /**\n   * <p>Specifies presentational information for the object. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1</a>.</p>\n   */\n  ContentDisposition?: string;\n\n  /**\n   * <p>Specifies what content encodings have been applied to the object and thus what decoding\n   *          mechanisms must be applied to obtain the media-type referenced by the Content-Type header\n   *          field. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11</a>.</p>\n   */\n  ContentEncoding?: string;\n\n  /**\n   * <p>The language the content is in.</p>\n   */\n  ContentLanguage?: string;\n\n  /**\n   * <p>Size of the body in bytes. This parameter is useful when the size of the body cannot be\n   *          determined automatically. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13</a>.</p>\n   */\n  ContentLength?: number;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the message (without the headers) according to\n   *          RFC 1864. This header can be used as a message integrity check to verify that the data is\n   *          the same data that was originally sent. Although it is optional, we recommend using the\n   *          Content-MD5 mechanism as an end-to-end integrity check. For more information about REST\n   *          request authentication, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">REST\n   *             Authentication</a>.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>A standard MIME type describing the format of the contents. For more information, see\n   *             <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17</a>.</p>\n   */\n  ContentType?: string;\n\n  /**\n   * <p>The date and time at which the object is no longer cacheable. For more information, see\n   *             <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21</a>.</p>\n   */\n  Expires?: Date;\n\n  /**\n   * <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the\n   *       object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantFullControl?: string;\n\n  /**\n   * <p>Allows grantee to read the object data and its\n   *       metadata.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantRead?: string;\n\n  /**\n   * <p>Allows grantee to read the object ACL.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantReadACP?: string;\n\n  /**\n   * <p>Allows grantee to write the ACL for the applicable\n   *       object.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantWriteACP?: string;\n\n  /**\n   * <p>Object key for which the PUT operation was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>A map of metadata to store with the object in S3.</p>\n   */\n  Metadata?: { [key: string]: string };\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The\n   *          STANDARD storage class provides high durability and high availability. Depending on\n   *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses\n   *          the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3\n   *             Service Developer Guide</i>.</p>\n   */\n  StorageClass?: StorageClass | string;\n\n  /**\n   * <p>If the bucket is configured as a website, redirects requests for this object to another\n   *          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in\n   *          the object metadata. For information about object metadata, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html\">Object Key and Metadata</a>.</p>\n   *\n   *          <p>In the following example, the request header sets the redirect to an object\n   *          (anotherPage.html) in the same bucket:</p>\n   *\n   *          <p>\n   *             <code>x-amz-website-redirect-location: /anotherPage.html</code>\n   *          </p>\n   *\n   *          <p>In the following example, the request header sets the object redirect to another\n   *          website:</p>\n   *\n   *          <p>\n   *             <code>x-amz-website-redirect-location: http://www.example.com/</code>\n   *          </p>\n   *\n   *          <p>For more information about website hosting in Amazon S3, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting Websites on Amazon S3</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\">How to Configure Website Page\n   *             Redirects</a>. </p>\n   */\n  WebsiteRedirectLocation?: string;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If <code>x-amz-server-side-encryption</code> is present and has the value of\n   *             <code>aws:kms</code>, this header specifies the ID of the AWS Key Management Service\n   *          (AWS KMS) symmetrical customer managed customer master key (CMK) that was used for the\n   *          object.</p>\n   *          <p> If the value of <code>x-amz-server-side-encryption</code> is <code>aws:kms</code>, this\n   *          header specifies the ID of the symmetric customer managed AWS KMS CMK that will be used for\n   *          the object. If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but do not\n   *             provide<code> x-amz-server-side-encryption-aws-kms-key-id</code>, Amazon S3 uses the AWS\n   *          managed CMK in AWS to protect the data.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Specifies the AWS KMS Encryption Context to use for object encryption. The value of this\n   *          header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value\n   *          pairs.</p>\n   */\n  SSEKMSEncryptionContext?: string;\n\n  /**\n   * <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.</p>\n   *          <p>Specifying this header with a PUT operation doesn’t affect bucket-level settings for S3 Bucket Key.</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For\n   *          example, \"Key1=Value1\")</p>\n   */\n  Tagging?: string;\n\n  /**\n   * <p>The Object Lock mode that you want to apply to this object.</p>\n   */\n  ObjectLockMode?: ObjectLockMode | string;\n\n  /**\n   * <p>The date and time when you want this object's Object Lock to expire.</p>\n   */\n  ObjectLockRetainUntilDate?: Date;\n\n  /**\n   * <p>Specifies whether a legal hold will be applied to this object. For more information\n   *          about S3 Object Lock, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html\">Object\n   *          Lock</a>.</p>\n   */\n  ObjectLockLegalHoldStatus?: ObjectLockLegalHoldStatus | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutObjectRequest {\n  export const filterSensitiveLog = (obj: PutObjectRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }),\n  });\n}\n\nexport interface PutObjectAclOutput {\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace PutObjectAclOutput {\n  export const filterSensitiveLog = (obj: PutObjectAclOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectAclRequest {\n  /**\n   * <p>The canned ACL to apply to the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned ACL</a>.</p>\n   */\n  ACL?: ObjectCannedACL | string;\n\n  /**\n   * <p>Contains the elements that set the ACL permissions for an object per grantee.</p>\n   */\n  AccessControlPolicy?: AccessControlPolicy;\n\n  /**\n   * <p>The bucket name that contains the object to which you want to attach the ACL. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, go to <a href=\"http://www.ietf.org/rfc/rfc1864.txt\">RFC\n   *          1864.></a>\n   *          </p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Allows grantee the read, write, read ACP, and write ACP permissions on the\n   *          bucket.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantFullControl?: string;\n\n  /**\n   * <p>Allows grantee to list the objects in the\n   *       bucket.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantRead?: string;\n\n  /**\n   * <p>Allows grantee to read the bucket ACL.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantReadACP?: string;\n\n  /**\n   * <p>Allows grantee to create, overwrite, and delete any object in the bucket.</p>\n   */\n  GrantWrite?: string;\n\n  /**\n   * <p>Allows grantee to write the ACL for the applicable\n   *       bucket.</p>\n   *          <p>This action is not supported by Amazon S3 on Outposts.</p>\n   */\n  GrantWriteACP?: string;\n\n  /**\n   * <p>Key for which the PUT operation was initiated.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>VersionId used to reference a specific version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutObjectAclRequest {\n  export const filterSensitiveLog = (obj: PutObjectAclRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectLegalHoldOutput {\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace PutObjectLegalHoldOutput {\n  export const filterSensitiveLog = (obj: PutObjectLegalHoldOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectLegalHoldRequest {\n  /**\n   * <p>The bucket name containing the object that you want to place a Legal Hold on. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The key name for the object that you want to place a Legal Hold on.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Container element for the Legal Hold configuration you want to apply to the specified\n   *          object.</p>\n   */\n  LegalHold?: ObjectLockLegalHold;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The version ID of the object that you want to place a Legal Hold on.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The MD5 hash for the request body.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutObjectLegalHoldRequest {\n  export const filterSensitiveLog = (obj: PutObjectLegalHoldRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectLockConfigurationOutput {\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace PutObjectLockConfigurationOutput {\n  export const filterSensitiveLog = (obj: PutObjectLockConfigurationOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectLockConfigurationRequest {\n  /**\n   * <p>The bucket whose Object Lock configuration you want to create or replace.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The Object Lock configuration that you want to apply to the specified bucket.</p>\n   */\n  ObjectLockConfiguration?: ObjectLockConfiguration;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>A token to allow Object Lock to be enabled for an existing bucket.</p>\n   */\n  Token?: string;\n\n  /**\n   * <p>The MD5 hash for the request body.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutObjectLockConfigurationRequest {\n  export const filterSensitiveLog = (obj: PutObjectLockConfigurationRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectRetentionOutput {\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace PutObjectRetentionOutput {\n  export const filterSensitiveLog = (obj: PutObjectRetentionOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectRetentionRequest {\n  /**\n   * <p>The bucket name that contains the object you want to apply this Object Retention\n   *          configuration to. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The key name for the object that you want to apply this Object Retention configuration\n   *          to.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The container element for the Object Retention configuration.</p>\n   */\n  Retention?: ObjectLockRetention;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The version ID for the object that you want to apply this Object Retention configuration\n   *          to.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Indicates whether this operation should bypass Governance-mode restrictions.</p>\n   */\n  BypassGovernanceRetention?: boolean;\n\n  /**\n   * <p>The MD5 hash for the request body.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutObjectRetentionRequest {\n  export const filterSensitiveLog = (obj: PutObjectRetentionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectTaggingOutput {\n  /**\n   * <p>The versionId of the object the tag-set was added to.</p>\n   */\n  VersionId?: string;\n}\n\nexport namespace PutObjectTaggingOutput {\n  export const filterSensitiveLog = (obj: PutObjectTaggingOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutObjectTaggingRequest {\n  /**\n   * <p>The bucket name containing the object. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Name of the object key.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The versionId of the object that the tag-set will be added to.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>The MD5 hash for the request body.</p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Container for the <code>TagSet</code> and <code>Tag</code> elements</p>\n   */\n  Tagging: Tagging | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutObjectTaggingRequest {\n  export const filterSensitiveLog = (obj: PutObjectTaggingRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutPublicAccessBlockRequest {\n  /**\n   * <p>The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want\n   *          to set.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The MD5 hash of the <code>PutPublicAccessBlock</code> request body. </p>\n   *          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>The <code>PublicAccessBlock</code> configuration that you want to apply to this Amazon S3\n   *          bucket. You can enable the configuration options in any combination. For more information\n   *          about when Amazon S3 considers a bucket or object public, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status\">The Meaning of \"Public\"</a> in the <i>Amazon Simple Storage Service Developer\n   *          Guide</i>.</p>\n   */\n  PublicAccessBlockConfiguration: PublicAccessBlockConfiguration | undefined;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace PutPublicAccessBlockRequest {\n  export const filterSensitiveLog = (obj: PutPublicAccessBlockRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This operation is not allowed against this storage tier.</p>\n */\nexport interface ObjectAlreadyInActiveTierError extends __SmithyException, $MetadataBearer {\n  name: \"ObjectAlreadyInActiveTierError\";\n  $fault: \"client\";\n}\n\nexport namespace ObjectAlreadyInActiveTierError {\n  export const filterSensitiveLog = (obj: ObjectAlreadyInActiveTierError): any => ({\n    ...obj,\n  });\n}\n\nexport interface RestoreObjectOutput {\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n\n  /**\n   * <p>Indicates the path in the provided S3 output location where Select results will be\n   *          restored to.</p>\n   */\n  RestoreOutputPath?: string;\n}\n\nexport namespace RestoreObjectOutput {\n  export const filterSensitiveLog = (obj: RestoreObjectOutput): any => ({\n    ...obj,\n  });\n}\n\nexport type Tier = \"Bulk\" | \"Expedited\" | \"Standard\";\n\n/**\n * <p>Container for S3 Glacier job parameters.</p>\n */\nexport interface GlacierJobParameters {\n  /**\n   * <p>Retrieval tier at which the restore will be processed.</p>\n   */\n  Tier: Tier | string | undefined;\n}\n\nexport namespace GlacierJobParameters {\n  export const filterSensitiveLog = (obj: GlacierJobParameters): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Contains the type of server-side encryption used.</p>\n */\nexport interface Encryption {\n  /**\n   * <p>The server-side encryption algorithm used when storing job results in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  EncryptionType: ServerSideEncryption | string | undefined;\n\n  /**\n   * <p>If the encryption type is <code>aws:kms</code>, this optional value specifies the ID of\n   *          the symmetric customer managed AWS KMS CMK to use for encryption of job results. Amazon S3 only\n   *          supports symmetric CMKs. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and\n   *             Asymmetric Keys</a> in the <i>AWS Key Management Service Developer\n   *             Guide</i>.</p>\n   */\n  KMSKeyId?: string;\n\n  /**\n   * <p>If the encryption type is <code>aws:kms</code>, this optional value can be used to\n   *          specify the encryption context for the restore results.</p>\n   */\n  KMSContext?: string;\n}\n\nexport namespace Encryption {\n  export const filterSensitiveLog = (obj: Encryption): any => ({\n    ...obj,\n    ...(obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING }),\n  });\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(private name: string, public readonly children: Stringable[] = []) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n","/**\n * Escapes characters that can not be in an XML attribute.\n */\nexport function escapeAttribute(value: string): string {\n  return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n}\n","import { escapeElement } from \"./escape-element\";\nimport { Stringable } from \"./stringable\";\n/**\n * Represents an XML text value.\n */\nexport class XmlText implements Stringable {\n  constructor(private value: string) {}\n\n  toString(): string {\n    return escapeElement(\"\" + this.value);\n  }\n}\n","/**\n * Escapes characters that can not be in an XML element.\n */\nexport function escapeElement(value: string): string {\n  return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n","import {\n  AbortMultipartUploadCommandInput,\n  AbortMultipartUploadCommandOutput,\n} from \"../commands/AbortMultipartUploadCommand\";\nimport {\n  CompleteMultipartUploadCommandInput,\n  CompleteMultipartUploadCommandOutput,\n} from \"../commands/CompleteMultipartUploadCommand\";\nimport { CopyObjectCommandInput, CopyObjectCommandOutput } from \"../commands/CopyObjectCommand\";\nimport { CreateBucketCommandInput, CreateBucketCommandOutput } from \"../commands/CreateBucketCommand\";\nimport {\n  CreateMultipartUploadCommandInput,\n  CreateMultipartUploadCommandOutput,\n} from \"../commands/CreateMultipartUploadCommand\";\nimport {\n  DeleteBucketAnalyticsConfigurationCommandInput,\n  DeleteBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/DeleteBucketAnalyticsConfigurationCommand\";\nimport { DeleteBucketCommandInput, DeleteBucketCommandOutput } from \"../commands/DeleteBucketCommand\";\nimport { DeleteBucketCorsCommandInput, DeleteBucketCorsCommandOutput } from \"../commands/DeleteBucketCorsCommand\";\nimport {\n  DeleteBucketEncryptionCommandInput,\n  DeleteBucketEncryptionCommandOutput,\n} from \"../commands/DeleteBucketEncryptionCommand\";\nimport {\n  DeleteBucketIntelligentTieringConfigurationCommandInput,\n  DeleteBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/DeleteBucketIntelligentTieringConfigurationCommand\";\nimport {\n  DeleteBucketInventoryConfigurationCommandInput,\n  DeleteBucketInventoryConfigurationCommandOutput,\n} from \"../commands/DeleteBucketInventoryConfigurationCommand\";\nimport {\n  DeleteBucketLifecycleCommandInput,\n  DeleteBucketLifecycleCommandOutput,\n} from \"../commands/DeleteBucketLifecycleCommand\";\nimport {\n  DeleteBucketMetricsConfigurationCommandInput,\n  DeleteBucketMetricsConfigurationCommandOutput,\n} from \"../commands/DeleteBucketMetricsConfigurationCommand\";\nimport {\n  DeleteBucketOwnershipControlsCommandInput,\n  DeleteBucketOwnershipControlsCommandOutput,\n} from \"../commands/DeleteBucketOwnershipControlsCommand\";\nimport { DeleteBucketPolicyCommandInput, DeleteBucketPolicyCommandOutput } from \"../commands/DeleteBucketPolicyCommand\";\nimport {\n  DeleteBucketReplicationCommandInput,\n  DeleteBucketReplicationCommandOutput,\n} from \"../commands/DeleteBucketReplicationCommand\";\nimport {\n  DeleteBucketTaggingCommandInput,\n  DeleteBucketTaggingCommandOutput,\n} from \"../commands/DeleteBucketTaggingCommand\";\nimport {\n  DeleteBucketWebsiteCommandInput,\n  DeleteBucketWebsiteCommandOutput,\n} from \"../commands/DeleteBucketWebsiteCommand\";\nimport { DeleteObjectCommandInput, DeleteObjectCommandOutput } from \"../commands/DeleteObjectCommand\";\nimport {\n  DeleteObjectTaggingCommandInput,\n  DeleteObjectTaggingCommandOutput,\n} from \"../commands/DeleteObjectTaggingCommand\";\nimport { DeleteObjectsCommandInput, DeleteObjectsCommandOutput } from \"../commands/DeleteObjectsCommand\";\nimport {\n  DeletePublicAccessBlockCommandInput,\n  DeletePublicAccessBlockCommandOutput,\n} from \"../commands/DeletePublicAccessBlockCommand\";\nimport {\n  GetBucketAccelerateConfigurationCommandInput,\n  GetBucketAccelerateConfigurationCommandOutput,\n} from \"../commands/GetBucketAccelerateConfigurationCommand\";\nimport { GetBucketAclCommandInput, GetBucketAclCommandOutput } from \"../commands/GetBucketAclCommand\";\nimport {\n  GetBucketAnalyticsConfigurationCommandInput,\n  GetBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/GetBucketAnalyticsConfigurationCommand\";\nimport { GetBucketCorsCommandInput, GetBucketCorsCommandOutput } from \"../commands/GetBucketCorsCommand\";\nimport {\n  GetBucketEncryptionCommandInput,\n  GetBucketEncryptionCommandOutput,\n} from \"../commands/GetBucketEncryptionCommand\";\nimport {\n  GetBucketIntelligentTieringConfigurationCommandInput,\n  GetBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/GetBucketIntelligentTieringConfigurationCommand\";\nimport {\n  GetBucketInventoryConfigurationCommandInput,\n  GetBucketInventoryConfigurationCommandOutput,\n} from \"../commands/GetBucketInventoryConfigurationCommand\";\nimport {\n  GetBucketLifecycleConfigurationCommandInput,\n  GetBucketLifecycleConfigurationCommandOutput,\n} from \"../commands/GetBucketLifecycleConfigurationCommand\";\nimport { GetBucketLocationCommandInput, GetBucketLocationCommandOutput } from \"../commands/GetBucketLocationCommand\";\nimport { GetBucketLoggingCommandInput, GetBucketLoggingCommandOutput } from \"../commands/GetBucketLoggingCommand\";\nimport {\n  GetBucketMetricsConfigurationCommandInput,\n  GetBucketMetricsConfigurationCommandOutput,\n} from \"../commands/GetBucketMetricsConfigurationCommand\";\nimport {\n  GetBucketNotificationConfigurationCommandInput,\n  GetBucketNotificationConfigurationCommandOutput,\n} from \"../commands/GetBucketNotificationConfigurationCommand\";\nimport {\n  GetBucketOwnershipControlsCommandInput,\n  GetBucketOwnershipControlsCommandOutput,\n} from \"../commands/GetBucketOwnershipControlsCommand\";\nimport { GetBucketPolicyCommandInput, GetBucketPolicyCommandOutput } from \"../commands/GetBucketPolicyCommand\";\nimport {\n  GetBucketPolicyStatusCommandInput,\n  GetBucketPolicyStatusCommandOutput,\n} from \"../commands/GetBucketPolicyStatusCommand\";\nimport {\n  GetBucketReplicationCommandInput,\n  GetBucketReplicationCommandOutput,\n} from \"../commands/GetBucketReplicationCommand\";\nimport {\n  GetBucketRequestPaymentCommandInput,\n  GetBucketRequestPaymentCommandOutput,\n} from \"../commands/GetBucketRequestPaymentCommand\";\nimport { GetBucketTaggingCommandInput, GetBucketTaggingCommandOutput } from \"../commands/GetBucketTaggingCommand\";\nimport {\n  GetBucketVersioningCommandInput,\n  GetBucketVersioningCommandOutput,\n} from \"../commands/GetBucketVersioningCommand\";\nimport { GetBucketWebsiteCommandInput, GetBucketWebsiteCommandOutput } from \"../commands/GetBucketWebsiteCommand\";\nimport { GetObjectAclCommandInput, GetObjectAclCommandOutput } from \"../commands/GetObjectAclCommand\";\nimport { GetObjectCommandInput, GetObjectCommandOutput } from \"../commands/GetObjectCommand\";\nimport { GetObjectLegalHoldCommandInput, GetObjectLegalHoldCommandOutput } from \"../commands/GetObjectLegalHoldCommand\";\nimport {\n  GetObjectLockConfigurationCommandInput,\n  GetObjectLockConfigurationCommandOutput,\n} from \"../commands/GetObjectLockConfigurationCommand\";\nimport { GetObjectRetentionCommandInput, GetObjectRetentionCommandOutput } from \"../commands/GetObjectRetentionCommand\";\nimport { GetObjectTaggingCommandInput, GetObjectTaggingCommandOutput } from \"../commands/GetObjectTaggingCommand\";\nimport { GetObjectTorrentCommandInput, GetObjectTorrentCommandOutput } from \"../commands/GetObjectTorrentCommand\";\nimport {\n  GetPublicAccessBlockCommandInput,\n  GetPublicAccessBlockCommandOutput,\n} from \"../commands/GetPublicAccessBlockCommand\";\nimport { HeadBucketCommandInput, HeadBucketCommandOutput } from \"../commands/HeadBucketCommand\";\nimport { HeadObjectCommandInput, HeadObjectCommandOutput } from \"../commands/HeadObjectCommand\";\nimport {\n  ListBucketAnalyticsConfigurationsCommandInput,\n  ListBucketAnalyticsConfigurationsCommandOutput,\n} from \"../commands/ListBucketAnalyticsConfigurationsCommand\";\nimport {\n  ListBucketIntelligentTieringConfigurationsCommandInput,\n  ListBucketIntelligentTieringConfigurationsCommandOutput,\n} from \"../commands/ListBucketIntelligentTieringConfigurationsCommand\";\nimport {\n  ListBucketInventoryConfigurationsCommandInput,\n  ListBucketInventoryConfigurationsCommandOutput,\n} from \"../commands/ListBucketInventoryConfigurationsCommand\";\nimport {\n  ListBucketMetricsConfigurationsCommandInput,\n  ListBucketMetricsConfigurationsCommandOutput,\n} from \"../commands/ListBucketMetricsConfigurationsCommand\";\nimport { ListBucketsCommandInput, ListBucketsCommandOutput } from \"../commands/ListBucketsCommand\";\nimport {\n  ListMultipartUploadsCommandInput,\n  ListMultipartUploadsCommandOutput,\n} from \"../commands/ListMultipartUploadsCommand\";\nimport { ListObjectVersionsCommandInput, ListObjectVersionsCommandOutput } from \"../commands/ListObjectVersionsCommand\";\nimport { ListObjectsCommandInput, ListObjectsCommandOutput } from \"../commands/ListObjectsCommand\";\nimport { ListObjectsV2CommandInput, ListObjectsV2CommandOutput } from \"../commands/ListObjectsV2Command\";\nimport { ListPartsCommandInput, ListPartsCommandOutput } from \"../commands/ListPartsCommand\";\nimport {\n  PutBucketAccelerateConfigurationCommandInput,\n  PutBucketAccelerateConfigurationCommandOutput,\n} from \"../commands/PutBucketAccelerateConfigurationCommand\";\nimport { PutBucketAclCommandInput, PutBucketAclCommandOutput } from \"../commands/PutBucketAclCommand\";\nimport {\n  PutBucketAnalyticsConfigurationCommandInput,\n  PutBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/PutBucketAnalyticsConfigurationCommand\";\nimport { PutBucketCorsCommandInput, PutBucketCorsCommandOutput } from \"../commands/PutBucketCorsCommand\";\nimport {\n  PutBucketEncryptionCommandInput,\n  PutBucketEncryptionCommandOutput,\n} from \"../commands/PutBucketEncryptionCommand\";\nimport {\n  PutBucketIntelligentTieringConfigurationCommandInput,\n  PutBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/PutBucketIntelligentTieringConfigurationCommand\";\nimport {\n  PutBucketInventoryConfigurationCommandInput,\n  PutBucketInventoryConfigurationCommandOutput,\n} from \"../commands/PutBucketInventoryConfigurationCommand\";\nimport {\n  PutBucketLifecycleConfigurationCommandInput,\n  PutBucketLifecycleConfigurationCommandOutput,\n} from \"../commands/PutBucketLifecycleConfigurationCommand\";\nimport { PutBucketLoggingCommandInput, PutBucketLoggingCommandOutput } from \"../commands/PutBucketLoggingCommand\";\nimport {\n  PutBucketMetricsConfigurationCommandInput,\n  PutBucketMetricsConfigurationCommandOutput,\n} from \"../commands/PutBucketMetricsConfigurationCommand\";\nimport {\n  PutBucketNotificationConfigurationCommandInput,\n  PutBucketNotificationConfigurationCommandOutput,\n} from \"../commands/PutBucketNotificationConfigurationCommand\";\nimport {\n  PutBucketOwnershipControlsCommandInput,\n  PutBucketOwnershipControlsCommandOutput,\n} from \"../commands/PutBucketOwnershipControlsCommand\";\nimport { PutBucketPolicyCommandInput, PutBucketPolicyCommandOutput } from \"../commands/PutBucketPolicyCommand\";\nimport {\n  PutBucketReplicationCommandInput,\n  PutBucketReplicationCommandOutput,\n} from \"../commands/PutBucketReplicationCommand\";\nimport {\n  PutBucketRequestPaymentCommandInput,\n  PutBucketRequestPaymentCommandOutput,\n} from \"../commands/PutBucketRequestPaymentCommand\";\nimport { PutBucketTaggingCommandInput, PutBucketTaggingCommandOutput } from \"../commands/PutBucketTaggingCommand\";\nimport {\n  PutBucketVersioningCommandInput,\n  PutBucketVersioningCommandOutput,\n} from \"../commands/PutBucketVersioningCommand\";\nimport { PutBucketWebsiteCommandInput, PutBucketWebsiteCommandOutput } from \"../commands/PutBucketWebsiteCommand\";\nimport { PutObjectAclCommandInput, PutObjectAclCommandOutput } from \"../commands/PutObjectAclCommand\";\nimport { PutObjectCommandInput, PutObjectCommandOutput } from \"../commands/PutObjectCommand\";\nimport { PutObjectLegalHoldCommandInput, PutObjectLegalHoldCommandOutput } from \"../commands/PutObjectLegalHoldCommand\";\nimport {\n  PutObjectLockConfigurationCommandInput,\n  PutObjectLockConfigurationCommandOutput,\n} from \"../commands/PutObjectLockConfigurationCommand\";\nimport { PutObjectRetentionCommandInput, PutObjectRetentionCommandOutput } from \"../commands/PutObjectRetentionCommand\";\nimport { PutObjectTaggingCommandInput, PutObjectTaggingCommandOutput } from \"../commands/PutObjectTaggingCommand\";\nimport {\n  PutPublicAccessBlockCommandInput,\n  PutPublicAccessBlockCommandOutput,\n} from \"../commands/PutPublicAccessBlockCommand\";\nimport { RestoreObjectCommandInput, RestoreObjectCommandOutput } from \"../commands/RestoreObjectCommand\";\nimport {\n  SelectObjectContentCommandInput,\n  SelectObjectContentCommandOutput,\n} from \"../commands/SelectObjectContentCommand\";\nimport { UploadPartCommandInput, UploadPartCommandOutput } from \"../commands/UploadPartCommand\";\nimport { UploadPartCopyCommandInput, UploadPartCopyCommandOutput } from \"../commands/UploadPartCopyCommand\";\nimport {\n  AbortIncompleteMultipartUpload,\n  AccelerateConfiguration,\n  AccessControlPolicy,\n  AccessControlTranslation,\n  AnalyticsAndOperator,\n  AnalyticsConfiguration,\n  AnalyticsExportDestination,\n  AnalyticsFilter,\n  AnalyticsS3BucketDestination,\n  Bucket,\n  BucketAlreadyExists,\n  BucketAlreadyOwnedByYou,\n  BucketLifecycleConfiguration,\n  BucketLoggingStatus,\n  CORSConfiguration,\n  CORSRule,\n  CommonPrefix,\n  CompletedMultipartUpload,\n  CompletedPart,\n  Condition,\n  CopyObjectResult,\n  CreateBucketConfiguration,\n  DefaultRetention,\n  Delete,\n  DeleteMarkerEntry,\n  DeleteMarkerReplication,\n  DeletedObject,\n  Destination,\n  Encryption,\n  EncryptionConfiguration,\n  ErrorDocument,\n  Event,\n  ExistingObjectReplication,\n  FilterRule,\n  GlacierJobParameters,\n  Grant,\n  Grantee,\n  IndexDocument,\n  Initiator,\n  IntelligentTieringAndOperator,\n  IntelligentTieringConfiguration,\n  IntelligentTieringFilter,\n  InvalidObjectState,\n  InventoryConfiguration,\n  InventoryDestination,\n  InventoryEncryption,\n  InventoryFilter,\n  InventoryOptionalField,\n  InventoryS3BucketDestination,\n  InventorySchedule,\n  LambdaFunctionConfiguration,\n  LifecycleExpiration,\n  LifecycleRule,\n  LifecycleRuleAndOperator,\n  LifecycleRuleFilter,\n  LoggingEnabled,\n  Metrics,\n  MetricsAndOperator,\n  MetricsConfiguration,\n  MetricsFilter,\n  MultipartUpload,\n  NoSuchBucket,\n  NoSuchKey,\n  NoSuchUpload,\n  NoncurrentVersionExpiration,\n  NoncurrentVersionTransition,\n  NotificationConfiguration,\n  NotificationConfigurationFilter,\n  ObjectAlreadyInActiveTierError,\n  ObjectIdentifier,\n  ObjectLockConfiguration,\n  ObjectLockLegalHold,\n  ObjectLockRetention,\n  ObjectLockRule,\n  ObjectNotInActiveTierError,\n  ObjectVersion,\n  Owner,\n  OwnershipControls,\n  OwnershipControlsRule,\n  Part,\n  PolicyStatus,\n  PublicAccessBlockConfiguration,\n  QueueConfiguration,\n  Redirect,\n  RedirectAllRequestsTo,\n  ReplicaModifications,\n  ReplicationConfiguration,\n  ReplicationRule,\n  ReplicationRuleAndOperator,\n  ReplicationRuleFilter,\n  ReplicationTime,\n  ReplicationTimeValue,\n  RequestPaymentConfiguration,\n  RoutingRule,\n  S3KeyFilter,\n  SSEKMS,\n  SSES3,\n  ServerSideEncryptionByDefault,\n  ServerSideEncryptionConfiguration,\n  ServerSideEncryptionRule,\n  SourceSelectionCriteria,\n  SseKmsEncryptedObjects,\n  StorageClassAnalysis,\n  StorageClassAnalysisDataExport,\n  Tag,\n  Tagging,\n  TargetGrant,\n  Tiering,\n  TopicConfiguration,\n  Transition,\n  VersioningConfiguration,\n  WebsiteConfiguration,\n  _Error,\n  _Object,\n} from \"../models/models_0\";\nimport {\n  CSVInput,\n  CSVOutput,\n  ContinuationEvent,\n  CopyPartResult,\n  EndEvent,\n  InputSerialization,\n  JSONInput,\n  JSONOutput,\n  MetadataEntry,\n  OutputLocation,\n  OutputSerialization,\n  ParquetInput,\n  ProgressEvent,\n  RecordsEvent,\n  RequestProgress,\n  RestoreRequest,\n  S3Location,\n  ScanRange,\n  SelectObjectContentEventStream,\n  SelectParameters,\n  StatsEvent,\n} from \"../models/models_1\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  dateToUtcString as __dateToUtcString,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n  getArrayIfSingleItem as __getArrayIfSingleItem,\n  getValueFromTextNode as __getValueFromTextNode,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  EventStreamSerdeContext as __EventStreamSerdeContext,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { parse as xmlParse } from \"fast-xml-parser\";\n\nexport const serializeAws_restXmlAbortMultipartUploadCommand = async (\n  input: AbortMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"AbortMultipartUpload\",\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCompleteMultipartUploadCommand = async (\n  input: CompleteMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.MultipartUpload !== undefined) {\n    contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCopyObjectCommand = async (\n  input: CopyObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource! }),\n    ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n      \"x-amz-copy-source-if-match\": input.CopySourceIfMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n      \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n      \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n      \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.MetadataDirective) && { \"x-amz-metadata-directive\": input.MetadataDirective! }),\n    ...(isSerializableHeaderValue(input.TaggingDirective) && { \"x-amz-tagging-directive\": input.TaggingDirective! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n      \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n      \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"CopyObject\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCreateBucketCommand = async (\n  input: CreateBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {\n      \"x-amz-bucket-object-lock-enabled\": input.ObjectLockEnabledForBucket!.toString(),\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  let contents: any;\n  if (input.CreateBucketConfiguration !== undefined) {\n    contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCreateMultipartUploadCommand = async (\n  input: CreateMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    uploads: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketCommand = async (\n  input: DeleteBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (\n  input: DeleteBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketCorsCommand = async (\n  input: DeleteBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketEncryptionCommand = async (\n  input: DeleteBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (\n  input: DeleteBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (\n  input: DeleteBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketLifecycleCommand = async (\n  input: DeleteBucketLifecycleCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (\n  input: DeleteBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (\n  input: DeleteBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketPolicyCommand = async (\n  input: DeleteBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketReplicationCommand = async (\n  input: DeleteBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketTaggingCommand = async (\n  input: DeleteBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketWebsiteCommand = async (\n  input: DeleteBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectCommand = async (\n  input: DeleteObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"DeleteObject\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectsCommand = async (\n  input: DeleteObjectsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    delete: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Delete !== undefined) {\n    contents = serializeAws_restXmlDelete(input.Delete, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectTaggingCommand = async (\n  input: DeleteObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeletePublicAccessBlockCommand = async (\n  input: DeletePublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (\n  input: GetBucketAccelerateConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    accelerate: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAclCommand = async (\n  input: GetBucketAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    acl: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (\n  input: GetBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    \"x-id\": \"GetBucketAnalyticsConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketCorsCommand = async (\n  input: GetBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketEncryptionCommand = async (\n  input: GetBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (\n  input: GetBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    \"x-id\": \"GetBucketIntelligentTieringConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (\n  input: GetBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    \"x-id\": \"GetBucketInventoryConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (\n  input: GetBucketLifecycleConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLocationCommand = async (\n  input: GetBucketLocationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    location: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLoggingCommand = async (\n  input: GetBucketLoggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    logging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (\n  input: GetBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    \"x-id\": \"GetBucketMetricsConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (\n  input: GetBucketNotificationConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    notification: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketOwnershipControlsCommand = async (\n  input: GetBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketPolicyCommand = async (\n  input: GetBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketPolicyStatusCommand = async (\n  input: GetBucketPolicyStatusCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policyStatus: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketReplicationCommand = async (\n  input: GetBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketRequestPaymentCommand = async (\n  input: GetBucketRequestPaymentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    requestPayment: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketTaggingCommand = async (\n  input: GetBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketVersioningCommand = async (\n  input: GetBucketVersioningCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versioning: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketWebsiteCommand = async (\n  input: GetBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectCommand = async (\n  input: GetObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch! }),\n    ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n      \"if-modified-since\": __dateToUtcString(input.IfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch! }),\n    ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n      \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Range) && { range: input.Range! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"GetObject\",\n    ...(input.ResponseCacheControl !== undefined && { \"response-cache-control\": input.ResponseCacheControl }),\n    ...(input.ResponseContentDisposition !== undefined && {\n      \"response-content-disposition\": input.ResponseContentDisposition,\n    }),\n    ...(input.ResponseContentEncoding !== undefined && { \"response-content-encoding\": input.ResponseContentEncoding }),\n    ...(input.ResponseContentLanguage !== undefined && { \"response-content-language\": input.ResponseContentLanguage }),\n    ...(input.ResponseContentType !== undefined && { \"response-content-type\": input.ResponseContentType }),\n    ...(input.ResponseExpires !== undefined && {\n      \"response-expires\": (input.ResponseExpires.toISOString().split(\".\")[0] + \"Z\").toString(),\n    }),\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectAclCommand = async (\n  input: GetObjectAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    acl: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectLegalHoldCommand = async (\n  input: GetObjectLegalHoldCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"legal-hold\": \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectLockConfigurationCommand = async (\n  input: GetObjectLockConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"object-lock\": \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectRetentionCommand = async (\n  input: GetObjectRetentionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    retention: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectTaggingCommand = async (\n  input: GetObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectTorrentCommand = async (\n  input: GetObjectTorrentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    torrent: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetPublicAccessBlockCommand = async (\n  input: GetPublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlHeadBucketCommand = async (\n  input: HeadBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlHeadObjectCommand = async (\n  input: HeadObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch! }),\n    ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n      \"if-modified-since\": __dateToUtcString(input.IfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch! }),\n    ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n      \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Range) && { range: input.Range! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (\n  input: ListBucketAnalyticsConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    \"x-id\": \"ListBucketAnalyticsConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (\n  input: ListBucketIntelligentTieringConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    \"x-id\": \"ListBucketIntelligentTieringConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (\n  input: ListBucketInventoryConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    \"x-id\": \"ListBucketInventoryConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (\n  input: ListBucketMetricsConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    \"x-id\": \"ListBucketMetricsConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketsCommand = async (\n  input: ListBucketsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/\";\n  let body: any;\n  body = \"\";\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListMultipartUploadsCommand = async (\n  input: ListMultipartUploadsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    uploads: \"\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n    ...(input.MaxUploads !== undefined && { \"max-uploads\": input.MaxUploads.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.UploadIdMarker !== undefined && { \"upload-id-marker\": input.UploadIdMarker }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectsCommand = async (\n  input: ListObjectsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.Marker !== undefined && { marker: input.Marker }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectsV2Command = async (\n  input: ListObjectsV2CommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"list-type\": \"2\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    ...(input.FetchOwner !== undefined && { \"fetch-owner\": input.FetchOwner.toString() }),\n    ...(input.StartAfter !== undefined && { \"start-after\": input.StartAfter }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectVersionsCommand = async (\n  input: ListObjectVersionsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versions: \"\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.VersionIdMarker !== undefined && { \"version-id-marker\": input.VersionIdMarker }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListPartsCommand = async (\n  input: ListPartsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"ListParts\",\n    ...(input.MaxParts !== undefined && { \"max-parts\": input.MaxParts.toString() }),\n    ...(input.PartNumberMarker !== undefined && { \"part-number-marker\": input.PartNumberMarker }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (\n  input: PutBucketAccelerateConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    accelerate: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccelerateConfiguration !== undefined) {\n    contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAclCommand = async (\n  input: PutBucketAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    acl: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (\n  input: PutBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.AnalyticsConfiguration !== undefined) {\n    contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketCorsCommand = async (\n  input: PutBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.CORSConfiguration !== undefined) {\n    contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketEncryptionCommand = async (\n  input: PutBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (\n  input: PutBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (\n  input: PutBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.InventoryConfiguration !== undefined) {\n    contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (\n  input: PutBucketLifecycleConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.LifecycleConfiguration !== undefined) {\n    contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketLoggingCommand = async (\n  input: PutBucketLoggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    logging: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.BucketLoggingStatus !== undefined) {\n    contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (\n  input: PutBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.MetricsConfiguration !== undefined) {\n    contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (\n  input: PutBucketNotificationConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    notification: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.NotificationConfiguration !== undefined) {\n    contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketOwnershipControlsCommand = async (\n  input: PutBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.OwnershipControls !== undefined) {\n    contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketPolicyCommand = async (\n  input: PutBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"text/plain\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {\n      \"x-amz-confirm-remove-self-bucket-access\": input.ConfirmRemoveSelfBucketAccess!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Policy !== undefined) {\n    contents = input.Policy;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketReplicationCommand = async (\n  input: PutBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ReplicationConfiguration !== undefined) {\n    contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketRequestPaymentCommand = async (\n  input: PutBucketRequestPaymentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    requestPayment: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketTaggingCommand = async (\n  input: PutBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketVersioningCommand = async (\n  input: PutBucketVersioningCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versioning: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.VersioningConfiguration !== undefined) {\n    contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketWebsiteCommand = async (\n  input: PutBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.WebsiteConfiguration !== undefined) {\n    contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectCommand = async (\n  input: PutObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength!.toString() }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"PutObject\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectAclCommand = async (\n  input: PutObjectAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    acl: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectLegalHoldCommand = async (\n  input: PutObjectLegalHoldCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"legal-hold\": \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.LegalHold !== undefined) {\n    contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectLockConfigurationCommand = async (\n  input: PutObjectLockConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"object-lock\": \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ObjectLockConfiguration !== undefined) {\n    contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectRetentionCommand = async (\n  input: PutObjectRetentionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    retention: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Retention !== undefined) {\n    contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectTaggingCommand = async (\n  input: PutObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutPublicAccessBlockCommand = async (\n  input: PutPublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlRestoreObjectCommand = async (\n  input: RestoreObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    restore: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.RestoreRequest !== undefined) {\n    contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlSelectObjectContentCommand = async (\n  input: SelectObjectContentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    select: \"\",\n    \"select-type\": \"2\",\n  };\n  let body: any;\n  body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n  bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n  if (input.Expression !== undefined) {\n    const node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined) {\n    const node = new __XmlNode(\"ExpressionType\")\n      .addChildNode(new __XmlText(input.ExpressionType))\n      .withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.InputSerialization !== undefined) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\n      \"InputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\n      \"OutputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.RequestProgress !== undefined) {\n    const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ScanRange !== undefined) {\n    const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n    bodyNode.addChildNode(node);\n  }\n  body += bodyNode.toString();\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlUploadPartCommand = async (\n  input: UploadPartCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength!.toString() }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"UploadPart\",\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlUploadPartCopyCommand = async (\n  input: UploadPartCopyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource! }),\n    ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n      \"x-amz-copy-source-if-match\": input.CopySourceIfMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n      \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n      \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n      \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceRange) && { \"x-amz-copy-source-range\": input.CopySourceRange! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n      \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n      \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"UploadPartCopy\",\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const deserializeAws_restXmlAbortMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<AbortMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n  }\n  const contents: AbortMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<AbortMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchUpload\":\n    case \"com.amazonaws.s3#NoSuchUpload\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCompleteMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CompleteMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n  }\n  const contents: CompleteMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Bucket: undefined,\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Key: undefined,\n    Location: undefined,\n    RequestCharged: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = data[\"ETag\"];\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"Location\"] !== undefined) {\n    contents.Location = data[\"Location\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CompleteMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCopyObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CopyObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCopyObjectCommandError(output, context);\n  }\n  const contents: CopyObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    CopyObjectResult: undefined,\n    CopySourceVersionId: undefined,\n    Expiration: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n    contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCopyObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CopyObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectNotInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n      response = {\n        ...(await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCreateBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateBucketCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateBucketCommandError(output, context);\n  }\n  const contents: CreateBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Location: undefined,\n  };\n  if (output.headers[\"location\"] !== undefined) {\n    contents.Location = output.headers[\"location\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCreateBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BucketAlreadyExists\":\n    case \"com.amazonaws.s3#BucketAlreadyExists\":\n      response = {\n        ...(await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BucketAlreadyOwnedByYou\":\n    case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n      response = {\n        ...(await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCreateMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n  }\n  const contents: CreateMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AbortDate: undefined,\n    AbortRuleId: undefined,\n    Bucket: undefined,\n    BucketKeyEnabled: undefined,\n    Key: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    UploadId: undefined,\n  };\n  if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n    contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n  }\n  if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n    contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = data[\"UploadId\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n  }\n  const contents: DeleteBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCorsCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n  }\n  const contents: DeleteBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n  }\n  const contents: DeleteBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketLifecycleCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketLifecycleCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n  }\n  const contents: DeleteBucketLifecycleCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketLifecycleCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: DeleteBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n  }\n  const contents: DeleteBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n  }\n  const contents: DeleteBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n  }\n  const contents: DeleteBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n  }\n  const contents: DeleteBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n  }\n  const contents: DeleteObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: undefined,\n    RequestCharged: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n  }\n  const contents: DeleteObjectsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Deleted: undefined,\n    Errors: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.Deleted === \"\") {\n    contents.Deleted = [];\n  }\n  if (data[\"Deleted\"] !== undefined) {\n    contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n  }\n  if (data.Error === \"\") {\n    contents.Errors = [];\n  }\n  if (data[\"Error\"] !== undefined) {\n    contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n  }\n  const contents: DeleteObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeletePublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeletePublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n  }\n  const contents: DeletePublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeletePublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAccelerateConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketAccelerateConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Status: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = data[\"Status\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAccelerateConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n  }\n  const contents: GetBucketAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Grants: undefined,\n    Owner: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  }\n  if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AnalyticsConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketCorsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n  }\n  const contents: GetBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CORSRules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CORSRule === \"\") {\n    contents.CORSRules = [];\n  }\n  if (data[\"CORSRule\"] !== undefined) {\n    contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n  }\n  const contents: GetBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ServerSideEncryptionConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    IntelligentTieringConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    InventoryConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLifecycleConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketLifecycleConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Rules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (data[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLifecycleConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLocationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLocationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n  }\n  const contents: GetBucketLocationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LocationConstraint: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"LocationConstraint\"] !== undefined) {\n    contents.LocationConstraint = data[\"LocationConstraint\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLocationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLoggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLoggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n  }\n  const contents: GetBucketLoggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LoggingEnabled: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"LoggingEnabled\"] !== undefined) {\n    contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLoggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    MetricsConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketNotificationConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketNotificationConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LambdaFunctionConfigurations: undefined,\n    QueueConfigurations: undefined,\n    TopicConfigurations: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CloudFunctionConfiguration === \"\") {\n    contents.LambdaFunctionConfigurations = [];\n  }\n  if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n    contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(\n      __getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]),\n      context\n    );\n  }\n  if (data.QueueConfiguration === \"\") {\n    contents.QueueConfigurations = [];\n  }\n  if (data[\"QueueConfiguration\"] !== undefined) {\n    contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(\n      __getArrayIfSingleItem(data[\"QueueConfiguration\"]),\n      context\n    );\n  }\n  if (data.TopicConfiguration === \"\") {\n    contents.TopicConfigurations = [];\n  }\n  if (data[\"TopicConfiguration\"] !== undefined) {\n    contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(\n      __getArrayIfSingleItem(data[\"TopicConfiguration\"]),\n      context\n    );\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketNotificationConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: GetBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    OwnershipControls: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n  }\n  const contents: GetBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Policy: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Policy\"] !== undefined) {\n    contents.Policy = data[\"Policy\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketPolicyStatusCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyStatusCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n  }\n  const contents: GetBucketPolicyStatusCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    PolicyStatus: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyStatusCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n  }\n  const contents: GetBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ReplicationConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketRequestPaymentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketRequestPaymentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n  }\n  const contents: GetBucketRequestPaymentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Payer: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Payer\"] !== undefined) {\n    contents.Payer = data[\"Payer\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketRequestPaymentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n  }\n  const contents: GetBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    TagSet: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  }\n  if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketVersioningCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketVersioningCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n  }\n  const contents: GetBucketVersioningCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    MFADelete: undefined,\n    Status: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"MfaDelete\"] !== undefined) {\n    contents.MFADelete = data[\"MfaDelete\"];\n  }\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = data[\"Status\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketVersioningCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n  }\n  const contents: GetBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ErrorDocument: undefined,\n    IndexDocument: undefined,\n    RedirectAllRequestsTo: undefined,\n    RoutingRules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ErrorDocument\"] !== undefined) {\n    contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n  }\n  if (data[\"IndexDocument\"] !== undefined) {\n    contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n  }\n  if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n    contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(\n      data[\"RedirectAllRequestsTo\"],\n      context\n    );\n  }\n  if (data.RoutingRules === \"\") {\n    contents.RoutingRules = [];\n  }\n  if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n    contents.RoutingRules = deserializeAws_restXmlRoutingRules(\n      __getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]),\n      context\n    );\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectCommandError(output, context);\n  }\n  const contents: GetObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AcceptRanges: undefined,\n    Body: undefined,\n    BucketKeyEnabled: undefined,\n    CacheControl: undefined,\n    ContentDisposition: undefined,\n    ContentEncoding: undefined,\n    ContentLanguage: undefined,\n    ContentLength: undefined,\n    ContentRange: undefined,\n    ContentType: undefined,\n    DeleteMarker: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Expires: undefined,\n    LastModified: undefined,\n    Metadata: undefined,\n    MissingMeta: undefined,\n    ObjectLockLegalHoldStatus: undefined,\n    ObjectLockMode: undefined,\n    ObjectLockRetainUntilDate: undefined,\n    PartsCount: undefined,\n    ReplicationStatus: undefined,\n    RequestCharged: undefined,\n    Restore: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    StorageClass: undefined,\n    TagCount: undefined,\n    VersionId: undefined,\n    WebsiteRedirectLocation: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"accept-ranges\"] !== undefined) {\n    contents.AcceptRanges = output.headers[\"accept-ranges\"];\n  }\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-restore\"] !== undefined) {\n    contents.Restore = output.headers[\"x-amz-restore\"];\n  }\n  if (output.headers[\"last-modified\"] !== undefined) {\n    contents.LastModified = new Date(output.headers[\"last-modified\"]);\n  }\n  if (output.headers[\"content-length\"] !== undefined) {\n    contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n    contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"cache-control\"] !== undefined) {\n    contents.CacheControl = output.headers[\"cache-control\"];\n  }\n  if (output.headers[\"content-disposition\"] !== undefined) {\n    contents.ContentDisposition = output.headers[\"content-disposition\"];\n  }\n  if (output.headers[\"content-encoding\"] !== undefined) {\n    contents.ContentEncoding = output.headers[\"content-encoding\"];\n  }\n  if (output.headers[\"content-language\"] !== undefined) {\n    contents.ContentLanguage = output.headers[\"content-language\"];\n  }\n  if (output.headers[\"content-range\"] !== undefined) {\n    contents.ContentRange = output.headers[\"content-range\"];\n  }\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"expires\"] !== undefined) {\n    contents.Expires = new Date(output.headers[\"expires\"]);\n  }\n  if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n    contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n    contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n    contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n  }\n  if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n    contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n  }\n  if (output.headers[\"x-amz-tagging-count\"] !== undefined) {\n    contents.TagCount = parseInt(output.headers[\"x-amz-tagging-count\"], 10);\n  }\n  if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n    contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n  }\n  if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n    contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n  }\n  if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n    contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n  }\n  Object.keys(output.headers).forEach((header) => {\n    if (contents.Metadata === undefined) {\n      contents.Metadata = {};\n    }\n    if (header.startsWith(\"x-amz-meta-\")) {\n      contents.Metadata[header.substring(11)] = output.headers[header];\n    }\n  });\n  const data: any = output.body;\n  contents.Body = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidObjectState\":\n    case \"com.amazonaws.s3#InvalidObjectState\":\n      response = {\n        ...(await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n  }\n  const contents: GetObjectAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Grants: undefined,\n    Owner: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  }\n  if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectLegalHoldCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLegalHoldCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n  }\n  const contents: GetObjectLegalHoldCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LegalHold: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLegalHoldCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectLockConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLockConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n  }\n  const contents: GetObjectLockConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ObjectLockConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLockConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectRetentionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectRetentionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n  }\n  const contents: GetObjectRetentionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Retention: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectRetentionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n  }\n  const contents: GetObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    TagSet: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  }\n  if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectTorrentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTorrentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n  }\n  const contents: GetObjectTorrentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Body: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = output.body;\n  contents.Body = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTorrentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetPublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetPublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n  }\n  const contents: GetPublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    PublicAccessBlockConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetPublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlHeadBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadBucketCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadBucketCommandError(output, context);\n  }\n  const contents: HeadBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlHeadBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlHeadObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadObjectCommandError(output, context);\n  }\n  const contents: HeadObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AcceptRanges: undefined,\n    ArchiveStatus: undefined,\n    BucketKeyEnabled: undefined,\n    CacheControl: undefined,\n    ContentDisposition: undefined,\n    ContentEncoding: undefined,\n    ContentLanguage: undefined,\n    ContentLength: undefined,\n    ContentType: undefined,\n    DeleteMarker: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Expires: undefined,\n    LastModified: undefined,\n    Metadata: undefined,\n    MissingMeta: undefined,\n    ObjectLockLegalHoldStatus: undefined,\n    ObjectLockMode: undefined,\n    ObjectLockRetainUntilDate: undefined,\n    PartsCount: undefined,\n    ReplicationStatus: undefined,\n    RequestCharged: undefined,\n    Restore: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    StorageClass: undefined,\n    VersionId: undefined,\n    WebsiteRedirectLocation: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"accept-ranges\"] !== undefined) {\n    contents.AcceptRanges = output.headers[\"accept-ranges\"];\n  }\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-restore\"] !== undefined) {\n    contents.Restore = output.headers[\"x-amz-restore\"];\n  }\n  if (output.headers[\"x-amz-archive-status\"] !== undefined) {\n    contents.ArchiveStatus = output.headers[\"x-amz-archive-status\"];\n  }\n  if (output.headers[\"last-modified\"] !== undefined) {\n    contents.LastModified = new Date(output.headers[\"last-modified\"]);\n  }\n  if (output.headers[\"content-length\"] !== undefined) {\n    contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n    contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"cache-control\"] !== undefined) {\n    contents.CacheControl = output.headers[\"cache-control\"];\n  }\n  if (output.headers[\"content-disposition\"] !== undefined) {\n    contents.ContentDisposition = output.headers[\"content-disposition\"];\n  }\n  if (output.headers[\"content-encoding\"] !== undefined) {\n    contents.ContentEncoding = output.headers[\"content-encoding\"];\n  }\n  if (output.headers[\"content-language\"] !== undefined) {\n    contents.ContentLanguage = output.headers[\"content-language\"];\n  }\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"expires\"] !== undefined) {\n    contents.Expires = new Date(output.headers[\"expires\"]);\n  }\n  if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n    contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n    contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n    contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n  }\n  if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n    contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n  }\n  if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n    contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n  }\n  if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n    contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n  }\n  if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n    contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n  }\n  Object.keys(output.headers).forEach((header) => {\n    if (contents.Metadata === undefined) {\n      contents.Metadata = {};\n    }\n    if (header.startsWith(\"x-amz-meta-\")) {\n      contents.Metadata[header.substring(11)] = output.headers[header];\n    }\n  });\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlHeadObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketAnalyticsConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketAnalyticsConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AnalyticsConfigurationList: undefined,\n    ContinuationToken: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.AnalyticsConfiguration === \"\") {\n    contents.AnalyticsConfigurationList = [];\n  }\n  if (data[\"AnalyticsConfiguration\"] !== undefined) {\n    contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(\n      __getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketAnalyticsConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketIntelligentTieringConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketIntelligentTieringConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    IntelligentTieringConfigurationList: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data.IntelligentTieringConfiguration === \"\") {\n    contents.IntelligentTieringConfigurationList = [];\n  }\n  if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n    contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(\n      __getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketIntelligentTieringConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketInventoryConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketInventoryConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    InventoryConfigurationList: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data.InventoryConfiguration === \"\") {\n    contents.InventoryConfigurationList = [];\n  }\n  if (data[\"InventoryConfiguration\"] !== undefined) {\n    contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(\n      __getArrayIfSingleItem(data[\"InventoryConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketInventoryConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketMetricsConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketMetricsConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    IsTruncated: undefined,\n    MetricsConfigurationList: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data.MetricsConfiguration === \"\") {\n    contents.MetricsConfigurationList = [];\n  }\n  if (data[\"MetricsConfiguration\"] !== undefined) {\n    contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(\n      __getArrayIfSingleItem(data[\"MetricsConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketMetricsConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketsCommandError(output, context);\n  }\n  const contents: ListBucketsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Buckets: undefined,\n    Owner: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Buckets === \"\") {\n    contents.Buckets = [];\n  }\n  if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n    contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListMultipartUploadsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListMultipartUploadsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n  }\n  const contents: ListMultipartUploadsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Bucket: undefined,\n    CommonPrefixes: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyMarker: undefined,\n    MaxUploads: undefined,\n    NextKeyMarker: undefined,\n    NextUploadIdMarker: undefined,\n    Prefix: undefined,\n    UploadIdMarker: undefined,\n    Uploads: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = data[\"KeyMarker\"];\n  }\n  if (data[\"MaxUploads\"] !== undefined) {\n    contents.MaxUploads = parseInt(data[\"MaxUploads\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = data[\"NextKeyMarker\"];\n  }\n  if (data[\"NextUploadIdMarker\"] !== undefined) {\n    contents.NextUploadIdMarker = data[\"NextUploadIdMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"UploadIdMarker\"] !== undefined) {\n    contents.UploadIdMarker = data[\"UploadIdMarker\"];\n  }\n  if (data.Upload === \"\") {\n    contents.Uploads = [];\n  }\n  if (data[\"Upload\"] !== undefined) {\n    contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListMultipartUploadsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsCommandError(output, context);\n  }\n  const contents: ListObjectsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    Contents: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    Marker: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextMarker: undefined,\n    Prefix: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  }\n  if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"Marker\"] !== undefined) {\n    contents.Marker = data[\"Marker\"];\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextMarker\"] !== undefined) {\n    contents.NextMarker = data[\"NextMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectsV2Command = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsV2CommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n  }\n  const contents: ListObjectsV2CommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    Contents: undefined,\n    ContinuationToken: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyCount: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextContinuationToken: undefined,\n    Prefix: undefined,\n    StartAfter: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  }\n  if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyCount\"] !== undefined) {\n    contents.KeyCount = parseInt(data[\"KeyCount\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"StartAfter\"] !== undefined) {\n    contents.StartAfter = data[\"StartAfter\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectsV2CommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsV2CommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectVersionsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectVersionsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n  }\n  const contents: ListObjectVersionsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    DeleteMarkers: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyMarker: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextKeyMarker: undefined,\n    NextVersionIdMarker: undefined,\n    Prefix: undefined,\n    VersionIdMarker: undefined,\n    Versions: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.DeleteMarker === \"\") {\n    contents.DeleteMarkers = [];\n  }\n  if (data[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = data[\"KeyMarker\"];\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = data[\"NextKeyMarker\"];\n  }\n  if (data[\"NextVersionIdMarker\"] !== undefined) {\n    contents.NextVersionIdMarker = data[\"NextVersionIdMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"VersionIdMarker\"] !== undefined) {\n    contents.VersionIdMarker = data[\"VersionIdMarker\"];\n  }\n  if (data.Version === \"\") {\n    contents.Versions = [];\n  }\n  if (data[\"Version\"] !== undefined) {\n    contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectVersionsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListPartsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListPartsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListPartsCommandError(output, context);\n  }\n  const contents: ListPartsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AbortDate: undefined,\n    AbortRuleId: undefined,\n    Bucket: undefined,\n    Initiator: undefined,\n    IsTruncated: undefined,\n    Key: undefined,\n    MaxParts: undefined,\n    NextPartNumberMarker: undefined,\n    Owner: undefined,\n    PartNumberMarker: undefined,\n    Parts: undefined,\n    RequestCharged: undefined,\n    StorageClass: undefined,\n    UploadId: undefined,\n  };\n  if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n    contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n  }\n  if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n    contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = parseInt(data[\"MaxParts\"]);\n  }\n  if (data[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = data[\"NextPartNumberMarker\"];\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  if (data[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = data[\"PartNumberMarker\"];\n  }\n  if (data.Part === \"\") {\n    contents.Parts = [];\n  }\n  if (data[\"Part\"] !== undefined) {\n    contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = data[\"StorageClass\"];\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = data[\"UploadId\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListPartsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListPartsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAccelerateConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketAccelerateConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAccelerateConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n  }\n  const contents: PutBucketAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketCorsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n  }\n  const contents: PutBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n  }\n  const contents: PutBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLifecycleConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketLifecycleConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLifecycleConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketLoggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLoggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n  }\n  const contents: PutBucketLoggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLoggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketNotificationConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketNotificationConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketNotificationConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: PutBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n  }\n  const contents: PutBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n  }\n  const contents: PutBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketRequestPaymentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketRequestPaymentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n  }\n  const contents: PutBucketRequestPaymentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketRequestPaymentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n  }\n  const contents: PutBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketVersioningCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketVersioningCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n  }\n  const contents: PutBucketVersioningCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketVersioningCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n  }\n  const contents: PutBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectCommandError(output, context);\n  }\n  const contents: PutObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n  }\n  const contents: PutObjectAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectLegalHoldCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLegalHoldCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n  }\n  const contents: PutObjectLegalHoldCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLegalHoldCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectLockConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLockConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n  }\n  const contents: PutObjectLockConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLockConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectRetentionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectRetentionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n  }\n  const contents: PutObjectRetentionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectRetentionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n  }\n  const contents: PutObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutPublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutPublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n  }\n  const contents: PutPublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutPublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlRestoreObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<RestoreObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n  }\n  const contents: RestoreObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n    RestoreOutputPath: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-restore-output-path\"] !== undefined) {\n    contents.RestoreOutputPath = output.headers[\"x-amz-restore-output-path\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlRestoreObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<RestoreObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectAlreadyInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n      response = {\n        ...(await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlSelectObjectContentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext & __EventStreamSerdeContext\n): Promise<SelectObjectContentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n  }\n  const contents: SelectObjectContentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Payload: undefined,\n  };\n  const data: any = context.eventStreamMarshaller.deserialize(output.body, async (event) => {\n    const eventName = Object.keys(event)[0];\n    const eventHeaders = Object.entries(event[eventName].headers).reduce((accummulator, curr) => {\n      accummulator[curr[0]] = curr[1].value;\n      return accummulator;\n    }, {} as { [key: string]: any });\n    const eventMessage = {\n      headers: eventHeaders,\n      body: event[eventName].body,\n    };\n    const parsedEvent = {\n      [eventName]: eventMessage,\n    };\n    return await deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context);\n  });\n  contents.Payload = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SelectObjectContentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlUploadPartCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCommandError(output, context);\n  }\n  const contents: UploadPartCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n  };\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlUploadPartCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlUploadPartCopyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCopyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n  }\n  const contents: UploadPartCopyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    CopyPartResult: undefined,\n    CopySourceVersionId: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n  };\n  if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n    contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCopyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restXmlSelectObjectContentEventStream_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<SelectObjectContentEventStream> => {\n  if (output[\"Records\"] !== undefined) {\n    return {\n      Records: await deserializeAws_restXmlRecordsEvent_event(output[\"Records\"], context),\n    };\n  }\n  if (output[\"Stats\"] !== undefined) {\n    return {\n      Stats: await deserializeAws_restXmlStatsEvent_event(output[\"Stats\"], context),\n    };\n  }\n  if (output[\"Progress\"] !== undefined) {\n    return {\n      Progress: await deserializeAws_restXmlProgressEvent_event(output[\"Progress\"], context),\n    };\n  }\n  if (output[\"Cont\"] !== undefined) {\n    return {\n      Cont: await deserializeAws_restXmlContinuationEvent_event(output[\"Cont\"], context),\n    };\n  }\n  if (output[\"End\"] !== undefined) {\n    return {\n      End: await deserializeAws_restXmlEndEvent_event(output[\"End\"], context),\n    };\n  }\n  return { $unknown: output };\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<ContinuationEvent> => {\n  let contents: ContinuationEvent = {} as any;\n  return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output: any, context: __SerdeContext): Promise<EndEvent> => {\n  let contents: EndEvent = {} as any;\n  return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<ProgressEvent> => {\n  let contents: ProgressEvent = {} as any;\n  contents.Details = await parseBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<RecordsEvent> => {\n  let contents: RecordsEvent = {} as any;\n  contents.Payload = output.body;\n  return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output: any, context: __SerdeContext): Promise<StatsEvent> => {\n  let contents: StatsEvent = {} as any;\n  contents.Details = await parseBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BucketAlreadyExists> => {\n  const contents: BucketAlreadyExists = {\n    name: \"BucketAlreadyExists\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BucketAlreadyOwnedByYou> => {\n  const contents: BucketAlreadyOwnedByYou = {\n    name: \"BucketAlreadyOwnedByYou\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidObjectState> => {\n  const contents: InvalidObjectState = {\n    name: \"InvalidObjectState\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    AccessTier: undefined,\n    StorageClass: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = data[\"AccessTier\"];\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = data[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchBucketResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchBucket> => {\n  const contents: NoSuchBucket = {\n    name: \"NoSuchBucket\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchKeyResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchKey> => {\n  const contents: NoSuchKey = {\n    name: \"NoSuchKey\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchUploadResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchUpload> => {\n  const contents: NoSuchUpload = {\n    name: \"NoSuchUpload\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ObjectAlreadyInActiveTierError> => {\n  const contents: ObjectAlreadyInActiveTierError = {\n    name: \"ObjectAlreadyInActiveTierError\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ObjectNotInActiveTierError> => {\n  const contents: ObjectNotInActiveTierError = {\n    name: \"ObjectNotInActiveTierError\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (\n  input: AbortIncompleteMultipartUpload,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n  if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {\n    const node = new __XmlNode(\"DaysAfterInitiation\")\n      .addChildNode(new __XmlText(String(input.DaysAfterInitiation)))\n      .withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccelerateConfiguration = (input: AccelerateConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"BucketAccelerateStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccessControlPolicy = (input: AccessControlPolicy, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n  if (input.Grants !== undefined && input.Grants !== null) {\n    const nodes = serializeAws_restXmlGrants(input.Grants, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Owner !== undefined && input.Owner !== null) {\n    const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccessControlTranslation = (\n  input: AccessControlTranslation,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n  if (input.Owner !== undefined && input.Owner !== null) {\n    const node = new __XmlNode(\"OwnerOverride\").addChildNode(new __XmlText(input.Owner)).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAllowedHeaders = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedHeader\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAllowedMethods = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedMethod\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAllowedOrigins = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedOrigin\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAnalyticsAndOperator = (input: AnalyticsAndOperator, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsConfiguration = (input: AnalyticsConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"AnalyticsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {\n    const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\n      \"StorageClassAnalysis\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsExportDestination = (\n  input: AnalyticsExportDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\n      \"S3BucketDestination\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsFilter = (input: AnalyticsFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (\n  input: AnalyticsS3BucketDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n  if (input.Format !== undefined && input.Format !== null) {\n    const node = new __XmlNode(\"AnalyticsS3ExportFileFormat\")\n      .addChildNode(new __XmlText(input.Format))\n      .withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {\n    const node = new __XmlNode(\"AccountId\")\n      .addChildNode(new __XmlText(input.BucketAccountId))\n      .withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlBucketLifecycleConfiguration = (\n  input: BucketLifecycleConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlBucketLoggingStatus = (input: BucketLoggingStatus, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n  if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {\n    const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedMultipartUpload = (\n  input: CompletedMultipartUpload,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n  if (input.Parts !== undefined && input.Parts !== null) {\n    const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedPart = (input: CompletedPart, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CompletedPart\");\n  if (input.ETag !== undefined && input.ETag !== null) {\n    const node = new __XmlNode(\"ETag\").addChildNode(new __XmlText(input.ETag)).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.PartNumber !== undefined && input.PartNumber !== null) {\n    const node = new __XmlNode(\"PartNumber\")\n      .addChildNode(new __XmlText(String(input.PartNumber)))\n      .withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedPartList = (input: CompletedPart[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlCompletedPart(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlCondition = (input: Condition, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Condition\");\n  if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {\n    const node = new __XmlNode(\"HttpErrorCodeReturnedEquals\")\n      .addChildNode(new __XmlText(input.HttpErrorCodeReturnedEquals))\n      .withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {\n    const node = new __XmlNode(\"KeyPrefixEquals\")\n      .addChildNode(new __XmlText(input.KeyPrefixEquals))\n      .withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSConfiguration = (input: CORSConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CORSConfiguration\");\n  if (input.CORSRules !== undefined && input.CORSRules !== null) {\n    const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSRule = (input: CORSRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CORSRule\");\n  if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {\n    const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n    const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {\n    const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {\n    const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {\n    const node = new __XmlNode(\"MaxAgeSeconds\")\n      .addChildNode(new __XmlText(String(input.MaxAgeSeconds)))\n      .withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSRules = (input: CORSRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlCORSRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlCreateBucketConfiguration = (\n  input: CreateBucketConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n  if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {\n    const node = new __XmlNode(\"BucketLocationConstraint\")\n      .addChildNode(new __XmlText(input.LocationConstraint))\n      .withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCSVInput = (input: CSVInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CSVInput\");\n  if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {\n    const node = new __XmlNode(\"FileHeaderInfo\")\n      .addChildNode(new __XmlText(input.FileHeaderInfo))\n      .withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Comments !== undefined && input.Comments !== null) {\n    const node = new __XmlNode(\"Comments\").addChildNode(new __XmlText(input.Comments)).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    const node = new __XmlNode(\"QuoteEscapeCharacter\")\n      .addChildNode(new __XmlText(input.QuoteEscapeCharacter))\n      .withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    const node = new __XmlNode(\"FieldDelimiter\")\n      .addChildNode(new __XmlText(input.FieldDelimiter))\n      .withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    const node = new __XmlNode(\"QuoteCharacter\")\n      .addChildNode(new __XmlText(input.QuoteCharacter))\n      .withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {\n    const node = new __XmlNode(\"AllowQuotedRecordDelimiter\")\n      .addChildNode(new __XmlText(String(input.AllowQuotedRecordDelimiter)))\n      .withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCSVOutput = (input: CSVOutput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CSVOutput\");\n  if (input.QuoteFields !== undefined && input.QuoteFields !== null) {\n    const node = new __XmlNode(\"QuoteFields\").addChildNode(new __XmlText(input.QuoteFields)).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    const node = new __XmlNode(\"QuoteEscapeCharacter\")\n      .addChildNode(new __XmlText(input.QuoteEscapeCharacter))\n      .withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    const node = new __XmlNode(\"FieldDelimiter\")\n      .addChildNode(new __XmlText(input.FieldDelimiter))\n      .withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    const node = new __XmlNode(\"QuoteCharacter\")\n      .addChildNode(new __XmlText(input.QuoteCharacter))\n      .withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDefaultRetention = (input: DefaultRetention, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"DefaultRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    const node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Years !== undefined && input.Years !== null) {\n    const node = new __XmlNode(\"Years\").addChildNode(new __XmlText(String(input.Years))).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDelete = (input: Delete, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Delete\");\n  if (input.Objects !== undefined && input.Objects !== null) {\n    const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Quiet !== undefined && input.Quiet !== null) {\n    const node = new __XmlNode(\"Quiet\").addChildNode(new __XmlText(String(input.Quiet))).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDeleteMarkerReplication = (input: DeleteMarkerReplication, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"DeleteMarkerReplicationStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDestination = (input: Destination, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Destination\");\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Account !== undefined && input.Account !== null) {\n    const node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.Account)).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {\n    const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\n      \"AccessControlTranslation\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {\n    const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\n      \"EncryptionConfiguration\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {\n    const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Metrics !== undefined && input.Metrics !== null) {\n    const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEncryption = (input: Encryption, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Encryption\");\n  if (input.EncryptionType !== undefined && input.EncryptionType !== null) {\n    const node = new __XmlNode(\"ServerSideEncryption\")\n      .addChildNode(new __XmlText(input.EncryptionType))\n      .withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSKeyId)).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSContext !== undefined && input.KMSContext !== null) {\n    const node = new __XmlNode(\"KMSContext\").addChildNode(new __XmlText(input.KMSContext)).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEncryptionConfiguration = (input: EncryptionConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n  if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {\n    const node = new __XmlNode(\"ReplicaKmsKeyID\")\n      .addChildNode(new __XmlText(input.ReplicaKmsKeyID))\n      .withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlErrorDocument = (input: ErrorDocument, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ErrorDocument\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEventList = (input: (Event | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"Event\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlExistingObjectReplication = (\n  input: ExistingObjectReplication,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ExistingObjectReplicationStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlExposeHeaders = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"ExposeHeader\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlFilterRule = (input: FilterRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"FilterRule\");\n  if (input.Name !== undefined && input.Name !== null) {\n    const node = new __XmlNode(\"FilterRuleName\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"FilterRuleValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlFilterRuleList = (input: FilterRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlFilterRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlGlacierJobParameters = (input: GlacierJobParameters, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n  if (input.Tier !== undefined && input.Tier !== null) {\n    const node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrant = (input: Grant, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Grant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    const node = new __XmlNode(\"Permission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrantee = (input: Grantee, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Grantee\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    const node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EmailAddress !== undefined && input.EmailAddress !== null) {\n    const node = new __XmlNode(\"EmailAddress\").addChildNode(new __XmlText(input.EmailAddress)).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.URI !== undefined && input.URI !== null) {\n    const node = new __XmlNode(\"URI\").addChildNode(new __XmlText(input.URI)).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrants = (input: Grant[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlGrant(entry, context);\n      return node.withName(\"Grant\");\n    });\n};\n\nconst serializeAws_restXmlIndexDocument = (input: IndexDocument, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"IndexDocument\");\n  if (input.Suffix !== undefined && input.Suffix !== null) {\n    const node = new __XmlNode(\"Suffix\").addChildNode(new __XmlText(input.Suffix)).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInputSerialization = (input: InputSerialization, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CompressionType !== undefined && input.CompressionType !== null) {\n    const node = new __XmlNode(\"CompressionType\")\n      .addChildNode(new __XmlText(input.CompressionType))\n      .withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Parquet !== undefined && input.Parquet !== null) {\n    const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringAndOperator = (\n  input: IntelligentTieringAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringConfiguration = (\n  input: IntelligentTieringConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"IntelligentTieringId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"IntelligentTieringStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tierings !== undefined && input.Tierings !== null) {\n    const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringFilter = (\n  input: IntelligentTieringFilter,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tag !== undefined && input.Tag !== null) {\n    const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.And !== undefined && input.And !== null) {\n    const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryConfiguration = (input: InventoryConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IsEnabled !== undefined && input.IsEnabled !== null) {\n    const node = new __XmlNode(\"IsEnabled\").addChildNode(new __XmlText(String(input.IsEnabled))).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"InventoryId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {\n    const node = new __XmlNode(\"InventoryIncludedObjectVersions\")\n      .addChildNode(new __XmlText(input.IncludedObjectVersions))\n      .withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OptionalFields !== undefined && input.OptionalFields !== null) {\n    const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n    const containerNode = new __XmlNode(\"OptionalFields\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Schedule !== undefined && input.Schedule !== null) {\n    const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryDestination = (input: InventoryDestination, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\n      \"S3BucketDestination\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryEncryption = (input: InventoryEncryption, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryEncryption\");\n  if (input.SSES3 !== undefined && input.SSES3 !== null) {\n    const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SSEKMS !== undefined && input.SSEKMS !== null) {\n    const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryFilter = (input: InventoryFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryOptionalFields = (\n  input: (InventoryOptionalField | string)[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"InventoryOptionalField\").addChildNode(new __XmlText(entry));\n      return node.withName(\"Field\");\n    });\n};\n\nconst serializeAws_restXmlInventoryS3BucketDestination = (\n  input: InventoryS3BucketDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n  if (input.AccountId !== undefined && input.AccountId !== null) {\n    const node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.AccountId)).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Format !== undefined && input.Format !== null) {\n    const node = new __XmlNode(\"InventoryFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventorySchedule = (input: InventorySchedule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventorySchedule\");\n  if (input.Frequency !== undefined && input.Frequency !== null) {\n    const node = new __XmlNode(\"InventoryFrequency\").addChildNode(new __XmlText(input.Frequency)).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlJSONInput = (input: JSONInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"JSONInput\");\n  if (input.Type !== undefined && input.Type !== null) {\n    const node = new __XmlNode(\"JSONType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlJSONOutput = (input: JSONOutput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"JSONOutput\");\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLambdaFunctionConfiguration = (\n  input: LambdaFunctionConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {\n    const node = new __XmlNode(\"LambdaFunctionArn\")\n      .addChildNode(new __XmlText(input.LambdaFunctionArn))\n      .withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (\n  input: LambdaFunctionConfiguration[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlLifecycleExpiration = (input: LifecycleExpiration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n  if (input.Date !== undefined && input.Date !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {\n    const node = new __XmlNode(\"ExpiredObjectDeleteMarker\")\n      .addChildNode(new __XmlText(String(input.ExpiredObjectDeleteMarker)))\n      .withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRule = (input: LifecycleRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRule\");\n  if (input.Expiration !== undefined && input.Expiration !== null) {\n    const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ExpirationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Transitions !== undefined && input.Transitions !== null) {\n    const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {\n    const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {\n    const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\n      \"NoncurrentVersionExpiration\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {\n    const node = serializeAws_restXmlAbortIncompleteMultipartUpload(\n      input.AbortIncompleteMultipartUpload,\n      context\n    ).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRuleAndOperator = (\n  input: LifecycleRuleAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRuleFilter = (input: LifecycleRuleFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRules = (input: LifecycleRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlLifecycleRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlLoggingEnabled = (input: LoggingEnabled, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LoggingEnabled\");\n  if (input.TargetBucket !== undefined && input.TargetBucket !== null) {\n    const node = new __XmlNode(\"TargetBucket\").addChildNode(new __XmlText(input.TargetBucket)).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TargetGrants !== undefined && input.TargetGrants !== null) {\n    const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n    const containerNode = new __XmlNode(\"TargetGrants\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {\n    const node = new __XmlNode(\"TargetPrefix\").addChildNode(new __XmlText(input.TargetPrefix)).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetadataEntry = (input: MetadataEntry, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetadataEntry\");\n  if (input.Name !== undefined && input.Name !== null) {\n    const node = new __XmlNode(\"MetadataKey\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"MetadataValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetrics = (input: Metrics, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Metrics\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"MetricsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EventThreshold !== undefined && input.EventThreshold !== null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsAndOperator = (input: MetricsAndOperator, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsConfiguration = (input: MetricsConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"MetricsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsFilter = (input: MetricsFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionExpiration = (\n  input: NoncurrentVersionExpiration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    const node = new __XmlNode(\"Days\")\n      .addChildNode(new __XmlText(String(input.NoncurrentDays)))\n      .withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionTransition = (\n  input: NoncurrentVersionTransition,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    const node = new __XmlNode(\"Days\")\n      .addChildNode(new __XmlText(String(input.NoncurrentDays)))\n      .withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"TransitionStorageClass\")\n      .addChildNode(new __XmlText(input.StorageClass))\n      .withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (\n  input: NoncurrentVersionTransition[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlNotificationConfiguration = (\n  input: NotificationConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n  if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {\n    const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {\n    const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {\n    const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNotificationConfigurationFilter = (\n  input: NotificationConfigurationFilter,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectIdentifier = (input: ObjectIdentifier, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.VersionId !== undefined && input.VersionId !== null) {\n    const node = new __XmlNode(\"ObjectVersionId\").addChildNode(new __XmlText(input.VersionId)).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectIdentifierList = (input: ObjectIdentifier[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlObjectIdentifier(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlObjectLockConfiguration = (input: ObjectLockConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n  if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {\n    const node = new __XmlNode(\"ObjectLockEnabled\")\n      .addChildNode(new __XmlText(input.ObjectLockEnabled))\n      .withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rule !== undefined && input.Rule !== null) {\n    const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockLegalHold = (input: ObjectLockLegalHold, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ObjectLockLegalHoldStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockRetention = (input: ObjectLockRetention, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    const node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockRule = (input: ObjectLockRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockRule\");\n  if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {\n    const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOutputLocation = (input: OutputLocation, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OutputLocation\");\n  if (input.S3 !== undefined && input.S3 !== null) {\n    const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOutputSerialization = (input: OutputSerialization, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OutputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwner = (input: Owner, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Owner\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    const node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControls = (input: OwnershipControls, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OwnershipControls\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControlsRule = (input: OwnershipControlsRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n  if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {\n    const node = new __XmlNode(\"ObjectOwnership\")\n      .addChildNode(new __XmlText(input.ObjectOwnership))\n      .withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControlsRules = (input: OwnershipControlsRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlParquetInput = (input: ParquetInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\n\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (\n  input: PublicAccessBlockConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n  if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.BlockPublicAcls)))\n      .withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.IgnorePublicAcls)))\n      .withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.BlockPublicPolicy)))\n      .withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.RestrictPublicBuckets)))\n      .withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlQueueConfiguration = (input: QueueConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"QueueConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QueueArn !== undefined && input.QueueArn !== null) {\n    const node = new __XmlNode(\"QueueArn\").addChildNode(new __XmlText(input.QueueArn)).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlQueueConfigurationList = (input: QueueConfiguration[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlQueueConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlRedirect = (input: Redirect, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Redirect\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    const node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {\n    const node = new __XmlNode(\"HttpRedirectCode\")\n      .addChildNode(new __XmlText(input.HttpRedirectCode))\n      .withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    const node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {\n    const node = new __XmlNode(\"ReplaceKeyPrefixWith\")\n      .addChildNode(new __XmlText(input.ReplaceKeyPrefixWith))\n      .withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {\n    const node = new __XmlNode(\"ReplaceKeyWith\")\n      .addChildNode(new __XmlText(input.ReplaceKeyWith))\n      .withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRedirectAllRequestsTo = (input: RedirectAllRequestsTo, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    const node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    const node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicaModifications = (input: ReplicaModifications, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicaModifications\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicaModificationsStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationConfiguration = (\n  input: ReplicationConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n  if (input.Role !== undefined && input.Role !== null) {\n    const node = new __XmlNode(\"Role\").addChildNode(new __XmlText(input.Role)).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRule = (input: ReplicationRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRule\");\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Priority !== undefined && input.Priority !== null) {\n    const node = new __XmlNode(\"Priority\").addChildNode(new __XmlText(String(input.Priority))).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicationRuleStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {\n    const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\n      \"SourceSelectionCriteria\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {\n    const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\n      \"ExistingObjectReplication\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {\n    const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\n      \"DeleteMarkerReplication\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRuleAndOperator = (\n  input: ReplicationRuleAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRuleFilter = (input: ReplicationRuleFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRules = (input: ReplicationRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlReplicationRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlReplicationTime = (input: ReplicationTime, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationTime\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicationTimeStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Time !== undefined && input.Time !== null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationTimeValue = (input: ReplicationTimeValue, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n  if (input.Minutes !== undefined && input.Minutes !== null) {\n    const node = new __XmlNode(\"Minutes\").addChildNode(new __XmlText(String(input.Minutes))).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRequestPaymentConfiguration = (\n  input: RequestPaymentConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n  if (input.Payer !== undefined && input.Payer !== null) {\n    const node = new __XmlNode(\"Payer\").addChildNode(new __XmlText(input.Payer)).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRequestProgress = (input: RequestProgress, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RequestProgress\");\n  if (input.Enabled !== undefined && input.Enabled !== null) {\n    const node = new __XmlNode(\"EnableRequestProgress\")\n      .addChildNode(new __XmlText(String(input.Enabled)))\n      .withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRestoreRequest = (input: RestoreRequest, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RestoreRequest\");\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {\n    const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\n      \"GlacierJobParameters\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    const node = new __XmlNode(\"RestoreRequestType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tier !== undefined && input.Tier !== null) {\n    const node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Description !== undefined && input.Description !== null) {\n    const node = new __XmlNode(\"Description\").addChildNode(new __XmlText(input.Description)).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SelectParameters !== undefined && input.SelectParameters !== null) {\n    const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputLocation !== undefined && input.OutputLocation !== null) {\n    const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRoutingRule = (input: RoutingRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RoutingRule\");\n  if (input.Condition !== undefined && input.Condition !== null) {\n    const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Redirect !== undefined && input.Redirect !== null) {\n    const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRoutingRules = (input: RoutingRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlRoutingRule(entry, context);\n      return node.withName(\"RoutingRule\");\n    });\n};\n\nconst serializeAws_restXmlS3KeyFilter = (input: S3KeyFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"S3KeyFilter\");\n  if (input.FilterRules !== undefined && input.FilterRules !== null) {\n    const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlS3Location = (input: S3Location, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"S3Location\");\n  if (input.BucketName !== undefined && input.BucketName !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.BucketName)).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"LocationPrefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CannedACL !== undefined && input.CannedACL !== null) {\n    const node = new __XmlNode(\"ObjectCannedACL\").addChildNode(new __XmlText(input.CannedACL)).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlList !== undefined && input.AccessControlList !== null) {\n    const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Tagging !== undefined && input.Tagging !== null) {\n    const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.UserMetadata !== undefined && input.UserMetadata !== null) {\n    const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n    const containerNode = new __XmlNode(\"UserMetadata\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlScanRange = (input: ScanRange, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ScanRange\");\n  if (input.Start !== undefined && input.Start !== null) {\n    const node = new __XmlNode(\"Start\").addChildNode(new __XmlText(String(input.Start))).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.End !== undefined && input.End !== null) {\n    const node = new __XmlNode(\"End\").addChildNode(new __XmlText(String(input.End))).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSelectParameters = (input: SelectParameters, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SelectParameters\");\n  if (input.InputSerialization !== undefined && input.InputSerialization !== null) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\n      \"InputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined && input.ExpressionType !== null) {\n    const node = new __XmlNode(\"ExpressionType\")\n      .addChildNode(new __XmlText(input.ExpressionType))\n      .withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Expression !== undefined && input.Expression !== null) {\n    const node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\n      \"OutputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionByDefault = (\n  input: ServerSideEncryptionByDefault,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n  if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {\n    const node = new __XmlNode(\"ServerSideEncryption\")\n      .addChildNode(new __XmlText(input.SSEAlgorithm))\n      .withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\")\n      .addChildNode(new __XmlText(input.KMSMasterKeyID))\n      .withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (\n  input: ServerSideEncryptionConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionRule = (\n  input: ServerSideEncryptionRule,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n  if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {\n    const node = serializeAws_restXmlServerSideEncryptionByDefault(\n      input.ApplyServerSideEncryptionByDefault,\n      context\n    ).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {\n    const node = new __XmlNode(\"BucketKeyEnabled\")\n      .addChildNode(new __XmlText(String(input.BucketKeyEnabled)))\n      .withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionRules = (\n  input: ServerSideEncryptionRule[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlSourceSelectionCriteria = (input: SourceSelectionCriteria, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n  if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {\n    const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\n      \"SseKmsEncryptedObjects\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {\n    const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\n      \"ReplicaModifications\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSSEKMS = (input: SSEKMS, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SSE-KMS\");\n  if (input.KeyId !== undefined && input.KeyId !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KeyId)).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input: SseKmsEncryptedObjects, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"SseKmsEncryptedObjectsStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSSES3 = (input: SSES3, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\n\nconst serializeAws_restXmlStorageClassAnalysis = (input: StorageClassAnalysis, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n  if (input.DataExport !== undefined && input.DataExport !== null) {\n    const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (\n  input: StorageClassAnalysisDataExport,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n  if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {\n    const node = new __XmlNode(\"StorageClassAnalysisSchemaVersion\")\n      .addChildNode(new __XmlText(input.OutputSchemaVersion))\n      .withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTag = (input: Tag, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tag\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"Value\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTagging = (input: Tagging, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tagging\");\n  if (input.TagSet !== undefined && input.TagSet !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n    const containerNode = new __XmlNode(\"TagSet\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTagSet = (input: Tag[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTag(entry, context);\n      return node.withName(\"Tag\");\n    });\n};\n\nconst serializeAws_restXmlTargetGrant = (input: TargetGrant, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"TargetGrant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    const node = new __XmlNode(\"BucketLogsPermission\")\n      .addChildNode(new __XmlText(input.Permission))\n      .withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTargetGrants = (input: TargetGrant[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTargetGrant(entry, context);\n      return node.withName(\"Grant\");\n    });\n};\n\nconst serializeAws_restXmlTiering = (input: Tiering, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tiering\");\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"IntelligentTieringDays\")\n      .addChildNode(new __XmlText(String(input.Days)))\n      .withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessTier !== undefined && input.AccessTier !== null) {\n    const node = new __XmlNode(\"IntelligentTieringAccessTier\")\n      .addChildNode(new __XmlText(input.AccessTier))\n      .withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTieringList = (input: Tiering[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTiering(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlTopicConfiguration = (input: TopicConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"TopicConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TopicArn !== undefined && input.TopicArn !== null) {\n    const node = new __XmlNode(\"TopicArn\").addChildNode(new __XmlText(input.TopicArn)).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTopicConfigurationList = (input: TopicConfiguration[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTopicConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlTransition = (input: Transition, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Transition\");\n  if (input.Date !== undefined && input.Date !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"TransitionStorageClass\")\n      .addChildNode(new __XmlText(input.StorageClass))\n      .withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTransitionList = (input: Transition[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTransition(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlUserMetadata = (input: MetadataEntry[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlMetadataEntry(entry, context);\n      return node.withName(\"MetadataEntry\");\n    });\n};\n\nconst serializeAws_restXmlVersioningConfiguration = (input: VersioningConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n  if (input.MFADelete !== undefined && input.MFADelete !== null) {\n    const node = new __XmlNode(\"MFADelete\").addChildNode(new __XmlText(input.MFADelete)).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"BucketVersioningStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlWebsiteConfiguration = (input: WebsiteConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n  if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {\n    const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IndexDocument !== undefined && input.IndexDocument !== null) {\n    const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {\n    const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\n      \"RedirectAllRequestsTo\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.RoutingRules !== undefined && input.RoutingRules !== null) {\n    const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n    const containerNode = new __XmlNode(\"RoutingRules\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\n\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (\n  output: any,\n  context: __SerdeContext\n): AbortIncompleteMultipartUpload => {\n  let contents: any = {\n    DaysAfterInitiation: undefined,\n  };\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = parseInt(output[\"DaysAfterInitiation\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAccessControlTranslation = (\n  output: any,\n  context: __SerdeContext\n): AccessControlTranslation => {\n  let contents: any = {\n    Owner: undefined,\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = output[\"Owner\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAllowedHeaders = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAllowedMethods = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAllowedOrigins = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAnalyticsAndOperator = (output: any, context: __SerdeContext): AnalyticsAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsConfiguration = (output: any, context: __SerdeContext): AnalyticsConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n    StorageClassAnalysis: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlAnalyticsFilter(output[\"Filter\"], context);\n  }\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlAnalyticsExportDestination = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsExportDestination => {\n  let contents: any = {\n    S3BucketDestination: undefined,\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(\n      output[\"S3BucketDestination\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsFilter = (output: any, context: __SerdeContext): AnalyticsFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsS3BucketDestination => {\n  let contents: any = {\n    Format: undefined,\n    BucketAccountId: undefined,\n    Bucket: undefined,\n    Prefix: undefined,\n  };\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = output[\"BucketAccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlBucket = (output: any, context: __SerdeContext): Bucket => {\n  let contents: any = {\n    Name: undefined,\n    CreationDate: undefined,\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = new Date(output[\"CreationDate\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlBuckets = (output: any, context: __SerdeContext): Bucket[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlBucket(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlCommonPrefix = (output: any, context: __SerdeContext): CommonPrefix => {\n  let contents: any = {\n    Prefix: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCommonPrefixList = (output: any, context: __SerdeContext): CommonPrefix[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlCommonPrefix(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlCondition = (output: any, context: __SerdeContext): Condition => {\n  let contents: any = {\n    HttpErrorCodeReturnedEquals: undefined,\n    KeyPrefixEquals: undefined,\n  };\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = output[\"HttpErrorCodeReturnedEquals\"];\n  }\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = output[\"KeyPrefixEquals\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCopyObjectResult = (output: any, context: __SerdeContext): CopyObjectResult => {\n  let contents: any = {\n    ETag: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCopyPartResult = (output: any, context: __SerdeContext): CopyPartResult => {\n  let contents: any = {\n    ETag: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCORSRule = (output: any, context: __SerdeContext): CORSRule => {\n  let contents: any = {\n    AllowedHeaders: undefined,\n    AllowedMethods: undefined,\n    AllowedOrigins: undefined,\n    ExposeHeaders: undefined,\n    MaxAgeSeconds: undefined,\n  };\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  }\n  if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(\n      __getArrayIfSingleItem(output[\"AllowedHeader\"]),\n      context\n    );\n  }\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  }\n  if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(\n      __getArrayIfSingleItem(output[\"AllowedMethod\"]),\n      context\n    );\n  }\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  }\n  if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(\n      __getArrayIfSingleItem(output[\"AllowedOrigin\"]),\n      context\n    );\n  }\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  }\n  if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(\n      __getArrayIfSingleItem(output[\"ExposeHeader\"]),\n      context\n    );\n  }\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = parseInt(output[\"MaxAgeSeconds\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCORSRules = (output: any, context: __SerdeContext): CORSRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlCORSRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDefaultRetention = (output: any, context: __SerdeContext): DefaultRetention => {\n  let contents: any = {\n    Mode: undefined,\n    Days: undefined,\n    Years: undefined,\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = parseInt(output[\"Years\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeletedObject = (output: any, context: __SerdeContext): DeletedObject => {\n  let contents: any = {\n    Key: undefined,\n    VersionId: undefined,\n    DeleteMarker: undefined,\n    DeleteMarkerVersionId: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = output[\"DeleteMarker\"] == \"true\";\n  }\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = output[\"DeleteMarkerVersionId\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeletedObjects = (output: any, context: __SerdeContext): DeletedObject[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlDeletedObject(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDeleteMarkerEntry = (output: any, context: __SerdeContext): DeleteMarkerEntry => {\n  let contents: any = {\n    Owner: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeleteMarkerReplication = (\n  output: any,\n  context: __SerdeContext\n): DeleteMarkerReplication => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeleteMarkers = (output: any, context: __SerdeContext): DeleteMarkerEntry[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDestination = (output: any, context: __SerdeContext): Destination => {\n  let contents: any = {\n    Bucket: undefined,\n    Account: undefined,\n    StorageClass: undefined,\n    AccessControlTranslation: undefined,\n    EncryptionConfiguration: undefined,\n    ReplicationTime: undefined,\n    Metrics: undefined,\n  };\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = output[\"Account\"];\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(\n      output[\"AccessControlTranslation\"],\n      context\n    );\n  }\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(\n      output[\"EncryptionConfiguration\"],\n      context\n    );\n  }\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n  }\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlEncryptionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): EncryptionConfiguration => {\n  let contents: any = {\n    ReplicaKmsKeyID: undefined,\n  };\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = output[\"ReplicaKmsKeyID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXml_Error = (output: any, context: __SerdeContext): _Error => {\n  let contents: any = {\n    Key: undefined,\n    VersionId: undefined,\n    Code: undefined,\n    Message: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = output[\"Code\"];\n  }\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = output[\"Message\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlErrorDocument = (output: any, context: __SerdeContext): ErrorDocument => {\n  let contents: any = {\n    Key: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlErrors = (output: any, context: __SerdeContext): _Error[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXml_Error(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlEventList = (output: any, context: __SerdeContext): (Event | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlExistingObjectReplication = (\n  output: any,\n  context: __SerdeContext\n): ExistingObjectReplication => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlExposeHeaders = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlFilterRule = (output: any, context: __SerdeContext): FilterRule => {\n  let contents: any = {\n    Name: undefined,\n    Value: undefined,\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlFilterRuleList = (output: any, context: __SerdeContext): FilterRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlFilterRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlGrant = (output: any, context: __SerdeContext): Grant => {\n  let contents: any = {\n    Grantee: undefined,\n    Permission: undefined,\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlGrantee = (output: any, context: __SerdeContext): Grantee => {\n  let contents: any = {\n    DisplayName: undefined,\n    EmailAddress: undefined,\n    ID: undefined,\n    URI: undefined,\n    Type: undefined,\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = output[\"EmailAddress\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = output[\"URI\"];\n  }\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = output[\"xsi:type\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlGrants = (output: any, context: __SerdeContext): Grant[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlGrant(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlIndexDocument = (output: any, context: __SerdeContext): IndexDocument => {\n  let contents: any = {\n    Suffix: undefined,\n  };\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = output[\"Suffix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInitiator = (output: any, context: __SerdeContext): Initiator => {\n  let contents: any = {\n    ID: undefined,\n    DisplayName: undefined,\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Tierings: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  }\n  if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlIntelligentTieringFilter = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringFilter => {\n  let contents: any = {\n    Prefix: undefined,\n    Tag: undefined,\n    And: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n  }\n  if (output[\"And\"] !== undefined) {\n    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryConfiguration = (output: any, context: __SerdeContext): InventoryConfiguration => {\n  let contents: any = {\n    Destination: undefined,\n    IsEnabled: undefined,\n    Filter: undefined,\n    Id: undefined,\n    IncludedObjectVersions: undefined,\n    OptionalFields: undefined,\n    Schedule: undefined,\n  };\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n  }\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = output[\"IsEnabled\"] == \"true\";\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = output[\"IncludedObjectVersions\"];\n  }\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  }\n  if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(\n      __getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]),\n      context\n    );\n  }\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): InventoryConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlInventoryConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlInventoryDestination = (output: any, context: __SerdeContext): InventoryDestination => {\n  let contents: any = {\n    S3BucketDestination: undefined,\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(\n      output[\"S3BucketDestination\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryEncryption = (output: any, context: __SerdeContext): InventoryEncryption => {\n  let contents: any = {\n    SSES3: undefined,\n    SSEKMS: undefined,\n  };\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n  }\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryFilter = (output: any, context: __SerdeContext): InventoryFilter => {\n  let contents: any = {\n    Prefix: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryOptionalFields = (\n  output: any,\n  context: __SerdeContext\n): (InventoryOptionalField | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlInventoryS3BucketDestination = (\n  output: any,\n  context: __SerdeContext\n): InventoryS3BucketDestination => {\n  let contents: any = {\n    AccountId: undefined,\n    Bucket: undefined,\n    Format: undefined,\n    Prefix: undefined,\n    Encryption: undefined,\n  };\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = output[\"AccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventorySchedule = (output: any, context: __SerdeContext): InventorySchedule => {\n  let contents: any = {\n    Frequency: undefined,\n  };\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = output[\"Frequency\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): LambdaFunctionConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    LambdaFunctionArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = output[\"CloudFunction\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): LambdaFunctionConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlLifecycleExpiration = (output: any, context: __SerdeContext): LifecycleExpiration => {\n  let contents: any = {\n    Date: undefined,\n    Days: undefined,\n    ExpiredObjectDeleteMarker: undefined,\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = output[\"ExpiredObjectDeleteMarker\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRule = (output: any, context: __SerdeContext): LifecycleRule => {\n  let contents: any = {\n    Expiration: undefined,\n    ID: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Transitions: undefined,\n    NoncurrentVersionTransitions: undefined,\n    NoncurrentVersionExpiration: undefined,\n    AbortIncompleteMultipartUpload: undefined,\n  };\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  }\n  if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  }\n  if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(\n      __getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]),\n      context\n    );\n  }\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(\n      output[\"NoncurrentVersionExpiration\"],\n      context\n    );\n  }\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(\n      output[\"AbortIncompleteMultipartUpload\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (\n  output: any,\n  context: __SerdeContext\n): LifecycleRuleAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRuleFilter = (output: any, context: __SerdeContext): LifecycleRuleFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlLifecycleRules = (output: any, context: __SerdeContext): LifecycleRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlLifecycleRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlLoggingEnabled = (output: any, context: __SerdeContext): LoggingEnabled => {\n  let contents: any = {\n    TargetBucket: undefined,\n    TargetGrants: undefined,\n    TargetPrefix: undefined,\n  };\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = output[\"TargetBucket\"];\n  }\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  }\n  if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = deserializeAws_restXmlTargetGrants(\n      __getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]),\n      context\n    );\n  }\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = output[\"TargetPrefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetrics = (output: any, context: __SerdeContext): Metrics => {\n  let contents: any = {\n    Status: undefined,\n    EventThreshold: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsAndOperator = (output: any, context: __SerdeContext): MetricsAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsConfiguration = (output: any, context: __SerdeContext): MetricsConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlMetricsFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): MetricsConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlMetricsConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlMetricsFilter = (output: any, context: __SerdeContext): MetricsFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlMultipartUpload = (output: any, context: __SerdeContext): MultipartUpload => {\n  let contents: any = {\n    UploadId: undefined,\n    Key: undefined,\n    Initiated: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n    Initiator: undefined,\n  };\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = output[\"UploadId\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = new Date(output[\"Initiated\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMultipartUploadList = (output: any, context: __SerdeContext): MultipartUpload[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlMultipartUpload(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionExpiration => {\n  let contents: any = {\n    NoncurrentDays: undefined,\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoncurrentVersionTransition = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionTransition => {\n  let contents: any = {\n    NoncurrentDays: undefined,\n    StorageClass: undefined,\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionTransition[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlNotificationConfigurationFilter = (\n  output: any,\n  context: __SerdeContext\n): NotificationConfigurationFilter => {\n  let contents: any = {\n    Key: undefined,\n  };\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXml_Object = (output: any, context: __SerdeContext): _Object => {\n  let contents: any = {\n    Key: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectList = (output: any, context: __SerdeContext): _Object[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXml_Object(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlObjectLockConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ObjectLockConfiguration => {\n  let contents: any = {\n    ObjectLockEnabled: undefined,\n    Rule: undefined,\n  };\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = output[\"ObjectLockEnabled\"];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockLegalHold = (output: any, context: __SerdeContext): ObjectLockLegalHold => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockRetention = (output: any, context: __SerdeContext): ObjectLockRetention => {\n  let contents: any = {\n    Mode: undefined,\n    RetainUntilDate: undefined,\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = new Date(output[\"RetainUntilDate\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockRule = (output: any, context: __SerdeContext): ObjectLockRule => {\n  let contents: any = {\n    DefaultRetention: undefined,\n  };\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectVersion = (output: any, context: __SerdeContext): ObjectVersion => {\n  let contents: any = {\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n    Owner: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectVersionList = (output: any, context: __SerdeContext): ObjectVersion[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlObjectVersion(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlOwner = (output: any, context: __SerdeContext): Owner => {\n  let contents: any = {\n    DisplayName: undefined,\n    ID: undefined,\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControls = (output: any, context: __SerdeContext): OwnershipControls => {\n  let contents: any = {\n    Rules: undefined,\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControlsRule = (output: any, context: __SerdeContext): OwnershipControlsRule => {\n  let contents: any = {\n    ObjectOwnership: undefined,\n  };\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = output[\"ObjectOwnership\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControlsRules = (\n  output: any,\n  context: __SerdeContext\n): OwnershipControlsRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlPart = (output: any, context: __SerdeContext): Part => {\n  let contents: any = {\n    PartNumber: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n  };\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = parseInt(output[\"PartNumber\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlParts = (output: any, context: __SerdeContext): Part[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlPart(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlPolicyStatus = (output: any, context: __SerdeContext): PolicyStatus => {\n  let contents: any = {\n    IsPublic: undefined,\n  };\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = output[\"IsPublic\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (\n  output: any,\n  context: __SerdeContext\n): PublicAccessBlockConfiguration => {\n  let contents: any = {\n    BlockPublicAcls: undefined,\n    IgnorePublicAcls: undefined,\n    BlockPublicPolicy: undefined,\n    RestrictPublicBuckets: undefined,\n  };\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = output[\"BlockPublicAcls\"] == \"true\";\n  }\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = output[\"IgnorePublicAcls\"] == \"true\";\n  }\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = output[\"BlockPublicPolicy\"] == \"true\";\n  }\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = output[\"RestrictPublicBuckets\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlQueueConfiguration = (output: any, context: __SerdeContext): QueueConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    QueueArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = output[\"Queue\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlQueueConfigurationList = (output: any, context: __SerdeContext): QueueConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlQueueConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlRedirect = (output: any, context: __SerdeContext): Redirect => {\n  let contents: any = {\n    HostName: undefined,\n    HttpRedirectCode: undefined,\n    Protocol: undefined,\n    ReplaceKeyPrefixWith: undefined,\n    ReplaceKeyWith: undefined,\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = output[\"HttpRedirectCode\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = output[\"ReplaceKeyPrefixWith\"];\n  }\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = output[\"ReplaceKeyWith\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output: any, context: __SerdeContext): RedirectAllRequestsTo => {\n  let contents: any = {\n    HostName: undefined,\n    Protocol: undefined,\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicaModifications = (output: any, context: __SerdeContext): ReplicaModifications => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ReplicationConfiguration => {\n  let contents: any = {\n    Role: undefined,\n    Rules: undefined,\n  };\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = output[\"Role\"];\n  }\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRule = (output: any, context: __SerdeContext): ReplicationRule => {\n  let contents: any = {\n    ID: undefined,\n    Priority: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    SourceSelectionCriteria: undefined,\n    ExistingObjectReplication: undefined,\n    Destination: undefined,\n    DeleteMarkerReplication: undefined,\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = parseInt(output[\"Priority\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(\n      output[\"SourceSelectionCriteria\"],\n      context\n    );\n  }\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(\n      output[\"ExistingObjectReplication\"],\n      context\n    );\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n  }\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(\n      output[\"DeleteMarkerReplication\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRuleAndOperator = (\n  output: any,\n  context: __SerdeContext\n): ReplicationRuleAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRuleFilter = (output: any, context: __SerdeContext): ReplicationRuleFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlReplicationRules = (output: any, context: __SerdeContext): ReplicationRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlReplicationRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlReplicationTime = (output: any, context: __SerdeContext): ReplicationTime => {\n  let contents: any = {\n    Status: undefined,\n    Time: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationTimeValue = (output: any, context: __SerdeContext): ReplicationTimeValue => {\n  let contents: any = {\n    Minutes: undefined,\n  };\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = parseInt(output[\"Minutes\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRoutingRule = (output: any, context: __SerdeContext): RoutingRule => {\n  let contents: any = {\n    Condition: undefined,\n    Redirect: undefined,\n  };\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n  }\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRoutingRules = (output: any, context: __SerdeContext): RoutingRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlRoutingRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlS3KeyFilter = (output: any, context: __SerdeContext): S3KeyFilter => {\n  let contents: any = {\n    FilterRules: undefined,\n  };\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  }\n  if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionByDefault => {\n  let contents: any = {\n    SSEAlgorithm: undefined,\n    KMSMasterKeyID: undefined,\n  };\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = output[\"SSEAlgorithm\"];\n  }\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = output[\"KMSMasterKeyID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionConfiguration => {\n  let contents: any = {\n    Rules: undefined,\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionRule = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionRule => {\n  let contents: any = {\n    ApplyServerSideEncryptionByDefault: undefined,\n    BucketKeyEnabled: undefined,\n  };\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(\n      output[\"ApplyServerSideEncryptionByDefault\"],\n      context\n    );\n  }\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output[\"BucketKeyEnabled\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionRules = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlSourceSelectionCriteria = (\n  output: any,\n  context: __SerdeContext\n): SourceSelectionCriteria => {\n  let contents: any = {\n    SseKmsEncryptedObjects: undefined,\n    ReplicaModifications: undefined,\n  };\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(\n      output[\"SseKmsEncryptedObjects\"],\n      context\n    );\n  }\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSSEKMS = (output: any, context: __SerdeContext): SSEKMS => {\n  let contents: any = {\n    KeyId: undefined,\n  };\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = output[\"KeyId\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output: any, context: __SerdeContext): SseKmsEncryptedObjects => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSSES3 = (output: any, context: __SerdeContext): SSES3 => {\n  let contents: any = {};\n  return contents;\n};\n\nconst deserializeAws_restXmlStorageClassAnalysis = (output: any, context: __SerdeContext): StorageClassAnalysis => {\n  let contents: any = {\n    DataExport: undefined,\n  };\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (\n  output: any,\n  context: __SerdeContext\n): StorageClassAnalysisDataExport => {\n  let contents: any = {\n    OutputSchemaVersion: undefined,\n    Destination: undefined,\n  };\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = output[\"OutputSchemaVersion\"];\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTag = (output: any, context: __SerdeContext): Tag => {\n  let contents: any = {\n    Key: undefined,\n    Value: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTagSet = (output: any, context: __SerdeContext): Tag[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTag(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTargetGrant = (output: any, context: __SerdeContext): TargetGrant => {\n  let contents: any = {\n    Grantee: undefined,\n    Permission: undefined,\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTargetGrants = (output: any, context: __SerdeContext): TargetGrant[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTargetGrant(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTiering = (output: any, context: __SerdeContext): Tiering => {\n  let contents: any = {\n    Days: undefined,\n    AccessTier: undefined,\n  };\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = output[\"AccessTier\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTieringList = (output: any, context: __SerdeContext): Tiering[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTiering(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTopicConfiguration = (output: any, context: __SerdeContext): TopicConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    TopicArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = output[\"Topic\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTopicConfigurationList = (output: any, context: __SerdeContext): TopicConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTopicConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTransition = (output: any, context: __SerdeContext): Transition => {\n  let contents: any = {\n    Date: undefined,\n    Days: undefined,\n    StorageClass: undefined,\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTransitionList = (output: any, context: __SerdeContext): Transition[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTransition(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst decodeEscapedXML = (str: string) =>\n  str\n    .replace(/&amp;/g, \"&\")\n    .replace(/&apos;/g, \"'\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&gt;/g, \">\")\n    .replace(/&lt;/g, \"<\");\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      const parsedObj = xmlParse(encoded, {\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n        parseNodeValue: false,\n        tagValueProcessor: (val, tagName) => decodeEscapedXML(val),\n      });\n      const textNodeName = \"#text\";\n      const key = Object.keys(parsedObj)[0];\n      const parsedObjToReturn = parsedObj[key];\n      if (parsedObjToReturn[textNodeName]) {\n        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n        delete parsedObjToReturn[textNodeName];\n      }\n      return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n  });\n\nconst loadRestXmlErrorCode = (output: __HttpResponse, data: any): string => {\n  if (data.Code !== undefined) {\n    return data.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n  return \"\";\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export interface ARN {\n  partition: string;\n  service: string;\n  region: string;\n  accountId: string;\n  resource: string;\n}\n/**\n * Validate whether a string is an ARN.\n */\nexport const validate = (str: any): boolean =>\n  typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport const parse = (arn: string): ARN => {\n  const segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  const [\n    ,\n    //Skip \"arn\" literal\n    partition,\n    service,\n    region,\n    accountId,\n    ...resource\n  ] = segments;\n\n  return {\n    partition,\n    service,\n    region,\n    accountId,\n    resource: resource.join(\":\"),\n  };\n};\n\ntype buildOptions = Omit<ARN, \"partition\"> & { partition?: string };\n\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport const build = (arnObject: buildOptions): string => {\n  const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n  if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n","import { ARN } from \"@aws-sdk/util-arn-parser\";\n\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexport const DOT_PATTERN = /\\./;\nexport const S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nconst S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nconst AWS_PARTITION_SUFFIX = \"amazonaws.com\";\n\nexport interface AccessPointArn extends ARN {\n  accessPointName: string;\n}\n\nexport interface BucketHostnameParams {\n  isCustomEndpoint: boolean;\n  baseHostname: string;\n  bucketName: string;\n  clientRegion: string;\n  accelerateEndpoint?: boolean;\n  dualstackEndpoint?: boolean;\n  pathStyleEndpoint?: boolean;\n  tlsCompatible?: boolean;\n}\n\nexport interface ArnHostnameParams extends Omit<BucketHostnameParams, \"bucketName\"> {\n  bucketName: ARN;\n  clientSigningRegion?: string;\n  clientPartition?: string;\n  useArnRegion?: boolean;\n}\n\nexport const isBucketNameOptions = (\n  options: BucketHostnameParams | ArnHostnameParams\n): options is BucketHostnameParams => typeof options.bucketName === \"string\";\n\n/**\n * Get pseudo region from supplied region. For example, if supplied with `fips-us-west-2`, it returns `us-west-2`.\n * @internal\n */\nexport const getPseudoRegion = (region: string) => (isFipsRegion(region) ? region.replace(/fips-|-fips/, \"\") : region);\n\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n * @internal\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nexport const isDnsCompatibleBucketName = (bucketName: string): boolean =>\n  DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\n\nconst getRegionalSuffix = (hostname: string): [string, string] => {\n  const parts = hostname.match(S3_HOSTNAME_PATTERN)!;\n  return [parts[2], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n};\n\nexport const getSuffix = (hostname: string): [string, string] =>\n  S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\n\n/**\n * Infer region and hostname suffix from a complete hostname\n * @internal\n * @param hostname - Hostname\n * @returns [Region, Hostname suffix]\n */\nexport const getSuffixForArnEndpoint = (hostname: string): [string, string] =>\n  S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)\n    ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, \"\"), AWS_PARTITION_SUFFIX]\n    : getRegionalSuffix(hostname);\n\nexport const validateArnEndpointOptions = (options: {\n  accelerateEndpoint?: boolean;\n  tlsCompatible?: boolean;\n  pathStyleEndpoint?: boolean;\n}) => {\n  if (options.pathStyleEndpoint) {\n    throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n  }\n  if (options.accelerateEndpoint) {\n    throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n  }\n  if (!options.tlsCompatible) {\n    throw new Error(\"HTTPS is required when bucket is an ARN\");\n  }\n};\n\nexport const validateService = (service: string) => {\n  if (service !== \"s3\" && service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3' or 's3-outposts' in ARN service component\");\n  }\n};\n\nexport const validateS3Service = (service: string) => {\n  if (service !== \"s3\") {\n    throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n  }\n};\n\nexport const validateOutpostService = (service: string) => {\n  if (service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n  }\n};\n\n/**\n * Validate partition inferred from ARN is the same to `options.clientPartition`.\n * @internal\n */\nexport const validatePartition = (partition: string, options: { clientPartition: string }) => {\n  if (partition !== options.clientPartition) {\n    throw new Error(`Partition in ARN is incompatible, got \"${partition}\" but expected \"${options.clientPartition}\"`);\n  }\n};\n\n/**\n * validate region value inferred from ARN. If `options.useArnRegion` is set, it validates the region is not a FIPS\n * region. If `options.useArnRegion` is unset, it validates the region is equal to `options.clientRegion` or\n * `options.clientSigningRegion`.\n * @internal\n */\nexport const validateRegion = (\n  region: string,\n  options: {\n    useArnRegion?: boolean;\n    clientRegion: string;\n    clientSigningRegion: string;\n  }\n) => {\n  if (region === \"\") {\n    throw new Error(\"ARN region is empty\");\n  }\n  if (\n    !options.useArnRegion &&\n    !isEqualRegions(region, options.clientRegion) &&\n    !isEqualRegions(region, options.clientSigningRegion)\n  ) {\n    throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);\n  }\n  if (options.useArnRegion && isFipsRegion(region)) {\n    throw new Error(\"Endpoint does not support FIPS region\");\n  }\n};\n\nconst isFipsRegion = (region: string) => region.startsWith(\"fips-\") || region.endsWith(\"-fips\");\n\nconst isEqualRegions = (regionA: string, regionB: string) =>\n  regionA === regionB || getPseudoRegion(regionA) === regionB || regionA === getPseudoRegion(regionB);\n\n/**\n * Validate an account ID\n * @internal\n */\nexport const validateAccountId = (accountId: string) => {\n  if (!/[0-9]{12}/.exec(accountId)) {\n    throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n  }\n};\n\n/**\n * Validate a host label according to https://tools.ietf.org/html/rfc3986#section-3.2.2\n * @internal\n */\nexport const validateDNSHostLabel = (label: string, options: { tlsCompatible?: boolean } = { tlsCompatible: true }) => {\n  // reference: https://tools.ietf.org/html/rfc3986#section-3.2.2\n  if (\n    label.length >= 64 ||\n    !/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(label) ||\n    /(\\d+\\.){3}\\d+/.test(label) ||\n    /[.-]{2}/.test(label) ||\n    (options?.tlsCompatible && DOT_PATTERN.test(label))\n  ) {\n    throw new Error(`Invalid DNS label ${label}`);\n  }\n};\n\n/**\n * Validate and parse an Access Point ARN or Outposts ARN\n * @internal\n *\n * @param resource - The resource section of an ARN\n * @returns Access Point Name and optional Outpost ID.\n */\nexport const getArnResources = (\n  resource: string\n): {\n  accesspointName: string;\n  outpostId?: string;\n} => {\n  const delimiter = resource.includes(\":\") ? \":\" : \"/\";\n  const [resourceType, ...rest] = resource.split(delimiter);\n  if (resourceType === \"accesspoint\") {\n    // Parse accesspoint ARN\n    if (rest.length !== 1 || rest[0] === \"\") {\n      throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);\n    }\n    return { accesspointName: rest[0] };\n  } else if (resourceType === \"outpost\") {\n    // Parse outpost ARN\n    if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n      throw new Error(\n        `Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`\n      );\n    }\n    const [outpostId, _, accesspointName] = rest;\n    return { outpostId, accesspointName };\n  } else {\n    throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);\n  }\n};\n\n/**\n * Throw if dual stack configuration is set to true.\n * @internal\n */\nexport const validateNoDualstack = (dualstackEndpoint: boolean) => {\n  if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with Outpost\");\n};\n\n/**\n * Validate region is not appended or prepended with a `fips-`\n * @internal\n */\nexport const validateNoFIPS = (region: string) => {\n  if (isFipsRegion(region ?? \"\")) throw new Error(`FIPS region is not supported with Outpost, got ${region}`);\n};\n","import {\n  ArnHostnameParams,\n  BucketHostnameParams,\n  DOT_PATTERN,\n  getArnResources,\n  getSuffix,\n  getSuffixForArnEndpoint,\n  isBucketNameOptions,\n  isDnsCompatibleBucketName,\n  validateAccountId,\n  validateArnEndpointOptions,\n  validateDNSHostLabel,\n  validateNoDualstack,\n  validateNoFIPS,\n  validateOutpostService,\n  validatePartition,\n  validateRegion,\n  validateS3Service,\n  validateService,\n} from \"./bucketHostnameUtils\";\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n  signingRegion?: string;\n  signingService?: string;\n}\n\nexport const bucketHostname = (options: BucketHostnameParams | ArnHostnameParams): BucketHostname => {\n  const { isCustomEndpoint, baseHostname, dualstackEndpoint, accelerateEndpoint } = options;\n\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n\n  return isBucketNameOptions(options)\n    ? // Construct endpoint when bucketName is a string referring to a bucket name\n      getEndpointFromBucketName({ ...options, isCustomEndpoint })\n    : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n      getEndpointFromArn({ ...options, isCustomEndpoint });\n};\n\nconst getEndpointFromArn = (options: ArnHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const { isCustomEndpoint, baseHostname } = options;\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint\n    ? [options.clientRegion, baseHostname]\n    : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n      getSuffixForArnEndpoint(baseHostname);\n\n  const {\n    pathStyleEndpoint,\n    dualstackEndpoint = false,\n    accelerateEndpoint = false,\n    tlsCompatible = true,\n    useArnRegion,\n    bucketName,\n    clientPartition = \"aws\",\n    clientSigningRegion = clientRegion,\n  } = options;\n\n  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n\n  // Validate and parse the ARN supplied as a bucket name\n  const { service, partition, accountId, region, resource } = bucketName;\n  validateService(service);\n  validatePartition(partition, { clientPartition });\n  validateAccountId(accountId);\n  validateRegion(region, { useArnRegion, clientRegion, clientSigningRegion });\n  const { accesspointName, outpostId } = getArnResources(resource);\n  validateDNSHostLabel(`${accesspointName}-${accountId}`, { tlsCompatible });\n\n  const endpointRegion = useArnRegion ? region : clientRegion;\n  const signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, { tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    const hostnamePrefix = `${accesspointName}-${accountId}.${outpostId}`;\n    return {\n      bucketEndpoint: true,\n      hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n      signingRegion,\n      signingService: \"s3-outposts\",\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  const hostnamePrefix = `${accesspointName}-${accountId}`;\n  return {\n    bucketEndpoint: true,\n    hostname: `${hostnamePrefix}${\n      isCustomEndpoint ? \"\" : `.s3-accesspoint${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`\n    }.${hostnameSuffix}`,\n    signingRegion,\n  };\n};\n\nconst getEndpointFromBucketName = ({\n  accelerateEndpoint = false,\n  clientRegion: region,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true,\n  isCustomEndpoint = false,\n}: BucketHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`,\n  };\n};\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion: clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = getPseudoRegion(await options.region());\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true,\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\n/**\n * @internal\n */\nexport function validateBucketNameMiddleware(): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const {\n      input: { Bucket },\n    } = args;\n    if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n      err.name = \"InvalidBucketName\";\n      throw err;\n    }\n    return next({ ...args });\n  };\n}\n\n/**\n * @internal\n */\nexport const validateBucketNameMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getValidateBucketNamePlugin = (unused: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n  },\n});\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n  Provider,\n} from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  region: Provider<string>;\n  isCustomEndpoint: boolean;\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddleware = (config: PreviouslyResolved): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { request } = args;\n  if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return next({ ...args });\n  if (request.hostname === \"s3.amazonaws.com\") {\n    request.hostname = \"s3.us-east-1.amazonaws.com\";\n  } else if (\"aws-global\" === (await config.region())) {\n    request.hostname = \"s3.amazonaws.com\";\n  }\n  return next({ ...args });\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\nexport const getUseRegionalEndpointPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n  },\n});\n","import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { DeserializeMiddleware, Encoder, Pluggable, RelativeMiddlewareOptions, StreamCollector } from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  streamCollector: StreamCollector;\n  utf8Encoder: Encoder;\n};\n\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\nexport const throw200ExceptionsMiddleware = (config: PreviouslyResolved): DeserializeMiddleware<any, any> => (\n  next\n) => async (args) => {\n  const result = await next(args);\n  const { response } = result;\n  if (!HttpResponse.isInstance(response)) return result;\n  const { statusCode, body } = response;\n  if (statusCode < 200 && statusCode >= 300) return result;\n\n  // Throw 2XX response that's either an error or has empty body.\n  const bodyBytes = await collectBody(body, config);\n  const bodyString = await collectBodyString(bodyBytes, config);\n  if (bodyBytes.length === 0) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyString && bodyString.match(\"<Error>\")) {\n    // Set the error code to 4XX so that error deserializer can parse them\n    response.statusCode = 400;\n  }\n\n  // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n  // So that the deserializer can consume the body as normal.\n  response.body = bodyBytes;\n  return result;\n};\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: PreviouslyResolved): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: PreviouslyResolved): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\n/**\n * @internal\n */\nexport const throw200ExceptionsMiddlewareOptions: RelativeMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true,\n};\n\n/**\n *\n * @internal\n */\nexport const getThrow200ExceptionsPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  },\n});\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n  SourceData,\n} from \"@aws-sdk/types\";\n\nimport { ResolvedSsecMiddlewareConfig } from \"./configuration\";\n\nexport function ssecMiddleware(options: ResolvedSsecMiddlewareConfig): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    let input = { ...args.input };\n    const properties = [\n      {\n        target: \"SSECustomerKey\",\n        hash: \"SSECustomerKeyMD5\",\n      },\n      {\n        target: \"CopySourceSSECustomerKey\",\n        hash: \"CopySourceSSECustomerKeyMD5\",\n      },\n    ];\n\n    for (const prop of properties) {\n      const value: SourceData | undefined = (input as any)[prop.target];\n      if (value) {\n        const valueView = ArrayBuffer.isView(value)\n          ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)\n          : typeof value === \"string\"\n          ? options.utf8Decoder(value)\n          : new Uint8Array(value);\n        const encoded = options.base64Encoder(valueView);\n        const hash = new options.md5();\n        hash.update(valueView);\n        input = {\n          ...(input as any),\n          [prop.target]: encoded,\n          [prop.hash]: options.base64Encoder(await hash.digest()),\n        };\n      }\n    }\n\n    return next({\n      ...args,\n      input,\n    });\n  };\n}\n\nexport const ssecMiddlewareOptions: InitializeHandlerOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"],\n  override: true,\n};\n\nexport const getSsecPlugin = (config: ResolvedSsecMiddlewareConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n  },\n});\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { CopyObjectOutput, CopyObjectRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlCopyObjectCommand,\n  serializeAws_restXmlCopyObjectCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getThrow200ExceptionsPlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CopyObjectCommandInput = CopyObjectRequest;\nexport type CopyObjectCommandOutput = CopyObjectOutput & __MetadataBearer;\n\n/**\n * <p>Creates a copy of an object that is already stored in Amazon S3.</p>\n *          <note>\n *             <p>You can store individual objects of up to 5 TB in Amazon S3. You create a copy of your\n *             object up to 5 GB in size in a single atomic operation using this API. However, to copy\n *             an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API.\n *             For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html\">Copy Object Using the REST Multipart Upload API</a>.</p>\n *          </note>\n *          <p>All copy requests must be authenticated. Additionally, you must have\n *             <i>read</i> access to the source object and <i>write</i>\n *          access to the destination bucket. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">REST Authentication</a>. Both the Region\n *          that you want to copy the object from and the Region that you want to copy the object to\n *          must be enabled for your account.</p>\n *          <p>A copy request might return an error when Amazon S3 receives the copy request or while Amazon S3\n *          is copying the files. If the error occurs before the copy operation starts, you receive a\n *          standard Amazon S3 error. If the error occurs during the copy operation, the error response is\n *          embedded in the <code>200 OK</code> response. This means that a <code>200 OK</code>\n *          response can contain either a success or an error. Design your application to parse the\n *          contents of the response and handle it appropriately.</p>\n *          <p>If the copy is successful, you receive a response with information about the copied\n *          object.</p>\n *          <note>\n *             <p>If the request is an HTTP 1.1 request, the response is chunk encoded. If it were not,\n *             it would not contain the content-length, and you would need to read the entire\n *             body.</p>\n *          </note>\n *          <p>The copy request charge is based on the storage class and Region that you specify for\n *          the destination object. For pricing information, see <a href=\"https://aws.amazon.com/s3/pricing/\">Amazon S3 pricing</a>.</p>\n *          <important>\n *             <p>Amazon S3 transfer acceleration does not support cross-Region copies. If you request a\n *             cross-Region copy using a transfer acceleration endpoint, you get a 400 <code>Bad\n *                Request</code> error. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\">Transfer Acceleration</a>.</p>\n *          </important>\n *          <p>\n *             <b>Metadata</b>\n *          </p>\n *          <p>When copying an object, you can preserve all metadata (default) or specify new metadata.\n *          However, the ACL is not preserved and is set to private for the user making the request. To\n *          override the default ACL setting, specify a new ACL when generating a copy request. For\n *          more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html\">Using ACLs</a>. </p>\n *          <p>To specify whether you want the object metadata copied from the source object or\n *          replaced with metadata provided in the request, you can optionally add the\n *             <code>x-amz-metadata-directive</code> header. When you grant permissions, you can use\n *          the <code>s3:x-amz-metadata-directive</code> condition key to enforce certain metadata\n *          behavior when objects are uploaded. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html\">Specifying Conditions in a\n *             Policy</a> in the <i>Amazon S3 Developer Guide</i>. For a complete list of\n *          Amazon S3-specific condition keys, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/list_amazons3.html\">Actions, Resources, and Condition Keys for\n *             Amazon S3</a>.</p>\n *          <p>\n *             <b>\n *                <code>x-amz-copy-source-if</code> Headers</b>\n *          </p>\n *          <p>To only copy an object under certain conditions, such as whether the <code>Etag</code>\n *          matches or whether the object was modified before or after a specified date, use the\n *          following request parameters:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-match</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-none-match</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-unmodified-since</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-modified-since</code>\n *                </p>\n *             </li>\n *          </ul>\n *          <p> If both the <code>x-amz-copy-source-if-match</code> and\n *             <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the request\n *          and evaluate as follows, Amazon S3 returns <code>200 OK</code> and copies the data:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-match</code> condition evaluates to true</p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to\n *                false</p>\n *             </li>\n *          </ul>\n *\n *          <p>If both the <code>x-amz-copy-source-if-none-match</code> and\n *             <code>x-amz-copy-source-if-modified-since</code> headers are present in the request and\n *          evaluate as follows, Amazon S3 returns the <code>412 Precondition Failed</code> response\n *          code:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-none-match</code> condition evaluates to false</p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>x-amz-copy-source-if-modified-since</code> condition evaluates to\n *                true</p>\n *             </li>\n *          </ul>\n *\n *          <note>\n *             <p>All headers with the <code>x-amz-</code> prefix, including\n *                <code>x-amz-copy-source</code>, must be signed.</p>\n *          </note>\n *          <p>\n *             <b>Server-side encryption</b>\n *          </p>\n *          <p>When you perform a CopyObject operation, you can optionally use the appropriate encryption-related headers to encrypt the object using server-side encryption with AWS managed encryption keys (SSE-S3 or SSE-KMS) or a customer-provided encryption key. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. For more information about server-side encryption, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\">Using\n *          Server-Side Encryption</a>.</p>\n *          <p>If a target object uses SSE-KMS, you can enable an S3 Bucket Key for the object. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html\">Amazon S3 Bucket Keys</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *          <p>\n *             <b>Access Control List (ACL)-Specific Request\n *          Headers</b>\n *          </p>\n *          <p>When copying an object, you can optionally use headers to grant ACL-based permissions.\n *          By default, all objects are private. Only the owner has full access control. When adding a\n *          new object, you can grant permissions to individual AWS accounts or to predefined groups\n *          defined by Amazon S3. These permissions are then added to the ACL on the object. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access Control List (ACL) Overview</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html\">Managing ACLs Using the REST\n *             API</a>. </p>\n *\n *          <p>\n *             <b>Storage Class Options</b>\n *          </p>\n *          <p>You can use the <code>CopyObject</code> operation to change the storage class of an\n *          object that is already stored in Amazon S3 using the <code>StorageClass</code> parameter. For\n *          more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage\n *             Classes</a> in the <i>Amazon S3 Service Developer Guide</i>.</p>\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>By default, <code>x-amz-copy-source</code> identifies the current version of an object\n *          to copy. If the current version is a delete marker, Amazon S3 behaves as if the object was\n *          deleted. To copy a different version, use the <code>versionId</code> subresource.</p>\n *          <p>If you enable versioning on the target bucket, Amazon S3 generates a unique version ID for\n *          the object being copied. This version ID is different from the version ID of the source\n *          object. Amazon S3 returns the version ID of the copied object in the\n *             <code>x-amz-version-id</code> response header in the response.</p>\n *          <p>If you do not enable versioning or suspend it on the target bucket, the version ID that\n *          Amazon S3 generates is always null.</p>\n *          <p>If the source object's storage class is GLACIER, you must restore a copy of this object\n *          before you can use it as a source object for the copy operation. For more information, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html\">RestoreObject</a>.</p>\n *          <p>The following operations are related to <code>CopyObject</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\">PutObject</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\">GetObject</a>\n *                </p>\n *             </li>\n *          </ul>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html\">Copying\n *             Objects</a>.</p>\n */\nexport class CopyObjectCommand extends $Command<\n  CopyObjectCommandInput,\n  CopyObjectCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CopyObjectCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CopyObjectCommandInput, CopyObjectCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"CopyObjectCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CopyObjectRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CopyObjectOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CopyObjectCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlCopyObjectCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CopyObjectCommandOutput> {\n    return deserializeAws_restXmlCopyObjectCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { GetObjectOutput, GetObjectRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlGetObjectCommand, serializeAws_restXmlGetObjectCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetObjectCommandInput = GetObjectRequest;\nexport type GetObjectCommandOutput = GetObjectOutput & __MetadataBearer;\n\n/**\n * <p>Retrieves objects from Amazon S3. To use <code>GET</code>, you must have <code>READ</code>\n *          access to the object. If you grant <code>READ</code> access to the anonymous user, you can\n *          return the object without using an authorization header.</p>\n *\n *          <p>An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer\n *          file system. You can, however, create a logical hierarchy by using object key names that\n *          imply a folder structure. For example, instead of naming an object <code>sample.jpg</code>,\n *          you can name it <code>photos/2006/February/sample.jpg</code>.</p>\n *\n *          <p>To get an object from such a logical hierarchy, specify the full key name for the object\n *          in the <code>GET</code> operation. For a virtual hosted-style request example, if you have\n *          the object <code>photos/2006/February/sample.jpg</code>, specify the resource as\n *             <code>/photos/2006/February/sample.jpg</code>. For a path-style request example, if you\n *          have the object <code>photos/2006/February/sample.jpg</code> in the bucket named\n *             <code>examplebucket</code>, specify the resource as\n *             <code>/examplebucket/photos/2006/February/sample.jpg</code>. For more information about\n *          request types, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket\">HTTP Host Header Bucket Specification</a>.</p>\n *\n *          <p>To distribute large files to many people, you can save bandwidth costs by using\n *          BitTorrent. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html\">Amazon S3\n *             Torrent</a>. For more information about returning the ACL of an object, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html\">GetObjectAcl</a>.</p>\n *\n *          <p>If the object you are retrieving is stored in the S3 Glacier or\n *          S3 Glacier Deep Archive storage class, or S3 Intelligent-Tiering Archive or\n *          S3 Intelligent-Tiering Deep Archive tiers, before you can retrieve the object you must first restore a\n *          copy using <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html\">RestoreObject</a>. Otherwise, this operation returns an\n *             <code>InvalidObjectStateError</code> error. For information about restoring archived\n *          objects, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html\">Restoring Archived\n *             Objects</a>.</p>\n *\n *          <p>Encryption request headers, like <code>x-amz-server-side-encryption</code>, should not\n *          be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS\n *          KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your\n *          object does use these types of keys, you’ll get an HTTP 400 BadRequest error.</p>\n *          <p>If you encrypt an object by using server-side encryption with customer-provided\n *          encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object,\n *          you must use the following headers:</p>\n *          <ul>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-algorithm</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *             </li>\n *          </ul>\n *          <p>For more information about SSE-C, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\">Server-Side Encryption (Using\n *             Customer-Provided Encryption Keys)</a>.</p>\n *\n *          <p>Assuming you have permission to read object tags (permission for the\n *             <code>s3:GetObjectVersionTagging</code> action), the response also returns the\n *             <code>x-amz-tagging-count</code> header that provides the count of number of tags\n *          associated with the object. You can use <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging</a> to retrieve\n *          the tag set associated with an object.</p>\n *\n *          <p>\n *             <b>Permissions</b>\n *          </p>\n *          <p>You need the <code>s3:GetObject</code> permission for this operation. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html\">Specifying Permissions\n *             in a Policy</a>. If the object you request does not exist, the error Amazon S3 returns\n *          depends on whether you also have the <code>s3:ListBucket</code> permission.</p>\n *          <ul>\n *             <li>\n *                <p>If you have the <code>s3:ListBucket</code> permission on the bucket, Amazon S3 will\n *                return an HTTP status code 404 (\"no such key\") error.</p>\n *             </li>\n *             <li>\n *                <p>If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3 will return an\n *                HTTP status code 403 (\"access denied\") error.</p>\n *             </li>\n *          </ul>\n *\n *\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>By default, the GET operation returns the current version of an object. To return a\n *          different version, use the <code>versionId</code> subresource.</p>\n *\n *          <note>\n *             <p>If the current version of the object is a delete marker, Amazon S3 behaves as if the\n *             object was deleted and includes <code>x-amz-delete-marker: true</code> in the\n *             response.</p>\n *          </note>\n *\n *\n *          <p>For more information about versioning, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketVersioning.html\">PutBucketVersioning</a>. </p>\n *\n *          <p>\n *             <b>Overriding Response Header Values</b>\n *          </p>\n *          <p>There are times when you want to override certain response header values in a GET\n *          response. For example, you might override the Content-Disposition response header value in\n *          your GET request.</p>\n *\n *          <p>You can override values for a set of response headers using the following query\n *          parameters. These response header values are sent only on a successful request, that is,\n *          when status code 200 OK is returned. The set of headers you can override using these\n *          parameters is a subset of the headers that Amazon S3 accepts when you create an object. The\n *          response headers that you can override for the GET response are <code>Content-Type</code>,\n *             <code>Content-Language</code>, <code>Expires</code>, <code>Cache-Control</code>,\n *             <code>Content-Disposition</code>, and <code>Content-Encoding</code>. To override these\n *          header values in the GET response, you use the following request parameters.</p>\n *\n *          <note>\n *             <p>You must sign the request, either using an Authorization header or a presigned URL,\n *             when using these parameters. They cannot be used with an unsigned (anonymous)\n *             request.</p>\n *          </note>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>response-content-type</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>response-content-language</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>response-expires</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>response-cache-control</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>response-content-disposition</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>response-content-encoding</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>\n *             <b>Additional Considerations about Request Headers</b>\n *          </p>\n *\n *          <p>If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code> headers are\n *          present in the request as follows: <code>If-Match</code> condition evaluates to\n *             <code>true</code>, and; <code>If-Unmodified-Since</code> condition evaluates to\n *             <code>false</code>; then, S3 returns 200 OK and the data requested. </p>\n *\n *          <p>If both of the <code>If-None-Match</code> and <code>If-Modified-Since</code> headers are\n *          present in the request as follows:<code> If-None-Match</code> condition evaluates to\n *             <code>false</code>, and; <code>If-Modified-Since</code> condition evaluates to\n *             <code>true</code>; then, S3 returns 304 Not Modified response code.</p>\n *\n *          <p>For more information about conditional requests, see <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>.</p>\n *\n *          <p>The following operations are related to <code>GetObject</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html\">ListBuckets</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html\">GetObjectAcl</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class GetObjectCommand extends $Command<GetObjectCommandInput, GetObjectCommandOutput, S3ClientResolvedConfig> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetObjectCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetObjectCommandInput, GetObjectCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"GetObjectCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetObjectRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetObjectOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetObjectCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlGetObjectCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetObjectCommandOutput> {\n    return deserializeAws_restXmlGetObjectCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { DeleteObjectOutput, DeleteObjectRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlDeleteObjectCommand,\n  serializeAws_restXmlDeleteObjectCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DeleteObjectCommandInput = DeleteObjectRequest;\nexport type DeleteObjectCommandOutput = DeleteObjectOutput & __MetadataBearer;\n\n/**\n * <p>Removes the null version (if there is one) of an object and inserts a delete marker,\n *          which becomes the latest version of the object. If there isn't a null version, Amazon S3 does\n *          not remove any objects.</p>\n *\n *          <p>To remove a specific version, you must be the bucket owner and you must use the version\n *          Id subresource. Using this subresource permanently deletes the version. If the object\n *          deleted is a delete marker, Amazon S3 sets the response header,\n *          <code>x-amz-delete-marker</code>, to true. </p>\n *\n *          <p>If the object you want to delete is in a bucket where the bucket versioning\n *          configuration is MFA Delete enabled, you must include the <code>x-amz-mfa</code> request\n *          header in the DELETE <code>versionId</code> request. Requests that include\n *             <code>x-amz-mfa</code> must use HTTPS. </p>\n *\n *          <p> For more information about MFA Delete, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html\">Using MFA Delete</a>. To see sample requests that use versioning, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete\">Sample Request</a>. </p>\n *\n *          <p>You can delete objects by explicitly calling the DELETE Object API or configure its\n *          lifecycle (<a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html\">PutBucketLifecycle</a>) to\n *          enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or\n *          deleting objects from your bucket, you must deny them the <code>s3:DeleteObject</code>,\n *             <code>s3:DeleteObjectVersion</code>, and <code>s3:PutLifeCycleConfiguration</code>\n *          actions. </p>\n *\n *          <p>The following operation is related to <code>DeleteObject</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\">PutObject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class DeleteObjectCommand extends $Command<\n  DeleteObjectCommandInput,\n  DeleteObjectCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DeleteObjectCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DeleteObjectCommandInput, DeleteObjectCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"DeleteObjectCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DeleteObjectRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DeleteObjectOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DeleteObjectCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlDeleteObjectCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DeleteObjectCommandOutput> {\n    return deserializeAws_restXmlDeleteObjectCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { ListObjectsV2Output, ListObjectsV2Request } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlListObjectsV2Command,\n  serializeAws_restXmlListObjectsV2Command,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type ListObjectsV2CommandInput = ListObjectsV2Request;\nexport type ListObjectsV2CommandOutput = ListObjectsV2Output & __MetadataBearer;\n\n/**\n * <p>Returns some or all (up to 1,000) of the objects in a bucket. You can use the request\n *          parameters as selection criteria to return a subset of the objects in a bucket. A <code>200\n *             OK</code> response can contain valid or invalid XML. Make sure to design your\n *          application to parse the contents of the response and handle it appropriately.</p>\n *\n *          <p>To use this operation, you must have READ access to the bucket.</p>\n *\n *          <p>To use this operation in an AWS Identity and Access Management (IAM) policy, you must\n *          have permissions to perform the <code>s3:ListBucket</code> action. The bucket owner has\n *          this permission by default and can grant this permission to others. For more information\n *          about permissions, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources\">Permissions Related to Bucket Subresource Operations</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html\">Managing Access Permissions to Your Amazon S3\n *             Resources</a>.</p>\n *          <important>\n *             <p>This section describes the latest revision of the API. We recommend that you use this\n *             revised API for application development. For backward compatibility, Amazon S3 continues to\n *             support the prior version of this API, <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html\">ListObjects</a>.</p>\n *          </important>\n *\n *          <p>To get a list of your buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html\">ListBuckets</a>.</p>\n *\n *          <p>The following operations are related to <code>ListObjectsV2</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\">GetObject</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\">PutObject</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html\">CreateBucket</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class ListObjectsV2Command extends $Command<\n  ListObjectsV2CommandInput,\n  ListObjectsV2CommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: ListObjectsV2CommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<ListObjectsV2CommandInput, ListObjectsV2CommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"ListObjectsV2Command\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: ListObjectsV2Request.filterSensitiveLog,\n      outputFilterSensitiveLog: ListObjectsV2Output.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: ListObjectsV2CommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlListObjectsV2Command(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<ListObjectsV2CommandOutput> {\n    return deserializeAws_restXmlListObjectsV2Command(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HttpRequest } from \"@aws-sdk/types\";\n\nexport function formatUrl(request: Omit<HttpRequest, \"headers\" | \"method\">): string {\n  const { port, query } = request;\n  let { protocol, path, hostname } = request;\n  if (protocol && protocol.substr(-1) !== \":\") {\n    protocol += \":\";\n  }\n  if (port) {\n    hostname += `:${port}`;\n  }\n  if (path && path.charAt(0) !== \"/\") {\n    path = `/${path}`;\n  }\n  let queryString = query ? buildQueryString(query) : \"\";\n  if (queryString && queryString[0] !== \"?\") {\n    queryString = `?${queryString}`;\n  }\n  return `${protocol}//${hostname}${path}${queryString}`;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Client, Command } from \"@aws-sdk/smithy-client\";\nimport { BuildMiddleware, HttpRequest, MetadataBearer } from \"@aws-sdk/types\";\n\nexport async function createRequest<\n  InputTypesUnion extends object,\n  InputType extends InputTypesUnion,\n  OutputType extends MetadataBearer = MetadataBearer\n>(\n  client: Client<any, InputTypesUnion, MetadataBearer, any>,\n  command: Command<InputType, OutputType, any, InputTypesUnion, MetadataBearer>\n): Promise<HttpRequest> {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const interceptMiddleware: BuildMiddleware<InputType, OutputType> = (next) => async (args) => {\n    return { output: { request: args.request } as any, response: undefined };\n  };\n  const clientStack = client.middlewareStack.clone();\n\n  // @ts-ignore: add middleware to the last of 'build' step\n  clientStack.add(interceptMiddleware, {\n    step: \"build\",\n    priority: \"low\",\n  });\n\n  const handler = command.resolveMiddleware(clientStack, client.config, undefined);\n\n  // @ts-ignore\n  return await handler(command).then((output) => output.output.request);\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum StorageErrorStrings {\n\tNO_CREDENTIALS = 'No credentials',\n\tNO_SRC_KEY = 'source param should be an object with the property \"key\" with value of type string',\n\tNO_DEST_KEY = 'destination param should be an object with the property \"key\" with value of type string',\n\tINVALID_BLOB = 'Object must be an instance of Blob',\n}\n\nexport enum AWSS3ProviderMultipartCopierErrors {\n\tCLEANUP_FAILED = 'Multipart copy clean up failed',\n\tNO_OBJECT_FOUND = 'Object does not exist',\n\tINVALID_QUEUESIZE = 'Queue size must be a positive number',\n\tNO_COPYSOURCE = 'You must specify a copy source',\n\tMAX_NUM_PARTS_EXCEEDED = 'Only a maximum of 10000 parts are allowed',\n}\n\nexport enum AWSS3ProviderUploadErrorStrings {\n\tUPLOAD_PAUSED_MESSAGE = 'paused',\n}\n","import { SignatureV4, SignatureV4CryptoInit, SignatureV4Init } from \"@aws-sdk/signature-v4\";\nimport { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options,\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    { unsignableHeaders = new Set(), unhoistableHeaders = new Set(), ...options }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    // S3 requires SSE headers to be signed in headers instead of query\n    // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n    Object.keys(requestToSign.headers)\n      .map((header) => header.toLowerCase())\n      .filter((header) => header.startsWith(\"x-amz-server-side-encryption\"))\n      .forEach((header) => {\n        unhoistableHeaders.add(header);\n      });\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    if (!requestToSign.headers[\"host\"]) {\n      requestToSign.headers.host = requestToSign.hostname;\n    }\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      unhoistableHeaders,\n      ...options,\n    });\n  }\n}\n","export const UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nexport const SHA256_HEADER = \"X-Amz-Content-Sha256\";\n\nexport const ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nexport const CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nexport const AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nexport const SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nexport const EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nexport const HOST_HEADER = \"host\";\nexport const ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\n","/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { HttpHandler, HttpRequest, HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios, {\n\tAxiosRequestConfig,\n\tMethod,\n\tCancelTokenSource,\n\tAxiosRequestHeaders,\n\tAxiosRequestTransformer,\n} from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nimport { FetchHttpHandlerOptions } from '@aws-sdk/fetch-http-handler';\nimport * as events from 'events';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\n\n/**\nExtending the axios interface here to make headers required, (previously, \nthey were not required on the type we were using, but our implementation\ndoes not currently account for missing headers. This worked previously, \nbecause the previous `headers` type was `any`.\n*/\ninterface AxiosTransformer extends Partial<AxiosRequestTransformer> {\n\t(data: any, headers: AxiosRequestHeaders): any;\n}\n\nconst logger = new Logger('axios-http-handler');\nexport const SEND_UPLOAD_PROGRESS_EVENT = 'sendUploadProgress';\nexport const SEND_DOWNLOAD_PROGRESS_EVENT = 'sendDownloadProgress';\n\nexport type ErrorWithResponse = {\n\tresponse: { status: number } & { [key: string]: any };\n};\n\nfunction isBlob(body: any): body is Blob {\n\treturn typeof Blob !== 'undefined' && body instanceof Blob;\n}\n\nfunction hasErrorResponse(error: any): error is ErrorWithResponse {\n\treturn (\n\t\ttypeof error !== 'undefined' &&\n\t\tObject.prototype.hasOwnProperty.call(error, 'response') &&\n\t\ttypeof error.response !== 'undefined' &&\n\t\tObject.prototype.hasOwnProperty.call(error.response, 'status') &&\n\t\ttypeof error.response.status === 'number'\n\t);\n}\n\nconst normalizeHeaders = (\n\theaders: AxiosRequestHeaders,\n\tnormalizedName: string\n) => {\n\tfor (const [k, v] of Object.entries(headers)) {\n\t\tif (\n\t\t\tk !== normalizedName &&\n\t\t\tk.toUpperCase() === normalizedName.toUpperCase()\n\t\t) {\n\t\t\theaders[normalizedName] = v;\n\t\t\tdelete headers[k];\n\t\t}\n\t}\n};\n\nexport const reactNativeRequestTransformer: AxiosTransformer[] = [\n\t(data: any, headers: AxiosRequestHeaders): any => {\n\t\tif (isBlob(data)) {\n\t\t\tnormalizeHeaders(headers, 'Content-Type');\n\t\t\tnormalizeHeaders(headers, 'Accept');\n\t\t\treturn data;\n\t\t}\n\t\t// Axios' default transformRequest is an array\n\t\treturn axios.defaults.transformRequest[0].call(null, data, headers);\n\t},\n];\n\nexport type AxiosHttpHandlerOptions = HttpHandlerOptions & {\n\tcancelTokenSource?: CancelTokenSource;\n\temitter?: events.EventEmitter;\n};\n\nexport class AxiosHttpHandler implements HttpHandler {\n\tconstructor(\n\t\tprivate readonly httpOptions: FetchHttpHandlerOptions = {},\n\t\tprivate readonly emitter?: events.EventEmitter,\n\t\tprivate readonly cancelTokenSource?: CancelTokenSource\n\t) {}\n\n\tdestroy(): void {\n\t\t// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n\t\t// browser.\n\t}\n\n\thandle(\n\t\trequest: HttpRequest,\n\t\toptions: AxiosHttpHandlerOptions\n\t): Promise<{ response: HttpResponse }> {\n\t\tconst requestTimeoutInMs = this.httpOptions.requestTimeout;\n\t\t// prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has\n\t\t// their own event emitter, without having to create s3client for every individual calls.\n\t\tconst emitter = options.emitter || this.emitter;\n\n\t\tlet path = request.path;\n\t\tif (request.query) {\n\t\t\tconst queryString = buildQueryString(request.query);\n\t\t\tif (queryString) {\n\t\t\t\tpath += `?${queryString}`;\n\t\t\t}\n\t\t}\n\n\t\tconst port = request.port;\n\t\tconst url = `${request.protocol}//${request.hostname}${\n\t\t\tport ? `:${port}` : ''\n\t\t}${path}`;\n\n\t\tconst axiosRequest: AxiosRequestConfig = {};\n\t\taxiosRequest.url = url;\n\t\taxiosRequest.method = request.method as Method;\n\t\taxiosRequest.headers = request.headers;\n\n\t\t// The host header is automatically added by the browser and adding it explicitly in the\n\t\t// axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n\t\t// This is because the host header is a forbidden header for the http client to set\n\t\t// see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n\t\t// https://fetch.spec.whatwg.org/#forbidden-header-name\n\t\t// The reason we are removing this header here instead of in the aws-sdk's client\n\t\t// middleware is that the host header is required to be in the request signature and if\n\t\t// we remove it from the middlewares, then the request fails because the header is added\n\t\t// by the browser but is absent from the signature.\n\t\tdelete axiosRequest.headers['host'];\n\n\t\tif (request.body) {\n\t\t\taxiosRequest.data = request.body;\n\t\t} else {\n\t\t\t// Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n\n\t\t\t// If the POST request body is empty but content-type header is set, axios is forcibly removing it\n\t\t\t// See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n\t\t\t// This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n\t\t\t// removing the content-type header. Link for the source code\n\t\t\t// https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n\n\t\t\tif (\n\t\t\t\taxiosRequest.headers[\n\t\t\t\t\tObject.keys(axiosRequest.headers).find(\n\t\t\t\t\t\tkey => key.toLowerCase() === 'content-type'\n\t\t\t\t\t)\n\t\t\t\t]\n\t\t\t) {\n\t\t\t\taxiosRequest.data = null;\n\t\t\t}\n\t\t}\n\t\tif (emitter) {\n\t\t\t// TODO: Unify linting rules across JS repo\n\t\t\taxiosRequest.onUploadProgress = function(event) {\n\t\t\t\temitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n\t\t\t\tlogger.debug(event);\n\t\t\t};\n\t\t\t// TODO: Unify linting rules across JS repo\n\t\t\taxiosRequest.onDownloadProgress = function(event) {\n\t\t\t\temitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n\t\t\t\tlogger.debug(event);\n\t\t\t};\n\t\t}\n\t\t// If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n\t\tif (this.cancelTokenSource) {\n\t\t\taxiosRequest.cancelToken = this.cancelTokenSource.token;\n\t\t}\n\n\t\tif (options.cancelTokenSource) {\n\t\t\taxiosRequest.cancelToken = options.cancelTokenSource.token;\n\t\t}\n\n\t\t// From gamma release, aws-sdk now expects all response type to be of blob or streams\n\t\taxiosRequest.responseType = 'blob';\n\t\t// In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n\t\t// calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes\n\t\t// Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n\t\t// to correctly handle Blob in React Native.\n\t\tif (Platform.isReactNative) {\n\t\t\taxiosRequest.transformRequest = reactNativeRequestTransformer;\n\t\t}\n\n\t\tconst raceOfPromises = [\n\t\t\taxios\n\t\t\t\t.request(axiosRequest)\n\t\t\t\t.then(response => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresponse: new HttpResponse({\n\t\t\t\t\t\t\theaders: response.headers,\n\t\t\t\t\t\t\tstatusCode: response.status,\n\t\t\t\t\t\t\tbody: response.data,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\t// Error\n\t\t\t\t\tif (\n\t\t\t\t\t\terror.message !==\n\t\t\t\t\t\tAWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tlogger.error(error.message);\n\t\t\t\t\t}\n\t\t\t\t\t// for axios' cancel error, we should re-throw it back so it's not considered an s3client error\n\t\t\t\t\t// if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line.\n\t\t\t\t\t//\n\t\t\t\t\t// for errors that does not have a 'response' object, it's very likely that it is an unexpected error for\n\t\t\t\t\t// example a disconnect. Without it we cannot meaningfully reconstruct a HttpResponse, and the AWS SDK might\n\t\t\t\t\t// consider the request successful by mistake. In this case we should also re-throw the error.\n\t\t\t\t\tif (axios.isCancel(error) || !hasErrorResponse(error)) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\t// otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other\n\t\t\t\t\t// aws sdk middleware (e.g retry, clock skew correction, error message serializing)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresponse: new HttpResponse({\n\t\t\t\t\t\t\tstatusCode: error.response.status,\n\t\t\t\t\t\t\tbody: error.response?.data,\n\t\t\t\t\t\t\theaders: error.response?.headers,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequestTimeout(requestTimeoutInMs),\n\t\t];\n\t\treturn Promise.race(raceOfPromises);\n\t}\n}\n\nfunction requestTimeout(timeoutInMs: number = 0): Promise<never> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (timeoutInMs) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst timeoutError = new Error(\n\t\t\t\t\t`Request did not complete within ${timeoutInMs} ms`\n\t\t\t\t);\n\t\t\t\ttimeoutError.name = 'TimeoutError';\n\t\t\t\treject(timeoutError);\n\t\t\t}, timeoutInMs);\n\t\t}\n\t});\n}\n","export const AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nexport const SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';\n\nexport const localTestingStorageEndpoint = 'http://localhost:20005';\n\nexport const UPLOADS_STORAGE_KEY = '__uploadInProgress';\n","import { Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL } from './StorageConstants';\n\nexport const byteLength = (x: unknown) => {\n\tif (typeof x === 'string') {\n\t\treturn x.length;\n\t} else if (isArrayBuffer(x)) {\n\t\treturn x.byteLength;\n\t} else if (isBlob(x)) {\n\t\treturn x.size;\n\t} else {\n\t\tthrow new Error('Cannot determine byte length of ' + x);\n\t}\n};\n\nexport const dispatchStorageEvent = (\n\ttrack: boolean,\n\tevent: string,\n\tattrs: any,\n\tmetrics: any,\n\tmessage: string\n): void => {\n\tif (track) {\n\t\tconst data = { attrs };\n\t\tif (metrics) {\n\t\t\tdata['metrics'] = metrics;\n\t\t}\n\t\tHub.dispatch(\n\t\t\t'storage',\n\t\t\t{\n\t\t\t\tevent,\n\t\t\t\tdata,\n\t\t\t\tmessage,\n\t\t\t},\n\t\t\t'Storage',\n\t\t\tAMPLIFY_SYMBOL\n\t\t);\n\t}\n};\n\nexport const isFile = (x: unknown): x is File => {\n\treturn typeof x !== 'undefined' && x instanceof File;\n};\n\nexport const isBlob = (x: unknown): x is Blob => {\n\treturn typeof x !== 'undefined' && x instanceof Blob;\n};\n\nconst isArrayBuffer = (x: unknown): x is ArrayBuffer => {\n\treturn typeof x !== 'undefined' && x instanceof ArrayBuffer;\n};\n","import { Int64 as IInt64 } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nexport interface Int64 extends IInt64 {}\n\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n */\nexport class Int64 {\n  constructor(readonly bytes: Uint8Array) {\n    if (bytes.byteLength !== 8) {\n      throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n    }\n  }\n\n  static fromNumber(number: number): Int64 {\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\n      throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n    }\n\n    const bytes = new Uint8Array(8);\n    for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n\n    if (number < 0) {\n      negate(bytes);\n    }\n\n    return new Int64(bytes);\n  }\n\n  /**\n   * Called implicitly by infix arithmetic operators.\n   */\n  valueOf(): number {\n    const bytes = this.bytes.slice(0);\n    const negative = bytes[0] & 0b10000000;\n    if (negative) {\n      negate(bytes);\n    }\n\n    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n  }\n\n  toString() {\n    return String(this.valueOf());\n  }\n}\n\nfunction negate(bytes: Uint8Array): void {\n  for (let i = 0; i < 8; i++) {\n    bytes[i] ^= 0xff;\n  }\n\n  for (let i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}\n","import { Decoder, Encoder, MessageHeaders, MessageHeaderValue } from \"@aws-sdk/types\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { Int64 } from \"./Int64\";\n\n/**\n * @internal\n */\nexport class HeaderMarshaller {\n  constructor(private readonly toUtf8: Encoder, private readonly fromUtf8: Decoder) {}\n\n  format(headers: MessageHeaders): Uint8Array {\n    const chunks: Array<Uint8Array> = [];\n\n    for (const headerName of Object.keys(headers)) {\n      const bytes = this.fromUtf8(headerName);\n      chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n    }\n\n    const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n    let position = 0;\n    for (const chunk of chunks) {\n      out.set(chunk, position);\n      position += chunk.byteLength;\n    }\n\n    return out;\n  }\n\n  private formatHeaderValue(header: MessageHeaderValue): Uint8Array {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? HEADER_VALUE_TYPE.boolTrue : HEADER_VALUE_TYPE.boolFalse]);\n      case \"byte\":\n        return Uint8Array.from([HEADER_VALUE_TYPE.byte, header.value]);\n      case \"short\":\n        const shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, HEADER_VALUE_TYPE.short);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case \"integer\":\n        const intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, HEADER_VALUE_TYPE.integer);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case \"long\":\n        const longBytes = new Uint8Array(9);\n        longBytes[0] = HEADER_VALUE_TYPE.long;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case \"binary\":\n        const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, HEADER_VALUE_TYPE.byteArray);\n        binView.setUint16(1, header.value.byteLength, false);\n        const binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case \"string\":\n        const utf8Bytes = this.fromUtf8(header.value);\n        const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, HEADER_VALUE_TYPE.string);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        const strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case \"timestamp\":\n        const tsBytes = new Uint8Array(9);\n        tsBytes[0] = HEADER_VALUE_TYPE.timestamp;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(`Invalid UUID received: ${header.value}`);\n        }\n\n        const uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = HEADER_VALUE_TYPE.uuid;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  }\n\n  parse(headers: DataView): MessageHeaders {\n    const out: MessageHeaders = {};\n    let position = 0;\n\n    while (position < headers.byteLength) {\n      const nameLength = headers.getUint8(position++);\n      const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n\n      switch (headers.getUint8(position++)) {\n        case HEADER_VALUE_TYPE.boolTrue:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true,\n          };\n          break;\n        case HEADER_VALUE_TYPE.boolFalse:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false,\n          };\n          break;\n        case HEADER_VALUE_TYPE.byte:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++),\n          };\n          break;\n        case HEADER_VALUE_TYPE.short:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false),\n          };\n          position += 2;\n          break;\n        case HEADER_VALUE_TYPE.integer:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false),\n          };\n          position += 4;\n          break;\n        case HEADER_VALUE_TYPE.long:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n          };\n          position += 8;\n          break;\n        case HEADER_VALUE_TYPE.byteArray:\n          const binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n          };\n          position += binaryLength;\n          break;\n        case HEADER_VALUE_TYPE.string:\n          const stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n          };\n          position += stringLength;\n          break;\n        case HEADER_VALUE_TYPE.timestamp:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n          };\n          position += 8;\n          break;\n        case HEADER_VALUE_TYPE.uuid:\n          const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(\n              uuidBytes.subarray(6, 8)\n            )}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\n          };\n          break;\n        default:\n          throw new Error(`Unrecognized header type tag`);\n      }\n    }\n\n    return out;\n  }\n}\n\nconst enum HEADER_VALUE_TYPE {\n  boolTrue = 0,\n  boolFalse,\n  byte,\n  short,\n  integer,\n  long,\n  byteArray,\n  string,\n  timestamp,\n  uuid,\n}\n\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\n\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n","import { Crc32 } from \"@aws-crypto/crc32\";\nimport { Message, MessageHeaders } from \"@aws-sdk/types\";\nimport { Decoder, Encoder } from \"@aws-sdk/types\";\n\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nexport class EventStreamMarshaller {\n  private readonly headerMarshaller: HeaderMarshaller;\n\n  constructor(toUtf8: Encoder, fromUtf8: Decoder) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  marshall({ headers: rawHeaders, body }: Message): Uint8Array {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n\n    return out;\n  }\n\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  unmarshall(message: ArrayBufferView): Message {\n    const { headers, body } = splitMessage(message);\n\n    return { headers: this.headerMarshaller.parse(headers), body };\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  formatHeaders(rawHeaders: MessageHeaders): Uint8Array {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}\n","import { Crc32 } from \"@aws-crypto/crc32\";\n\n// All prelude components are unsigned, 32-bit integers\nconst PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nconst CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @internal\n */\nexport interface MessageParts {\n  headers: DataView;\n  body: Uint8Array;\n}\n\n/**\n * @internal\n */\nexport function splitMessage({ byteLength, byteOffset, buffer }: ArrayBufferView): MessageParts {\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n\n  const view = new DataView(buffer, byteOffset, byteLength);\n\n  const messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n\n  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n\n  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`\n    );\n  }\n\n  checksummer.update(\n    new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH))\n  );\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`\n    );\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(\n      buffer,\n      byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,\n      messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)\n    ),\n  };\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export function getChunkedStream(source: AsyncIterable<Uint8Array>): AsyncIterable<Uint8Array> {\n  let currentMessageTotalLength = 0;\n  let currentMessagePendingLength = 0;\n  let currentMessage: Uint8Array | null = null;\n  let messageLengthBuffer: Uint8Array | null = null;\n  const allocateMessage = (size: number) => {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    const currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes\n  };\n\n  const iterator = async function* () {\n    const sourceIterator = source[Symbol.asyncIterator]();\n    while (true) {\n      const { value, done } = await sourceIterator.next();\n      if (done) {\n        if (!currentMessageTotalLength) {\n          return;\n        } else if (currentMessageTotalLength === currentMessagePendingLength) {\n          yield currentMessage as Uint8Array;\n        } else {\n          throw new Error(\"Truncated event message received.\");\n        }\n        return;\n      }\n\n      const chunkLength = value.length;\n      let currentOffset = 0;\n\n      while (currentOffset < chunkLength) {\n        // create new message if necessary\n        if (!currentMessage) {\n          // working on a new message, determine total length\n          const bytesRemaining = chunkLength - currentOffset;\n          // prevent edge case where total length spans 2 chunks\n          if (!messageLengthBuffer) {\n            messageLengthBuffer = new Uint8Array(4);\n          }\n          const numBytesForTotal = Math.min(\n            4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n            bytesRemaining // bytes left in chunk\n          );\n\n          messageLengthBuffer.set(\n            // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n            value.slice(currentOffset, currentOffset + numBytesForTotal),\n            currentMessagePendingLength\n          );\n\n          currentMessagePendingLength += numBytesForTotal;\n          currentOffset += numBytesForTotal;\n\n          if (currentMessagePendingLength < 4) {\n            // not enough information to create the current message\n            break;\n          }\n          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n          messageLengthBuffer = null;\n        }\n\n        // write data into current message\n        const numBytesToWrite = Math.min(\n          currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message\n          chunkLength - currentOffset // number of bytes left in the original chunk\n        );\n        currentMessage!.set(\n          // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n          value.slice(currentOffset, currentOffset + numBytesToWrite),\n          currentMessagePendingLength\n        );\n        currentMessagePendingLength += numBytesToWrite;\n        currentOffset += numBytesToWrite;\n\n        // check if a message is ready to be pushed\n        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n          // push out the message\n          yield currentMessage as Uint8Array;\n          // cleanup\n          currentMessage = null;\n          currentMessageTotalLength = 0;\n          currentMessagePendingLength = 0;\n        }\n      }\n    }\n  };\n\n  return {\n    [Symbol.asyncIterator]: iterator,\n  };\n}\n","import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Decoder, Encoder, EventStreamMarshaller as IEventStreamMarshaller, Message } from \"@aws-sdk/types\";\n\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\n\nexport interface EventStreamMarshaller extends IEventStreamMarshaller {}\n\nexport interface EventStreamMarshallerOptions {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n}\n\nexport class EventStreamMarshaller {\n  private readonly eventMarshaller: EventMarshaller;\n  private readonly utfEncoder: Encoder;\n  constructor({ utf8Encoder, utf8Decoder }: EventStreamMarshallerOptions) {\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n\n  deserialize<T>(\n    body: AsyncIterable<Uint8Array>,\n    deserializer: (input: { [event: string]: Message }) => Promise<T>\n  ): AsyncIterable<T> {\n    const chunkedStream = getChunkedStream(body);\n    const unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventMarshaller: this.eventMarshaller,\n      deserializer,\n      toUtf8: this.utfEncoder,\n    });\n    return unmarshalledStream;\n  }\n\n  serialize<T>(input: AsyncIterable<T>, serializer: (event: T) => Message): AsyncIterable<Uint8Array> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const serializedIterator = async function* () {\n      for await (const chunk of input) {\n        const payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n        yield payloadBuf;\n      }\n      // Ending frame\n      yield new Uint8Array(0);\n    };\n    return {\n      [Symbol.asyncIterator]: serializedIterator,\n    };\n  }\n}\n","import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Encoder, Message } from \"@aws-sdk/types\";\n\nexport type UnmarshalledStreamOptions<T> = {\n  eventMarshaller: EventMarshaller;\n  deserializer: (input: { [name: string]: Message }) => Promise<T>;\n  toUtf8: Encoder;\n};\n\nexport function getUnmarshalledStream<T extends { [key: string]: any }>(\n  source: AsyncIterable<Uint8Array>,\n  options: UnmarshalledStreamOptions<T>\n): AsyncIterable<T> {\n  return {\n    [Symbol.asyncIterator]: async function* () {\n      for await (const chunk of source) {\n        const message = options.eventMarshaller.unmarshall(chunk);\n        const { value: messageType } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n          // Unmodeled exception in event\n          const unmodeledError = new Error((message.headers[\":error-message\"].value as string) || \"UnknownError\");\n          unmodeledError.name = message.headers[\":error-code\"].value as string;\n          throw unmodeledError;\n        } else if (messageType === \"exception\") {\n          // For modeled exception, push it to deserializer and throw after deserializing\n          const code = message.headers[\":exception-type\"].value as string;\n          const exception = { [code]: message };\n          // Get parsed exception event in key(error code) value(structured error) pair.\n          const deserializedException = await options.deserializer(exception);\n          if (deserializedException.$unknown) {\n            //this is an unmodeled exception then try parsing it with best effort\n            const error = new Error(options.toUtf8(message.body));\n            error.name = code;\n            throw error;\n          }\n          throw deserializedException[code];\n        } else if (messageType === \"event\") {\n          const event = {\n            [message.headers[\":event-type\"].value as string]: message,\n          };\n          const deserialized = await options.deserializer(event);\n          if (deserialized.$unknown) continue;\n          yield deserialized;\n        } else {\n          throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n      }\n    },\n  };\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * A util function converting ReadableStream into an async iterable.\n * Reference: https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nexport const readableStreamtoIterable = <T>(readableStream: ReadableStream<T>): AsyncIterable<T> => ({\n  [Symbol.asyncIterator]: async function* () {\n    const reader = readableStream.getReader();\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) return;\n        yield value as T;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  },\n});\n\n/**\n * A util function converting async iterable to a ReadableStream.\n */\nexport const iterableToReadableStream = <T>(asyncIterable: AsyncIterable<T>): ReadableStream<T> => {\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    async pull(controller) {\n      const { done, value } = await iterator.next();\n      if (done) {\n        return controller.close();\n      }\n      controller.enqueue(value);\n    },\n  });\n};\n","import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@aws-sdk/eventstream-serde-universal\";\nimport { Decoder, Encoder, EventStreamMarshaller as IEventStreamMarshaller, Message } from \"@aws-sdk/types\";\n\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\n\nexport interface EventStreamMarshaller extends IEventStreamMarshaller {}\n\nexport interface EventStreamMarshallerOptions {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n}\n\n/**\n * Utility class used to serialize and deserialize event streams in\n * browsers and ReactNative.\n *\n * In browsers where ReadableStream API is available:\n * * deserialize from ReadableStream to an async iterable of output structure\n * * serialize from async iterable of input structure to ReadableStream\n * In ReactNative where only async iterable API is available:\n * * deserialize from async iterable of binaries to async iterable of output structure\n * * serialize from async iterable of input structure to async iterable of binaries\n *\n * We use ReadableStream API in browsers because of the consistency with other\n * streaming operations, where ReadableStream API is used to denote streaming data.\n * Whereas in ReactNative, ReadableStream API is not available, we use async iterable\n * for streaming data although it has lower throughput.\n */\nexport class EventStreamMarshaller {\n  private readonly eventMarshaller: EventMarshaller;\n  private readonly universalMarshaller: UniversalEventStreamMarshaller;\n  constructor({ utf8Encoder, utf8Decoder }: EventStreamMarshallerOptions) {\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.universalMarshaller = new UniversalEventStreamMarshaller({\n      utf8Decoder,\n      utf8Encoder,\n    });\n  }\n\n  deserialize<T>(\n    body: ReadableStream<Uint8Array> | AsyncIterable<Uint8Array>,\n    deserializer: (input: { [event: string]: Message }) => Promise<T>\n  ): AsyncIterable<T> {\n    const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n    return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n  }\n\n  /**\n   * Generate a stream that serialize events into stream of binary chunks;\n   *\n   * Caveat is that streaming request payload doesn't work on browser with native\n   * xhr or fetch handler currently because they don't support upload streaming.\n   * reference:\n   * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906\n   * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n   *\n   */\n  serialize<T>(input: AsyncIterable<T>, serializer: (event: T) => Message): ReadableStream | AsyncIterable<Uint8Array> {\n    const serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n    return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n  }\n}\n\nconst isReadableStream = (body: any): body is ReadableStream =>\n  typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export function blobReader(\n  blob: Blob,\n  onChunk: (chunk: Uint8Array) => void,\n  chunkSize: number = 1024 * 1024\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n\n    const size = blob.size;\n    let totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n\n    fileReader.addEventListener(\"load\", (event) => {\n      const result = <ArrayBuffer>(event.target as any).result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n\n    // kick off the read\n    read();\n  });\n}\n","import { blobReader } from \"@aws-sdk/chunked-blob-reader\";\nimport { HashConstructor, StreamHasher } from \"@aws-sdk/types\";\n\nexport const blobHasher: StreamHasher<Blob> = async function blobHasher(\n  hashCtor: HashConstructor,\n  blob: Blob\n): Promise<Uint8Array> {\n  const hash = new hashCtor();\n\n  await blobReader(blob, (chunk) => {\n    hash.update(chunk);\n  });\n\n  return hash.digest();\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @internal\n */\nexport const BLOCK_SIZE = 64;\n\n/**\n * @internal\n */\nexport const DIGEST_LENGTH = 16;\n\n/**\n * @internal\n */\nexport const INIT = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476];\n","import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\n\nimport { BLOCK_SIZE, DIGEST_LENGTH, INIT } from \"./constants\";\n\nexport class Md5 implements Hash {\n  private state = Uint32Array.from(INIT);\n  private buffer: DataView = new DataView(new ArrayBuffer(BLOCK_SIZE));\n  private bufferLength = 0;\n  private bytesHashed = 0;\n  private finished = false;\n\n  update(sourceData: SourceData): void {\n    if (isEmptyData(sourceData)) {\n      return;\n    } else if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n\n    const data = convertToBuffer(sourceData);\n\n    let position = 0;\n    let { byteLength } = data;\n    this.bytesHashed += byteLength;\n\n    while (byteLength > 0) {\n      this.buffer.setUint8(this.bufferLength++, data[position++]);\n      byteLength--;\n\n      if (this.bufferLength === BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  }\n\n  async digest(): Promise<Uint8Array> {\n    if (!this.finished) {\n      const { buffer, bufferLength: undecoratedLength, bytesHashed } = this;\n      const bitsHashed = bytesHashed * 8;\n      buffer.setUint8(this.bufferLength++, 0b10000000);\n\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n        for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {\n          buffer.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n\n      for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n        buffer.setUint8(i, 0);\n      }\n      buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);\n      buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);\n\n      this.hashBuffer();\n\n      this.finished = true;\n    }\n\n    const out = new DataView(new ArrayBuffer(DIGEST_LENGTH));\n    for (let i = 0; i < 4; i++) {\n      out.setUint32(i * 4, this.state[i], true);\n    }\n\n    return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);\n  }\n\n  private hashBuffer(): void {\n    const { buffer, state } = this;\n\n    let a = state[0],\n      b = state[1],\n      c = state[2],\n      d = state[3];\n\n    a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);\n    d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);\n    c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);\n    b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);\n    a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);\n    d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);\n    c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);\n    b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);\n    a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);\n    d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);\n    c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);\n    b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);\n    a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);\n    d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);\n    c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);\n    b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);\n\n    a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);\n    d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);\n    c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);\n    b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);\n    a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);\n    d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);\n    c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);\n    b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);\n    a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);\n    d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);\n    c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);\n    b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);\n    a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);\n    d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);\n    c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);\n    b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);\n\n    a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);\n    d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);\n    c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);\n    b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);\n    a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);\n    d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);\n    c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);\n    b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);\n    a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);\n    d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);\n    c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);\n    b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);\n    a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);\n    d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);\n    c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);\n    b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);\n\n    a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);\n    d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);\n    c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);\n    b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);\n    a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);\n    d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);\n    c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);\n    b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);\n    a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);\n    d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);\n    c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);\n    b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);\n    a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);\n    d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);\n    c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);\n    b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);\n\n    state[0] = (a + state[0]) & 0xffffffff;\n    state[1] = (b + state[1]) & 0xffffffff;\n    state[2] = (c + state[2]) & 0xffffffff;\n    state[3] = (d + state[3]) & 0xffffffff;\n  }\n}\n\nfunction cmn(q: number, a: number, b: number, x: number, s: number, t: number) {\n  a = (((a + q) & 0xffffffff) + ((x + t) & 0xffffffff)) & 0xffffffff;\n  return (((a << s) | (a >>> (32 - s))) + b) & 0xffffffff;\n}\n\nfunction ff(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return cmn((b & c) | (~b & d), a, b, x, s, t);\n}\n\nfunction gg(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\n\nfunction hh(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction ii(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nfunction isEmptyData(data: SourceData): boolean {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}\n","import { RegionInfo, RegionInfoProvider } from \"@aws-sdk/types\";\n\n// Partition default templates\nconst AWS_TEMPLATE = \"s3.{region}.amazonaws.com\";\nconst AWS_CN_TEMPLATE = \"s3.{region}.amazonaws.com.cn\";\nconst AWS_ISO_TEMPLATE = \"s3.{region}.c2s.ic.gov\";\nconst AWS_ISO_B_TEMPLATE = \"s3.{region}.sc2s.sgov.gov\";\nconst AWS_US_GOV_TEMPLATE = \"s3.{region}.amazonaws.com\";\n\n// Partition regions\nconst AWS_REGIONS = new Set([\n  \"af-south-1\",\n  \"ap-east-1\",\n  \"ap-northeast-1\",\n  \"ap-northeast-2\",\n  \"ap-south-1\",\n  \"ap-southeast-1\",\n  \"ap-southeast-2\",\n  \"ca-central-1\",\n  \"eu-central-1\",\n  \"eu-north-1\",\n  \"eu-south-1\",\n  \"eu-west-1\",\n  \"eu-west-2\",\n  \"eu-west-3\",\n  \"me-south-1\",\n  \"sa-east-1\",\n  \"us-east-1\",\n  \"us-east-2\",\n  \"us-west-1\",\n  \"us-west-2\",\n]);\nconst AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nconst AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nconst AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nconst AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\n\nexport const defaultRegionInfoProvider: RegionInfoProvider = (region: string, options?: any) => {\n  let regionInfo: RegionInfo | undefined = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"af-south-1\":\n      regionInfo = {\n        hostname: \"s3.af-south-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-east-1\":\n      regionInfo = {\n        hostname: \"s3.ap-east-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"s3.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"s3.ap-northeast-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"s3.ap-south-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"s3.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"s3.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"aws-global\":\n      regionInfo = {\n        hostname: \"s3.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\",\n      };\n      break;\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"s3.ca-central-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"cn-north-1\":\n      regionInfo = {\n        hostname: \"s3.cn-north-1.amazonaws.com.cn\",\n        partition: \"aws-cn\",\n      };\n      break;\n    case \"cn-northwest-1\":\n      regionInfo = {\n        hostname: \"s3.cn-northwest-1.amazonaws.com.cn\",\n        partition: \"aws-cn\",\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"s3.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-north-1\":\n      regionInfo = {\n        hostname: \"s3.eu-north-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-south-1\":\n      regionInfo = {\n        hostname: \"s3.eu-south-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"s3.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"s3.eu-west-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-west-3\":\n      regionInfo = {\n        hostname: \"s3.eu-west-3.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"fips-us-gov-west-1\":\n      regionInfo = {\n        hostname: \"s3-fips.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\",\n      };\n      break;\n    case \"me-south-1\":\n      regionInfo = {\n        hostname: \"s3.me-south-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"s3-external-1\":\n      regionInfo = {\n        hostname: \"s3-external-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\",\n      };\n      break;\n    case \"sa-east-1\":\n      regionInfo = {\n        hostname: \"s3.sa-east-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-east-2\":\n      regionInfo = {\n        hostname: \"s3.us-east-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-gov-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-gov-east-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n      };\n      break;\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"s3.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n      };\n      break;\n    case \"us-iso-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-iso-east-1.c2s.ic.gov\",\n        partition: \"aws-iso\",\n      };\n      break;\n    case \"us-isob-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-isob-east-1.sc2s.sgov.gov\",\n        partition: \"aws-iso-b\",\n      };\n      break;\n    case \"us-west-1\":\n      regionInfo = {\n        hostname: \"s3.us-west-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"s3.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\",\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\",\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\",\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n        };\n      }\n  }\n  return Promise.resolve({ signingService: \"s3\", ...regionInfo });\n};\n","import { defaultRegionInfoProvider } from \"./endpoints\";\nimport { Logger as __Logger } from \"@aws-sdk/types\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\n\n/**\n * @internal\n */\nexport const ClientSharedValues = {\n  apiVersion: \"2006-03-01\",\n  disableHostPrefix: false,\n  logger: {} as __Logger,\n  regionInfoProvider: defaultRegionInfoProvider,\n  serviceId: \"S3\",\n  signingEscapePath: false,\n  urlParser: parseUrl,\n  useArnRegion: false,\n};\n","import packageInfo from \"./package.json\";\n\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { eventStreamSerdeProvider } from \"@aws-sdk/eventstream-serde-browser\";\nimport { FetchHttpHandler, streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { blobHasher as streamHasher } from \"@aws-sdk/hash-blob-browser\";\nimport { invalidProvider } from \"@aws-sdk/invalid-dependency\";\nimport { Md5 } from \"@aws-sdk/md5-js\";\nimport { DEFAULT_MAX_ATTEMPTS } from \"@aws-sdk/middleware-retry\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64-browser\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-browser\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-browser\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { ClientDefaults } from \"./S3Client\";\nimport { ClientSharedValues } from \"./runtimeConfig.shared\";\n\n/**\n * @internal\n */\nexport const ClientDefaultValues: Required<ClientDefaults> = {\n  ...ClientSharedValues,\n  runtime: \"browser\",\n  base64Decoder: fromBase64,\n  base64Encoder: toBase64,\n  bodyLengthChecker: calculateBodyLength,\n  credentialDefaultProvider: (_: unknown) => () => Promise.reject(new Error(\"Credential is missing\")),\n  defaultUserAgentProvider: defaultUserAgent({\n    serviceId: ClientSharedValues.serviceId,\n    clientVersion: packageInfo.version,\n  }),\n  eventStreamSerdeProvider,\n  maxAttempts: DEFAULT_MAX_ATTEMPTS,\n  md5: Md5,\n  region: invalidProvider(\"Region is missing\"),\n  requestHandler: new FetchHttpHandler(),\n  sha256: Sha256,\n  streamCollector,\n  streamHasher,\n  utf8Decoder: fromUtf8,\n  utf8Encoder: toUtf8,\n};\n","import { Decoder, Encoder, EventSigner, EventStreamSerdeProvider, Provider } from \"@aws-sdk/types\";\n\nimport { EventStreamMarshaller } from \"./EventStreamMarshaller\";\n\n/** browser event stream serde utils provider */\nexport const eventStreamSerdeProvider: EventStreamSerdeProvider = (options: {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n  eventSigner: EventSigner | Provider<EventSigner>;\n}) => new EventStreamMarshaller(options);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { EventStreamMarshaller, EventStreamSerdeProvider } from \"@aws-sdk/types\";\n\nexport interface EventStreamSerdeInputConfig {}\n\nexport interface EventStreamSerdeResolvedConfig {\n  eventStreamMarshaller: EventStreamMarshaller;\n}\n\ninterface PreviouslyResolved {\n  eventStreamSerdeProvider: EventStreamSerdeProvider;\n}\n\nexport const resolveEventStreamSerdeConfig = <T>(\n  input: T & PreviouslyResolved & EventStreamSerdeInputConfig\n): T & EventStreamSerdeResolvedConfig => ({\n  ...input,\n  eventStreamMarshaller: input.eventStreamSerdeProvider(input),\n});\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(options: PreviouslyResolved): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\",\n      };\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true,\n};\n\nexport const getAddExpectContinuePlugin = (options: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n  },\n});\n","import {\n  Encryption,\n  GlacierJobParameters,\n  Grant,\n  ObjectCannedACL,\n  RequestCharged,\n  RequestPayer,\n  ServerSideEncryption,\n  StorageClass,\n  Tagging,\n  Tier,\n} from \"./models_0\";\nimport { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { Readable } from \"stream\";\n\n/**\n * <p>A metadata key-value pair to store with an object.</p>\n */\nexport interface MetadataEntry {\n  /**\n   * <p>Name of the Object.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>Value of the Object.</p>\n   */\n  Value?: string;\n}\n\nexport namespace MetadataEntry {\n  export const filterSensitiveLog = (obj: MetadataEntry): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes an Amazon S3 location that will receive the results of the restore request.</p>\n */\nexport interface S3Location {\n  /**\n   * <p>The name of the bucket where the restore results will be placed.</p>\n   */\n  BucketName: string | undefined;\n\n  /**\n   * <p>The prefix that is prepended to the restore results for this request.</p>\n   */\n  Prefix: string | undefined;\n\n  /**\n   * <p>Contains the type of server-side encryption used.</p>\n   */\n  Encryption?: Encryption;\n\n  /**\n   * <p>The canned ACL to apply to the restore results.</p>\n   */\n  CannedACL?: ObjectCannedACL | string;\n\n  /**\n   * <p>A list of grants that control access to the staged results.</p>\n   */\n  AccessControlList?: Grant[];\n\n  /**\n   * <p>The tag-set that is applied to the restore results.</p>\n   */\n  Tagging?: Tagging;\n\n  /**\n   * <p>A list of metadata to store with the restore results in S3.</p>\n   */\n  UserMetadata?: MetadataEntry[];\n\n  /**\n   * <p>The class of storage used to store the restore results.</p>\n   */\n  StorageClass?: StorageClass | string;\n}\n\nexport namespace S3Location {\n  export const filterSensitiveLog = (obj: S3Location): any => ({\n    ...obj,\n    ...(obj.Encryption && { Encryption: Encryption.filterSensitiveLog(obj.Encryption) }),\n  });\n}\n\n/**\n * <p>Describes the location where the restore job's output is stored.</p>\n */\nexport interface OutputLocation {\n  /**\n   * <p>Describes an S3 location that will receive the results of the restore request.</p>\n   */\n  S3?: S3Location;\n}\n\nexport namespace OutputLocation {\n  export const filterSensitiveLog = (obj: OutputLocation): any => ({\n    ...obj,\n    ...(obj.S3 && { S3: S3Location.filterSensitiveLog(obj.S3) }),\n  });\n}\n\nexport type ExpressionType = \"SQL\";\n\nexport type CompressionType = \"BZIP2\" | \"GZIP\" | \"NONE\";\n\nexport enum FileHeaderInfo {\n  IGNORE = \"IGNORE\",\n  NONE = \"NONE\",\n  USE = \"USE\",\n}\n\n/**\n * <p>Describes how an uncompressed comma-separated values (CSV)-formatted input object is\n *          formatted.</p>\n */\nexport interface CSVInput {\n  /**\n   * <p>Describes the first line of input. Valid values are:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>NONE</code>: First line is not a header.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>IGNORE</code>: First line is a header, but you can't use the header values\n   *                to indicate the column in an expression. You can use column position (such as _1, _2,\n   *                …) to indicate the column (<code>SELECT s._1 FROM OBJECT s</code>).</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>Use</code>: First line is a header, and you can use the header value to\n   *                identify a column in an expression (<code>SELECT \"name\" FROM OBJECT</code>). </p>\n   *             </li>\n   *          </ul>\n   */\n  FileHeaderInfo?: FileHeaderInfo | string;\n\n  /**\n   * <p>A single character used to indicate that a row should be ignored when the character is\n   *          present at the start of that row. You can specify any character to indicate a comment\n   *          line.</p>\n   */\n  Comments?: string;\n\n  /**\n   * <p>A single character used for escaping the quotation mark character inside an already\n   *          escaped value. For example, the value \"\"\" a , b \"\"\" is parsed as \" a , b \".</p>\n   */\n  QuoteEscapeCharacter?: string;\n\n  /**\n   * <p>A single character used to separate individual records in the input. Instead of the\n   *          default value, you can specify an arbitrary delimiter.</p>\n   */\n  RecordDelimiter?: string;\n\n  /**\n   * <p>A single character used to separate individual fields in a record. You can specify an\n   *          arbitrary delimiter.</p>\n   */\n  FieldDelimiter?: string;\n\n  /**\n   * <p>A single character used for escaping when the field delimiter is part of the value. For\n   *          example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks,\n   *          as follows: <code>\" a , b \"</code>.</p>\n   *          <p>Type: String</p>\n   *          <p>Default: <code>\"</code>\n   *          </p>\n   *          <p>Ancestors: <code>CSV</code>\n   *          </p>\n   */\n  QuoteCharacter?: string;\n\n  /**\n   * <p>Specifies that CSV field values may contain quoted record delimiters and such records\n   *          should be allowed. Default value is FALSE. Setting this value to TRUE may lower\n   *          performance.</p>\n   */\n  AllowQuotedRecordDelimiter?: boolean;\n}\n\nexport namespace CSVInput {\n  export const filterSensitiveLog = (obj: CSVInput): any => ({\n    ...obj,\n  });\n}\n\nexport enum JSONType {\n  DOCUMENT = \"DOCUMENT\",\n  LINES = \"LINES\",\n}\n\n/**\n * <p>Specifies JSON as object's input serialization format.</p>\n */\nexport interface JSONInput {\n  /**\n   * <p>The type of JSON. Valid values: Document, Lines.</p>\n   */\n  Type?: JSONType | string;\n}\n\nexport namespace JSONInput {\n  export const filterSensitiveLog = (obj: JSONInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for Parquet.</p>\n */\nexport interface ParquetInput {}\n\nexport namespace ParquetInput {\n  export const filterSensitiveLog = (obj: ParquetInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the serialization format of the object.</p>\n */\nexport interface InputSerialization {\n  /**\n   * <p>Describes the serialization of a CSV-encoded object.</p>\n   */\n  CSV?: CSVInput;\n\n  /**\n   * <p>Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value:\n   *          NONE.</p>\n   */\n  CompressionType?: CompressionType | string;\n\n  /**\n   * <p>Specifies JSON as object's input serialization format.</p>\n   */\n  JSON?: JSONInput;\n\n  /**\n   * <p>Specifies Parquet as object's input serialization format.</p>\n   */\n  Parquet?: ParquetInput;\n}\n\nexport namespace InputSerialization {\n  export const filterSensitiveLog = (obj: InputSerialization): any => ({\n    ...obj,\n  });\n}\n\nexport enum QuoteFields {\n  ALWAYS = \"ALWAYS\",\n  ASNEEDED = \"ASNEEDED\",\n}\n\n/**\n * <p>Describes how uncompressed comma-separated values (CSV)-formatted results are\n *          formatted.</p>\n */\nexport interface CSVOutput {\n  /**\n   * <p>Indicates whether to use quotation marks around output fields. </p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ALWAYS</code>: Always use quotation marks for output fields.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ASNEEDED</code>: Use quotation marks for output fields when needed.</p>\n   *             </li>\n   *          </ul>\n   */\n  QuoteFields?: QuoteFields | string;\n\n  /**\n   * <p>The single character used for escaping the quote character inside an already escaped\n   *          value.</p>\n   */\n  QuoteEscapeCharacter?: string;\n\n  /**\n   * <p>A single character used to separate individual records in the output. Instead of the\n   *          default value, you can specify an arbitrary delimiter.</p>\n   */\n  RecordDelimiter?: string;\n\n  /**\n   * <p>The value used to separate individual fields in a record. You can specify an arbitrary\n   *          delimiter.</p>\n   */\n  FieldDelimiter?: string;\n\n  /**\n   * <p>A single character used for escaping when the field delimiter is part of the value. For\n   *          example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks,\n   *          as follows: <code>\" a , b \"</code>.</p>\n   */\n  QuoteCharacter?: string;\n}\n\nexport namespace CSVOutput {\n  export const filterSensitiveLog = (obj: CSVOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies JSON as request's output serialization format.</p>\n */\nexport interface JSONOutput {\n  /**\n   * <p>The value used to separate individual records in the output. If no value is specified,\n   *          Amazon S3 uses a newline character ('\\n').</p>\n   */\n  RecordDelimiter?: string;\n}\n\nexport namespace JSONOutput {\n  export const filterSensitiveLog = (obj: JSONOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes how results of the Select job are serialized.</p>\n */\nexport interface OutputSerialization {\n  /**\n   * <p>Describes the serialization of CSV-encoded Select results.</p>\n   */\n  CSV?: CSVOutput;\n\n  /**\n   * <p>Specifies JSON as request's output serialization format.</p>\n   */\n  JSON?: JSONOutput;\n}\n\nexport namespace OutputSerialization {\n  export const filterSensitiveLog = (obj: OutputSerialization): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the parameters for Select job types.</p>\n */\nexport interface SelectParameters {\n  /**\n   * <p>Describes the serialization format of the object.</p>\n   */\n  InputSerialization: InputSerialization | undefined;\n\n  /**\n   * <p>The type of the provided expression (for example, SQL).</p>\n   */\n  ExpressionType: ExpressionType | string | undefined;\n\n  /**\n   * <p>The expression that is used to query the object.</p>\n   */\n  Expression: string | undefined;\n\n  /**\n   * <p>Describes how the results of the Select job are serialized.</p>\n   */\n  OutputSerialization: OutputSerialization | undefined;\n}\n\nexport namespace SelectParameters {\n  export const filterSensitiveLog = (obj: SelectParameters): any => ({\n    ...obj,\n  });\n}\n\nexport enum RestoreRequestType {\n  SELECT = \"SELECT\",\n}\n\n/**\n * <p>Container for restore job parameters.</p>\n */\nexport interface RestoreRequest {\n  /**\n   * <p>Lifetime of the active copy in days. Do not use with restores that specify\n   *             <code>OutputLocation</code>.</p>\n   *          <p>The Days element is required for regular restores, and must not be provided for select\n   *          requests.</p>\n   */\n  Days?: number;\n\n  /**\n   * <p>S3 Glacier related parameters pertaining to this job. Do not use with restores that\n   *          specify <code>OutputLocation</code>.</p>\n   */\n  GlacierJobParameters?: GlacierJobParameters;\n\n  /**\n   * <p>Type of restore request.</p>\n   */\n  Type?: RestoreRequestType | string;\n\n  /**\n   * <p>Retrieval tier at which the restore will be processed.</p>\n   */\n  Tier?: Tier | string;\n\n  /**\n   * <p>The optional description for the job.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>Describes the parameters for Select job types.</p>\n   */\n  SelectParameters?: SelectParameters;\n\n  /**\n   * <p>Describes the location where the restore job's output is stored.</p>\n   */\n  OutputLocation?: OutputLocation;\n}\n\nexport namespace RestoreRequest {\n  export const filterSensitiveLog = (obj: RestoreRequest): any => ({\n    ...obj,\n    ...(obj.OutputLocation && { OutputLocation: OutputLocation.filterSensitiveLog(obj.OutputLocation) }),\n  });\n}\n\nexport interface RestoreObjectRequest {\n  /**\n   * <p>The bucket name containing the object to restore. </p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Object key for which the operation was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>VersionId used to reference a specific version of the object.</p>\n   */\n  VersionId?: string;\n\n  /**\n   * <p>Container for restore job parameters.</p>\n   */\n  RestoreRequest?: RestoreRequest;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace RestoreObjectRequest {\n  export const filterSensitiveLog = (obj: RestoreObjectRequest): any => ({\n    ...obj,\n    ...(obj.RestoreRequest && { RestoreRequest: RestoreRequest.filterSensitiveLog(obj.RestoreRequest) }),\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface ContinuationEvent {}\n\nexport namespace ContinuationEvent {\n  export const filterSensitiveLog = (obj: ContinuationEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A message that indicates the request is complete and no more messages will be sent. You\n *          should not assume that the request is complete until the client receives an\n *             <code>EndEvent</code>.</p>\n */\nexport interface EndEvent {}\n\nexport namespace EndEvent {\n  export const filterSensitiveLog = (obj: EndEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This data type contains information about progress of an operation.</p>\n */\nexport interface Progress {\n  /**\n   * <p>The current number of object bytes scanned.</p>\n   */\n  BytesScanned?: number;\n\n  /**\n   * <p>The current number of uncompressed object bytes processed.</p>\n   */\n  BytesProcessed?: number;\n\n  /**\n   * <p>The current number of bytes of records payload data returned.</p>\n   */\n  BytesReturned?: number;\n}\n\nexport namespace Progress {\n  export const filterSensitiveLog = (obj: Progress): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This data type contains information about the progress event of an operation.</p>\n */\nexport interface ProgressEvent {\n  /**\n   * <p>The Progress event details.</p>\n   */\n  Details?: Progress;\n}\n\nexport namespace ProgressEvent {\n  export const filterSensitiveLog = (obj: ProgressEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container for the records event.</p>\n */\nexport interface RecordsEvent {\n  /**\n   * <p>The byte array of partial, one or more result records.</p>\n   */\n  Payload?: Uint8Array;\n}\n\nexport namespace RecordsEvent {\n  export const filterSensitiveLog = (obj: RecordsEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the stats details.</p>\n */\nexport interface Stats {\n  /**\n   * <p>The total number of object bytes scanned.</p>\n   */\n  BytesScanned?: number;\n\n  /**\n   * <p>The total number of uncompressed object bytes processed.</p>\n   */\n  BytesProcessed?: number;\n\n  /**\n   * <p>The total number of bytes of records payload data returned.</p>\n   */\n  BytesReturned?: number;\n}\n\nexport namespace Stats {\n  export const filterSensitiveLog = (obj: Stats): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Container for the Stats Event.</p>\n */\nexport interface StatsEvent {\n  /**\n   * <p>The Stats event details.</p>\n   */\n  Details?: Stats;\n}\n\nexport namespace StatsEvent {\n  export const filterSensitiveLog = (obj: StatsEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The container for selecting objects from a content event stream.</p>\n */\nexport type SelectObjectContentEventStream =\n  | SelectObjectContentEventStream.ContMember\n  | SelectObjectContentEventStream.EndMember\n  | SelectObjectContentEventStream.ProgressMember\n  | SelectObjectContentEventStream.RecordsMember\n  | SelectObjectContentEventStream.StatsMember\n  | SelectObjectContentEventStream.$UnknownMember;\n\nexport namespace SelectObjectContentEventStream {\n  /**\n   * <p>The Records Event.</p>\n   */\n  export interface RecordsMember {\n    Records: RecordsEvent;\n    Stats?: never;\n    Progress?: never;\n    Cont?: never;\n    End?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The Stats Event.</p>\n   */\n  export interface StatsMember {\n    Records?: never;\n    Stats: StatsEvent;\n    Progress?: never;\n    Cont?: never;\n    End?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The Progress Event.</p>\n   */\n  export interface ProgressMember {\n    Records?: never;\n    Stats?: never;\n    Progress: ProgressEvent;\n    Cont?: never;\n    End?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The Continuation Event.</p>\n   */\n  export interface ContMember {\n    Records?: never;\n    Stats?: never;\n    Progress?: never;\n    Cont: ContinuationEvent;\n    End?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The End Event.</p>\n   */\n  export interface EndMember {\n    Records?: never;\n    Stats?: never;\n    Progress?: never;\n    Cont?: never;\n    End: EndEvent;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    Records?: never;\n    Stats?: never;\n    Progress?: never;\n    Cont?: never;\n    End?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    Records: (value: RecordsEvent) => T;\n    Stats: (value: StatsEvent) => T;\n    Progress: (value: ProgressEvent) => T;\n    Cont: (value: ContinuationEvent) => T;\n    End: (value: EndEvent) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: SelectObjectContentEventStream, visitor: Visitor<T>): T => {\n    if (value.Records !== undefined) return visitor.Records(value.Records);\n    if (value.Stats !== undefined) return visitor.Stats(value.Stats);\n    if (value.Progress !== undefined) return visitor.Progress(value.Progress);\n    if (value.Cont !== undefined) return visitor.Cont(value.Cont);\n    if (value.End !== undefined) return visitor.End(value.End);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  export const filterSensitiveLog = (obj: SelectObjectContentEventStream): any => {\n    if (obj.Records !== undefined) return { Records: RecordsEvent.filterSensitiveLog(obj.Records) };\n    if (obj.Stats !== undefined) return { Stats: StatsEvent.filterSensitiveLog(obj.Stats) };\n    if (obj.Progress !== undefined) return { Progress: ProgressEvent.filterSensitiveLog(obj.Progress) };\n    if (obj.Cont !== undefined) return { Cont: ContinuationEvent.filterSensitiveLog(obj.Cont) };\n    if (obj.End !== undefined) return { End: EndEvent.filterSensitiveLog(obj.End) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\nexport interface SelectObjectContentOutput {\n  /**\n   * <p>The array of results.</p>\n   */\n  Payload?: AsyncIterable<SelectObjectContentEventStream>;\n}\n\nexport namespace SelectObjectContentOutput {\n  export const filterSensitiveLog = (obj: SelectObjectContentOutput): any => ({\n    ...obj,\n    ...(obj.Payload && { Payload: \"STREAMING_CONTENT\" }),\n  });\n}\n\n/**\n * <p>Container for specifying if periodic <code>QueryProgress</code> messages should be\n *          sent.</p>\n */\nexport interface RequestProgress {\n  /**\n   * <p>Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE,\n   *          FALSE. Default value: FALSE.</p>\n   */\n  Enabled?: boolean;\n}\n\nexport namespace RequestProgress {\n  export const filterSensitiveLog = (obj: RequestProgress): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the byte range of the object to get the records from. A record is processed\n *          when its first byte is contained by the range. This parameter is optional, but when\n *          specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the\n *          start and end of the range.</p>\n */\nexport interface ScanRange {\n  /**\n   * <p>Specifies the start of the byte range. This parameter is optional. Valid values:\n   *          non-negative integers. The default value is 0. If only start is supplied, it means scan\n   *          from that point to the end of the file.For example;\n   *             <code><scanrange><start>50</start></scanrange></code> means scan\n   *          from byte 50 until the end of the file.</p>\n   */\n  Start?: number;\n\n  /**\n   * <p>Specifies the end of the byte range. This parameter is optional. Valid values:\n   *          non-negative integers. The default value is one less than the size of the object being\n   *          queried. If only the End parameter is supplied, it is interpreted to mean scan the last N\n   *          bytes of the file. For example,\n   *             <code><scanrange><end>50</end></scanrange></code> means scan the\n   *          last 50 bytes.</p>\n   */\n  End?: number;\n}\n\nexport namespace ScanRange {\n  export const filterSensitiveLog = (obj: ScanRange): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Request to filter the contents of an Amazon S3 object based on a simple Structured Query\n *          Language (SQL) statement. In the request, along with the SQL expression, you must specify a\n *          data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data\n *          into records. It returns only records that match the specified SQL expression. You must\n *          also specify the data serialization format for the response. For more information, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html\">S3Select API Documentation</a>.</p>\n */\nexport interface SelectObjectContentRequest {\n  /**\n   * <p>The S3 bucket.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>The object key.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>The SSE Algorithm used to encrypt the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\">Server-Side Encryption (Using Customer-Provided Encryption Keys</a>. </p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>The SSE Customer Key. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\">Server-Side Encryption\n   *             (Using Customer-Provided Encryption Keys</a>. </p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>The SSE Customer Key MD5. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\">Server-Side Encryption\n   *             (Using Customer-Provided Encryption Keys</a>. </p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>The expression that is used to query the object.</p>\n   */\n  Expression: string | undefined;\n\n  /**\n   * <p>The type of the provided expression (for example, SQL).</p>\n   */\n  ExpressionType: ExpressionType | string | undefined;\n\n  /**\n   * <p>Specifies if periodic request progress information should be enabled.</p>\n   */\n  RequestProgress?: RequestProgress;\n\n  /**\n   * <p>Describes the format of the data in the object that is being queried.</p>\n   */\n  InputSerialization: InputSerialization | undefined;\n\n  /**\n   * <p>Describes the format of the data that you want Amazon S3 to return in response.</p>\n   */\n  OutputSerialization: OutputSerialization | undefined;\n\n  /**\n   * <p>Specifies the byte range of the object to get the records from. A record is processed\n   *          when its first byte is contained by the range. This parameter is optional, but when\n   *          specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the\n   *          start and end of the range.</p>\n   *          <p>\n   *             <code>ScanRange</code>may be used in the following ways:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code><scanrange><start>50</start><end>100</end></scanrange></code>\n   *                - process only the records starting between the bytes 50 and 100 (inclusive, counting\n   *                from zero)</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code><scanrange><start>50</start></scanrange></code> -\n   *                process only the records starting after the byte 50</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code><scanrange><end>50</end></scanrange></code> -\n   *                process only the records within the last 50 bytes of the file.</p>\n   *             </li>\n   *          </ul>\n   */\n  ScanRange?: ScanRange;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace SelectObjectContentRequest {\n  export const filterSensitiveLog = (obj: SelectObjectContentRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n  });\n}\n\nexport interface UploadPartOutput {\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>Entity tag for the uploaded object.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace UploadPartOutput {\n  export const filterSensitiveLog = (obj: UploadPartOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n  });\n}\n\nexport interface UploadPartRequest {\n  /**\n   * <p>Object data.</p>\n   */\n  Body?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p>The name of the bucket to which the multipart upload was initiated.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Size of the body in bytes. This parameter is useful when the size of the body cannot be\n   *          determined automatically.</p>\n   */\n  ContentLength?: number;\n\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated\n   *          when using the command from the CLI. This parameter is required if object lock parameters\n   *          are specified.</p>\n   */\n  ContentMD5?: string;\n\n  /**\n   * <p>Object key for which the multipart upload was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Part number of part being uploaded. This is a positive integer between 1 and\n   *          10,000.</p>\n   */\n  PartNumber: number | undefined;\n\n  /**\n   * <p>Upload ID identifying the multipart upload whose part is being uploaded.</p>\n   */\n  UploadId: string | undefined;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm header</code>. This must be the\n   *          same encryption key specified in the initiate multipart upload request.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n\nexport namespace UploadPartRequest {\n  export const filterSensitiveLog = (obj: UploadPartRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Container for all response elements.</p>\n */\nexport interface CopyPartResult {\n  /**\n   * <p>Entity tag of the object.</p>\n   */\n  ETag?: string;\n\n  /**\n   * <p>Date and time at which the object was uploaded.</p>\n   */\n  LastModified?: Date;\n}\n\nexport namespace CopyPartResult {\n  export const filterSensitiveLog = (obj: CopyPartResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface UploadPartCopyOutput {\n  /**\n   * <p>The version of the source object that was copied, if you have enabled versioning on the\n   *          source bucket.</p>\n   */\n  CopySourceVersionId?: string;\n\n  /**\n   * <p>Container for all response elements.</p>\n   */\n  CopyPartResult?: CopyPartResult;\n\n  /**\n   * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,\n   *          AES256, aws:kms).</p>\n   */\n  ServerSideEncryption?: ServerSideEncryption | string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header confirming the encryption algorithm used.</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>If server-side encryption with a customer-provided encryption key was requested, the\n   *          response will include this header to provide round-trip message integrity verification of\n   *          the customer-provided encryption key.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric\n   *          customer managed customer master key (CMK) that was used for the object.</p>\n   */\n  SSEKMSKeyId?: string;\n\n  /**\n   * <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>\n   */\n  BucketKeyEnabled?: boolean;\n\n  /**\n   * <p>If present, indicates that the requester was successfully charged for the\n   *          request.</p>\n   */\n  RequestCharged?: RequestCharged | string;\n}\n\nexport namespace UploadPartCopyOutput {\n  export const filterSensitiveLog = (obj: UploadPartCopyOutput): any => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }),\n  });\n}\n\nexport interface UploadPartCopyRequest {\n  /**\n   * <p>The bucket name.</p>\n   *          <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html\">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   *          <p>When using this API with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this operation using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html\">Using S3 on Outposts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n   */\n  Bucket: string | undefined;\n\n  /**\n   * <p>Specifies the source object for the copy operation. You specify the value in one of two\n   *          formats, depending on whether you want to access the source object through an <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/access-points.html\">access\n   *          point</a>:</p>\n   *          <ul>\n   *             <li>\n   *                <p>For objects not accessed through an access point, specify the name of the source\n   *                bucket and key of the source object, separated by a slash (/). For example, to copy\n   *                the object <code>reports/january.pdf</code> from the bucket\n   *                   <code>awsexamplebucket</code>, use\n   *                   <code>awsexamplebucket/reports/january.pdf</code>. The value must be URL\n   *                encoded.</p>\n   *             </li>\n   *             <li>\n   *                <p>For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format <code>arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through access point <code>my-access-point</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>. The value must be URL encoded.</p>\n   *                <note>\n   *                   <p>Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same AWS Region.</p>\n   *                </note>\n   *                <p>Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format <code>arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>. The value must be URL encoded.  </p>\n   *             </li>\n   *          </ul>\n   *          <p>To copy a specific version of an object, append <code>?versionId=<version-id></code>\n   *          to the value (for example,\n   *             <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).\n   *          If you don't specify a version ID, Amazon S3 copies the latest version of the source\n   *          object.</p>\n   */\n  CopySource: string | undefined;\n\n  /**\n   * <p>Copies the object if its entity tag (ETag) matches the specified tag.</p>\n   */\n  CopySourceIfMatch?: string;\n\n  /**\n   * <p>Copies the object if it has been modified since the specified time.</p>\n   */\n  CopySourceIfModifiedSince?: Date;\n\n  /**\n   * <p>Copies the object if its entity tag (ETag) is different than the specified ETag.</p>\n   */\n  CopySourceIfNoneMatch?: string;\n\n  /**\n   * <p>Copies the object if it hasn't been modified since the specified time.</p>\n   */\n  CopySourceIfUnmodifiedSince?: Date;\n\n  /**\n   * <p>The range of bytes to copy from the source object. The range value must use the form\n   *          bytes=first-last, where the first and last are the zero-based byte offsets to copy. For\n   *          example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You\n   *          can copy a range only if the source object is greater than 5 MB.</p>\n   */\n  CopySourceRange?: string;\n\n  /**\n   * <p>Object key for which the multipart upload was initiated.</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>Part number of part being copied. This is a positive integer between 1 and\n   *          10,000.</p>\n   */\n  PartNumber: number | undefined;\n\n  /**\n   * <p>Upload ID identifying the multipart upload whose part is being copied.</p>\n   */\n  UploadId: string | undefined;\n\n  /**\n   * <p>Specifies the algorithm to use to when encrypting the object (for example,\n   *          AES256).</p>\n   */\n  SSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This\n   *          value is used to store the object and then it is discarded; Amazon S3 does not store the\n   *          encryption key. The key must be appropriate for use with the algorithm specified in the\n   *             <code>x-amz-server-side-encryption-customer-algorithm</code> header. This must be the\n   *          same encryption key specified in the initiate multipart upload request.</p>\n   */\n  SSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  SSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Specifies the algorithm to use when decrypting the source object (for example,\n   *          AES256).</p>\n   */\n  CopySourceSSECustomerAlgorithm?: string;\n\n  /**\n   * <p>Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source\n   *          object. The encryption key provided in this header must be one that was used when the\n   *          source object was created.</p>\n   */\n  CopySourceSSECustomerKey?: string;\n\n  /**\n   * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses\n   *          this header for a message integrity check to ensure that the encryption key was transmitted\n   *          without error.</p>\n   */\n  CopySourceSSECustomerKeyMD5?: string;\n\n  /**\n   * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n   *          owners need not specify this parameter in their requests. For information about downloading\n   *          objects from requester pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html\">Downloading Objects in\n   *             Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.</p>\n   */\n  RequestPayer?: RequestPayer | string;\n\n  /**\n   * <p>The account id of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n\n  /**\n   * <p>The account id of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedSourceBucketOwner?: string;\n}\n\nexport namespace UploadPartCopyRequest {\n  export const filterSensitiveLog = (obj: UploadPartCopyRequest): any => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }),\n    ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING }),\n  });\n}\n","import {\n  AbortMultipartUploadCommandInput,\n  AbortMultipartUploadCommandOutput,\n} from \"./commands/AbortMultipartUploadCommand\";\nimport {\n  CompleteMultipartUploadCommandInput,\n  CompleteMultipartUploadCommandOutput,\n} from \"./commands/CompleteMultipartUploadCommand\";\nimport { CopyObjectCommandInput, CopyObjectCommandOutput } from \"./commands/CopyObjectCommand\";\nimport { CreateBucketCommandInput, CreateBucketCommandOutput } from \"./commands/CreateBucketCommand\";\nimport {\n  CreateMultipartUploadCommandInput,\n  CreateMultipartUploadCommandOutput,\n} from \"./commands/CreateMultipartUploadCommand\";\nimport {\n  DeleteBucketAnalyticsConfigurationCommandInput,\n  DeleteBucketAnalyticsConfigurationCommandOutput,\n} from \"./commands/DeleteBucketAnalyticsConfigurationCommand\";\nimport { DeleteBucketCommandInput, DeleteBucketCommandOutput } from \"./commands/DeleteBucketCommand\";\nimport { DeleteBucketCorsCommandInput, DeleteBucketCorsCommandOutput } from \"./commands/DeleteBucketCorsCommand\";\nimport {\n  DeleteBucketEncryptionCommandInput,\n  DeleteBucketEncryptionCommandOutput,\n} from \"./commands/DeleteBucketEncryptionCommand\";\nimport {\n  DeleteBucketIntelligentTieringConfigurationCommandInput,\n  DeleteBucketIntelligentTieringConfigurationCommandOutput,\n} from \"./commands/DeleteBucketIntelligentTieringConfigurationCommand\";\nimport {\n  DeleteBucketInventoryConfigurationCommandInput,\n  DeleteBucketInventoryConfigurationCommandOutput,\n} from \"./commands/DeleteBucketInventoryConfigurationCommand\";\nimport {\n  DeleteBucketLifecycleCommandInput,\n  DeleteBucketLifecycleCommandOutput,\n} from \"./commands/DeleteBucketLifecycleCommand\";\nimport {\n  DeleteBucketMetricsConfigurationCommandInput,\n  DeleteBucketMetricsConfigurationCommandOutput,\n} from \"./commands/DeleteBucketMetricsConfigurationCommand\";\nimport {\n  DeleteBucketOwnershipControlsCommandInput,\n  DeleteBucketOwnershipControlsCommandOutput,\n} from \"./commands/DeleteBucketOwnershipControlsCommand\";\nimport { DeleteBucketPolicyCommandInput, DeleteBucketPolicyCommandOutput } from \"./commands/DeleteBucketPolicyCommand\";\nimport {\n  DeleteBucketReplicationCommandInput,\n  DeleteBucketReplicationCommandOutput,\n} from \"./commands/DeleteBucketReplicationCommand\";\nimport {\n  DeleteBucketTaggingCommandInput,\n  DeleteBucketTaggingCommandOutput,\n} from \"./commands/DeleteBucketTaggingCommand\";\nimport {\n  DeleteBucketWebsiteCommandInput,\n  DeleteBucketWebsiteCommandOutput,\n} from \"./commands/DeleteBucketWebsiteCommand\";\nimport { DeleteObjectCommandInput, DeleteObjectCommandOutput } from \"./commands/DeleteObjectCommand\";\nimport {\n  DeleteObjectTaggingCommandInput,\n  DeleteObjectTaggingCommandOutput,\n} from \"./commands/DeleteObjectTaggingCommand\";\nimport { DeleteObjectsCommandInput, DeleteObjectsCommandOutput } from \"./commands/DeleteObjectsCommand\";\nimport {\n  DeletePublicAccessBlockCommandInput,\n  DeletePublicAccessBlockCommandOutput,\n} from \"./commands/DeletePublicAccessBlockCommand\";\nimport {\n  GetBucketAccelerateConfigurationCommandInput,\n  GetBucketAccelerateConfigurationCommandOutput,\n} from \"./commands/GetBucketAccelerateConfigurationCommand\";\nimport { GetBucketAclCommandInput, GetBucketAclCommandOutput } from \"./commands/GetBucketAclCommand\";\nimport {\n  GetBucketAnalyticsConfigurationCommandInput,\n  GetBucketAnalyticsConfigurationCommandOutput,\n} from \"./commands/GetBucketAnalyticsConfigurationCommand\";\nimport { GetBucketCorsCommandInput, GetBucketCorsCommandOutput } from \"./commands/GetBucketCorsCommand\";\nimport {\n  GetBucketEncryptionCommandInput,\n  GetBucketEncryptionCommandOutput,\n} from \"./commands/GetBucketEncryptionCommand\";\nimport {\n  GetBucketIntelligentTieringConfigurationCommandInput,\n  GetBucketIntelligentTieringConfigurationCommandOutput,\n} from \"./commands/GetBucketIntelligentTieringConfigurationCommand\";\nimport {\n  GetBucketInventoryConfigurationCommandInput,\n  GetBucketInventoryConfigurationCommandOutput,\n} from \"./commands/GetBucketInventoryConfigurationCommand\";\nimport {\n  GetBucketLifecycleConfigurationCommandInput,\n  GetBucketLifecycleConfigurationCommandOutput,\n} from \"./commands/GetBucketLifecycleConfigurationCommand\";\nimport { GetBucketLocationCommandInput, GetBucketLocationCommandOutput } from \"./commands/GetBucketLocationCommand\";\nimport { GetBucketLoggingCommandInput, GetBucketLoggingCommandOutput } from \"./commands/GetBucketLoggingCommand\";\nimport {\n  GetBucketMetricsConfigurationCommandInput,\n  GetBucketMetricsConfigurationCommandOutput,\n} from \"./commands/GetBucketMetricsConfigurationCommand\";\nimport {\n  GetBucketNotificationConfigurationCommandInput,\n  GetBucketNotificationConfigurationCommandOutput,\n} from \"./commands/GetBucketNotificationConfigurationCommand\";\nimport {\n  GetBucketOwnershipControlsCommandInput,\n  GetBucketOwnershipControlsCommandOutput,\n} from \"./commands/GetBucketOwnershipControlsCommand\";\nimport { GetBucketPolicyCommandInput, GetBucketPolicyCommandOutput } from \"./commands/GetBucketPolicyCommand\";\nimport {\n  GetBucketPolicyStatusCommandInput,\n  GetBucketPolicyStatusCommandOutput,\n} from \"./commands/GetBucketPolicyStatusCommand\";\nimport {\n  GetBucketReplicationCommandInput,\n  GetBucketReplicationCommandOutput,\n} from \"./commands/GetBucketReplicationCommand\";\nimport {\n  GetBucketRequestPaymentCommandInput,\n  GetBucketRequestPaymentCommandOutput,\n} from \"./commands/GetBucketRequestPaymentCommand\";\nimport { GetBucketTaggingCommandInput, GetBucketTaggingCommandOutput } from \"./commands/GetBucketTaggingCommand\";\nimport {\n  GetBucketVersioningCommandInput,\n  GetBucketVersioningCommandOutput,\n} from \"./commands/GetBucketVersioningCommand\";\nimport { GetBucketWebsiteCommandInput, GetBucketWebsiteCommandOutput } from \"./commands/GetBucketWebsiteCommand\";\nimport { GetObjectAclCommandInput, GetObjectAclCommandOutput } from \"./commands/GetObjectAclCommand\";\nimport { GetObjectCommandInput, GetObjectCommandOutput } from \"./commands/GetObjectCommand\";\nimport { GetObjectLegalHoldCommandInput, GetObjectLegalHoldCommandOutput } from \"./commands/GetObjectLegalHoldCommand\";\nimport {\n  GetObjectLockConfigurationCommandInput,\n  GetObjectLockConfigurationCommandOutput,\n} from \"./commands/GetObjectLockConfigurationCommand\";\nimport { GetObjectRetentionCommandInput, GetObjectRetentionCommandOutput } from \"./commands/GetObjectRetentionCommand\";\nimport { GetObjectTaggingCommandInput, GetObjectTaggingCommandOutput } from \"./commands/GetObjectTaggingCommand\";\nimport { GetObjectTorrentCommandInput, GetObjectTorrentCommandOutput } from \"./commands/GetObjectTorrentCommand\";\nimport {\n  GetPublicAccessBlockCommandInput,\n  GetPublicAccessBlockCommandOutput,\n} from \"./commands/GetPublicAccessBlockCommand\";\nimport { HeadBucketCommandInput, HeadBucketCommandOutput } from \"./commands/HeadBucketCommand\";\nimport { HeadObjectCommandInput, HeadObjectCommandOutput } from \"./commands/HeadObjectCommand\";\nimport {\n  ListBucketAnalyticsConfigurationsCommandInput,\n  ListBucketAnalyticsConfigurationsCommandOutput,\n} from \"./commands/ListBucketAnalyticsConfigurationsCommand\";\nimport {\n  ListBucketIntelligentTieringConfigurationsCommandInput,\n  ListBucketIntelligentTieringConfigurationsCommandOutput,\n} from \"./commands/ListBucketIntelligentTieringConfigurationsCommand\";\nimport {\n  ListBucketInventoryConfigurationsCommandInput,\n  ListBucketInventoryConfigurationsCommandOutput,\n} from \"./commands/ListBucketInventoryConfigurationsCommand\";\nimport {\n  ListBucketMetricsConfigurationsCommandInput,\n  ListBucketMetricsConfigurationsCommandOutput,\n} from \"./commands/ListBucketMetricsConfigurationsCommand\";\nimport { ListBucketsCommandInput, ListBucketsCommandOutput } from \"./commands/ListBucketsCommand\";\nimport {\n  ListMultipartUploadsCommandInput,\n  ListMultipartUploadsCommandOutput,\n} from \"./commands/ListMultipartUploadsCommand\";\nimport { ListObjectVersionsCommandInput, ListObjectVersionsCommandOutput } from \"./commands/ListObjectVersionsCommand\";\nimport { ListObjectsCommandInput, ListObjectsCommandOutput } from \"./commands/ListObjectsCommand\";\nimport { ListObjectsV2CommandInput, ListObjectsV2CommandOutput } from \"./commands/ListObjectsV2Command\";\nimport { ListPartsCommandInput, ListPartsCommandOutput } from \"./commands/ListPartsCommand\";\nimport {\n  PutBucketAccelerateConfigurationCommandInput,\n  PutBucketAccelerateConfigurationCommandOutput,\n} from \"./commands/PutBucketAccelerateConfigurationCommand\";\nimport { PutBucketAclCommandInput, PutBucketAclCommandOutput } from \"./commands/PutBucketAclCommand\";\nimport {\n  PutBucketAnalyticsConfigurationCommandInput,\n  PutBucketAnalyticsConfigurationCommandOutput,\n} from \"./commands/PutBucketAnalyticsConfigurationCommand\";\nimport { PutBucketCorsCommandInput, PutBucketCorsCommandOutput } from \"./commands/PutBucketCorsCommand\";\nimport {\n  PutBucketEncryptionCommandInput,\n  PutBucketEncryptionCommandOutput,\n} from \"./commands/PutBucketEncryptionCommand\";\nimport {\n  PutBucketIntelligentTieringConfigurationCommandInput,\n  PutBucketIntelligentTieringConfigurationCommandOutput,\n} from \"./commands/PutBucketIntelligentTieringConfigurationCommand\";\nimport {\n  PutBucketInventoryConfigurationCommandInput,\n  PutBucketInventoryConfigurationCommandOutput,\n} from \"./commands/PutBucketInventoryConfigurationCommand\";\nimport {\n  PutBucketLifecycleConfigurationCommandInput,\n  PutBucketLifecycleConfigurationCommandOutput,\n} from \"./commands/PutBucketLifecycleConfigurationCommand\";\nimport { PutBucketLoggingCommandInput, PutBucketLoggingCommandOutput } from \"./commands/PutBucketLoggingCommand\";\nimport {\n  PutBucketMetricsConfigurationCommandInput,\n  PutBucketMetricsConfigurationCommandOutput,\n} from \"./commands/PutBucketMetricsConfigurationCommand\";\nimport {\n  PutBucketNotificationConfigurationCommandInput,\n  PutBucketNotificationConfigurationCommandOutput,\n} from \"./commands/PutBucketNotificationConfigurationCommand\";\nimport {\n  PutBucketOwnershipControlsCommandInput,\n  PutBucketOwnershipControlsCommandOutput,\n} from \"./commands/PutBucketOwnershipControlsCommand\";\nimport { PutBucketPolicyCommandInput, PutBucketPolicyCommandOutput } from \"./commands/PutBucketPolicyCommand\";\nimport {\n  PutBucketReplicationCommandInput,\n  PutBucketReplicationCommandOutput,\n} from \"./commands/PutBucketReplicationCommand\";\nimport {\n  PutBucketRequestPaymentCommandInput,\n  PutBucketRequestPaymentCommandOutput,\n} from \"./commands/PutBucketRequestPaymentCommand\";\nimport { PutBucketTaggingCommandInput, PutBucketTaggingCommandOutput } from \"./commands/PutBucketTaggingCommand\";\nimport {\n  PutBucketVersioningCommandInput,\n  PutBucketVersioningCommandOutput,\n} from \"./commands/PutBucketVersioningCommand\";\nimport { PutBucketWebsiteCommandInput, PutBucketWebsiteCommandOutput } from \"./commands/PutBucketWebsiteCommand\";\nimport { PutObjectAclCommandInput, PutObjectAclCommandOutput } from \"./commands/PutObjectAclCommand\";\nimport { PutObjectCommandInput, PutObjectCommandOutput } from \"./commands/PutObjectCommand\";\nimport { PutObjectLegalHoldCommandInput, PutObjectLegalHoldCommandOutput } from \"./commands/PutObjectLegalHoldCommand\";\nimport {\n  PutObjectLockConfigurationCommandInput,\n  PutObjectLockConfigurationCommandOutput,\n} from \"./commands/PutObjectLockConfigurationCommand\";\nimport { PutObjectRetentionCommandInput, PutObjectRetentionCommandOutput } from \"./commands/PutObjectRetentionCommand\";\nimport { PutObjectTaggingCommandInput, PutObjectTaggingCommandOutput } from \"./commands/PutObjectTaggingCommand\";\nimport {\n  PutPublicAccessBlockCommandInput,\n  PutPublicAccessBlockCommandOutput,\n} from \"./commands/PutPublicAccessBlockCommand\";\nimport { RestoreObjectCommandInput, RestoreObjectCommandOutput } from \"./commands/RestoreObjectCommand\";\nimport {\n  SelectObjectContentCommandInput,\n  SelectObjectContentCommandOutput,\n} from \"./commands/SelectObjectContentCommand\";\nimport { UploadPartCommandInput, UploadPartCommandOutput } from \"./commands/UploadPartCommand\";\nimport { UploadPartCopyCommandInput, UploadPartCopyCommandOutput } from \"./commands/UploadPartCopyCommand\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport {\n  EndpointsInputConfig,\n  EndpointsResolvedConfig,\n  RegionInputConfig,\n  RegionResolvedConfig,\n  resolveEndpointsConfig,\n  resolveRegionConfig,\n} from \"@aws-sdk/config-resolver\";\nimport {\n  EventStreamSerdeInputConfig,\n  EventStreamSerdeResolvedConfig,\n  resolveEventStreamSerdeConfig,\n} from \"@aws-sdk/eventstream-serde-config-resolver\";\nimport {\n  BucketEndpointInputConfig,\n  BucketEndpointResolvedConfig,\n  resolveBucketEndpointConfig,\n} from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { getAddExpectContinuePlugin } from \"@aws-sdk/middleware-expect-continue\";\nimport {\n  HostHeaderInputConfig,\n  HostHeaderResolvedConfig,\n  getHostHeaderPlugin,\n  resolveHostHeaderConfig,\n} from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { RetryInputConfig, RetryResolvedConfig, getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getUseRegionalEndpointPlugin, getValidateBucketNamePlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport {\n  AwsAuthInputConfig,\n  AwsAuthResolvedConfig,\n  getAwsAuthPlugin,\n  resolveAwsAuthConfig,\n} from \"@aws-sdk/middleware-signing\";\nimport {\n  UserAgentInputConfig,\n  UserAgentResolvedConfig,\n  getUserAgentPlugin,\n  resolveUserAgentConfig,\n} from \"@aws-sdk/middleware-user-agent\";\nimport { HttpHandler as __HttpHandler } from \"@aws-sdk/protocol-http\";\nimport {\n  Client as __Client,\n  SmithyConfiguration as __SmithyConfiguration,\n  SmithyResolvedConfiguration as __SmithyResolvedConfiguration,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Provider,\n  RegionInfoProvider,\n  Credentials as __Credentials,\n  Decoder as __Decoder,\n  Encoder as __Encoder,\n  EventStreamSerdeProvider as __EventStreamSerdeProvider,\n  HashConstructor as __HashConstructor,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  Logger as __Logger,\n  Provider as __Provider,\n  StreamCollector as __StreamCollector,\n  StreamHasher as __StreamHasher,\n  UrlParser as __UrlParser,\n  UserAgent as __UserAgent,\n} from \"@aws-sdk/types\";\nimport { Readable } from \"stream\";\n\nexport type ServiceInputTypes =\n  | AbortMultipartUploadCommandInput\n  | CompleteMultipartUploadCommandInput\n  | CopyObjectCommandInput\n  | CreateBucketCommandInput\n  | CreateMultipartUploadCommandInput\n  | DeleteBucketAnalyticsConfigurationCommandInput\n  | DeleteBucketCommandInput\n  | DeleteBucketCorsCommandInput\n  | DeleteBucketEncryptionCommandInput\n  | DeleteBucketIntelligentTieringConfigurationCommandInput\n  | DeleteBucketInventoryConfigurationCommandInput\n  | DeleteBucketLifecycleCommandInput\n  | DeleteBucketMetricsConfigurationCommandInput\n  | DeleteBucketOwnershipControlsCommandInput\n  | DeleteBucketPolicyCommandInput\n  | DeleteBucketReplicationCommandInput\n  | DeleteBucketTaggingCommandInput\n  | DeleteBucketWebsiteCommandInput\n  | DeleteObjectCommandInput\n  | DeleteObjectTaggingCommandInput\n  | DeleteObjectsCommandInput\n  | DeletePublicAccessBlockCommandInput\n  | GetBucketAccelerateConfigurationCommandInput\n  | GetBucketAclCommandInput\n  | GetBucketAnalyticsConfigurationCommandInput\n  | GetBucketCorsCommandInput\n  | GetBucketEncryptionCommandInput\n  | GetBucketIntelligentTieringConfigurationCommandInput\n  | GetBucketInventoryConfigurationCommandInput\n  | GetBucketLifecycleConfigurationCommandInput\n  | GetBucketLocationCommandInput\n  | GetBucketLoggingCommandInput\n  | GetBucketMetricsConfigurationCommandInput\n  | GetBucketNotificationConfigurationCommandInput\n  | GetBucketOwnershipControlsCommandInput\n  | GetBucketPolicyCommandInput\n  | GetBucketPolicyStatusCommandInput\n  | GetBucketReplicationCommandInput\n  | GetBucketRequestPaymentCommandInput\n  | GetBucketTaggingCommandInput\n  | GetBucketVersioningCommandInput\n  | GetBucketWebsiteCommandInput\n  | GetObjectAclCommandInput\n  | GetObjectCommandInput\n  | GetObjectLegalHoldCommandInput\n  | GetObjectLockConfigurationCommandInput\n  | GetObjectRetentionCommandInput\n  | GetObjectTaggingCommandInput\n  | GetObjectTorrentCommandInput\n  | GetPublicAccessBlockCommandInput\n  | HeadBucketCommandInput\n  | HeadObjectCommandInput\n  | ListBucketAnalyticsConfigurationsCommandInput\n  | ListBucketIntelligentTieringConfigurationsCommandInput\n  | ListBucketInventoryConfigurationsCommandInput\n  | ListBucketMetricsConfigurationsCommandInput\n  | ListBucketsCommandInput\n  | ListMultipartUploadsCommandInput\n  | ListObjectVersionsCommandInput\n  | ListObjectsCommandInput\n  | ListObjectsV2CommandInput\n  | ListPartsCommandInput\n  | PutBucketAccelerateConfigurationCommandInput\n  | PutBucketAclCommandInput\n  | PutBucketAnalyticsConfigurationCommandInput\n  | PutBucketCorsCommandInput\n  | PutBucketEncryptionCommandInput\n  | PutBucketIntelligentTieringConfigurationCommandInput\n  | PutBucketInventoryConfigurationCommandInput\n  | PutBucketLifecycleConfigurationCommandInput\n  | PutBucketLoggingCommandInput\n  | PutBucketMetricsConfigurationCommandInput\n  | PutBucketNotificationConfigurationCommandInput\n  | PutBucketOwnershipControlsCommandInput\n  | PutBucketPolicyCommandInput\n  | PutBucketReplicationCommandInput\n  | PutBucketRequestPaymentCommandInput\n  | PutBucketTaggingCommandInput\n  | PutBucketVersioningCommandInput\n  | PutBucketWebsiteCommandInput\n  | PutObjectAclCommandInput\n  | PutObjectCommandInput\n  | PutObjectLegalHoldCommandInput\n  | PutObjectLockConfigurationCommandInput\n  | PutObjectRetentionCommandInput\n  | PutObjectTaggingCommandInput\n  | PutPublicAccessBlockCommandInput\n  | RestoreObjectCommandInput\n  | SelectObjectContentCommandInput\n  | UploadPartCommandInput\n  | UploadPartCopyCommandInput;\n\nexport type ServiceOutputTypes =\n  | AbortMultipartUploadCommandOutput\n  | CompleteMultipartUploadCommandOutput\n  | CopyObjectCommandOutput\n  | CreateBucketCommandOutput\n  | CreateMultipartUploadCommandOutput\n  | DeleteBucketAnalyticsConfigurationCommandOutput\n  | DeleteBucketCommandOutput\n  | DeleteBucketCorsCommandOutput\n  | DeleteBucketEncryptionCommandOutput\n  | DeleteBucketIntelligentTieringConfigurationCommandOutput\n  | DeleteBucketInventoryConfigurationCommandOutput\n  | DeleteBucketLifecycleCommandOutput\n  | DeleteBucketMetricsConfigurationCommandOutput\n  | DeleteBucketOwnershipControlsCommandOutput\n  | DeleteBucketPolicyCommandOutput\n  | DeleteBucketReplicationCommandOutput\n  | DeleteBucketTaggingCommandOutput\n  | DeleteBucketWebsiteCommandOutput\n  | DeleteObjectCommandOutput\n  | DeleteObjectTaggingCommandOutput\n  | DeleteObjectsCommandOutput\n  | DeletePublicAccessBlockCommandOutput\n  | GetBucketAccelerateConfigurationCommandOutput\n  | GetBucketAclCommandOutput\n  | GetBucketAnalyticsConfigurationCommandOutput\n  | GetBucketCorsCommandOutput\n  | GetBucketEncryptionCommandOutput\n  | GetBucketIntelligentTieringConfigurationCommandOutput\n  | GetBucketInventoryConfigurationCommandOutput\n  | GetBucketLifecycleConfigurationCommandOutput\n  | GetBucketLocationCommandOutput\n  | GetBucketLoggingCommandOutput\n  | GetBucketMetricsConfigurationCommandOutput\n  | GetBucketNotificationConfigurationCommandOutput\n  | GetBucketOwnershipControlsCommandOutput\n  | GetBucketPolicyCommandOutput\n  | GetBucketPolicyStatusCommandOutput\n  | GetBucketReplicationCommandOutput\n  | GetBucketRequestPaymentCommandOutput\n  | GetBucketTaggingCommandOutput\n  | GetBucketVersioningCommandOutput\n  | GetBucketWebsiteCommandOutput\n  | GetObjectAclCommandOutput\n  | GetObjectCommandOutput\n  | GetObjectLegalHoldCommandOutput\n  | GetObjectLockConfigurationCommandOutput\n  | GetObjectRetentionCommandOutput\n  | GetObjectTaggingCommandOutput\n  | GetObjectTorrentCommandOutput\n  | GetPublicAccessBlockCommandOutput\n  | HeadBucketCommandOutput\n  | HeadObjectCommandOutput\n  | ListBucketAnalyticsConfigurationsCommandOutput\n  | ListBucketIntelligentTieringConfigurationsCommandOutput\n  | ListBucketInventoryConfigurationsCommandOutput\n  | ListBucketMetricsConfigurationsCommandOutput\n  | ListBucketsCommandOutput\n  | ListMultipartUploadsCommandOutput\n  | ListObjectVersionsCommandOutput\n  | ListObjectsCommandOutput\n  | ListObjectsV2CommandOutput\n  | ListPartsCommandOutput\n  | PutBucketAccelerateConfigurationCommandOutput\n  | PutBucketAclCommandOutput\n  | PutBucketAnalyticsConfigurationCommandOutput\n  | PutBucketCorsCommandOutput\n  | PutBucketEncryptionCommandOutput\n  | PutBucketIntelligentTieringConfigurationCommandOutput\n  | PutBucketInventoryConfigurationCommandOutput\n  | PutBucketLifecycleConfigurationCommandOutput\n  | PutBucketLoggingCommandOutput\n  | PutBucketMetricsConfigurationCommandOutput\n  | PutBucketNotificationConfigurationCommandOutput\n  | PutBucketOwnershipControlsCommandOutput\n  | PutBucketPolicyCommandOutput\n  | PutBucketReplicationCommandOutput\n  | PutBucketRequestPaymentCommandOutput\n  | PutBucketTaggingCommandOutput\n  | PutBucketVersioningCommandOutput\n  | PutBucketWebsiteCommandOutput\n  | PutObjectAclCommandOutput\n  | PutObjectCommandOutput\n  | PutObjectLegalHoldCommandOutput\n  | PutObjectLockConfigurationCommandOutput\n  | PutObjectRetentionCommandOutput\n  | PutObjectTaggingCommandOutput\n  | PutPublicAccessBlockCommandOutput\n  | RestoreObjectCommandOutput\n  | SelectObjectContentCommandOutput\n  | UploadPartCommandOutput\n  | UploadPartCopyCommandOutput;\n\nexport interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {\n  /**\n   * The HTTP handler to use. Fetch in browser and Https in Nodejs.\n   */\n  requestHandler?: __HttpHandler;\n\n  /**\n   * A constructor for a class implementing the @aws-sdk/types.Hash interface\n   * that computes the SHA-256 HMAC or checksum of a string or binary buffer.\n   */\n  sha256?: __HashConstructor;\n\n  /**\n   * The function that will be used to convert strings into HTTP endpoints.\n   */\n  urlParser?: __UrlParser;\n\n  /**\n   * A function that can calculate the length of a request body.\n   */\n  bodyLengthChecker?: (body: any) => number | undefined;\n\n  /**\n   * A function that converts a stream into an array of bytes.\n   */\n  streamCollector?: __StreamCollector;\n\n  /**\n   * The function that will be used to convert a base64-encoded string to a byte array\n   */\n  base64Decoder?: __Decoder;\n\n  /**\n   * The function that will be used to convert binary data to a base64-encoded string\n   */\n  base64Encoder?: __Encoder;\n\n  /**\n   * The function that will be used to convert a UTF8-encoded string to a byte array\n   */\n  utf8Decoder?: __Decoder;\n\n  /**\n   * The function that will be used to convert binary data to a UTF-8 encoded string\n   */\n  utf8Encoder?: __Encoder;\n\n  /**\n   * The runtime environment\n   */\n  runtime?: string;\n\n  /**\n   * Disable dyanamically changing the endpoint of the client based on the hostPrefix\n   * trait of an operation.\n   */\n  disableHostPrefix?: boolean;\n\n  /**\n   * Unique service identifier.\n   * @internal\n   */\n  serviceId?: string;\n\n  /**\n   * Default credentials provider; Not available in browser runtime\n   */\n  credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;\n\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | __Provider<string>;\n\n  /**\n   * Value for how many times a request will be made at most in case of retry.\n   */\n  maxAttempts?: number | __Provider<number>;\n\n  /**\n   * Optional logger for logging debug/info/warn/error.\n   */\n  logger?: __Logger;\n\n  /**\n   * Fetch related hostname, signing name or signing region with given region.\n   */\n  regionInfoProvider?: RegionInfoProvider;\n\n  /**\n   * A constructor for a class implementing the @aws-sdk/types.Hash interface\n   * that computes MD5 hashes\n   */\n  md5?: __HashConstructor;\n\n  /**\n   * A function that, given a hash constructor and a stream, calculates the\n   * hash of the streamed value\n   */\n  streamHasher?: __StreamHasher<Readable> | __StreamHasher<Blob>;\n\n  /**\n   * Whether to escape request path when signing the request.\n   */\n  signingEscapePath?: boolean;\n\n  /**\n   * Whether to override the request region with the region inferred from requested resource's ARN. Defaults to false.\n   */\n  useArnRegion?: boolean | Provider<boolean>;\n  /**\n   * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header\n   * @internal\n   */\n  defaultUserAgentProvider?: Provider<__UserAgent>;\n\n  /**\n   * The function that provides necessary utilities for generating and parsing event stream\n   */\n  eventStreamSerdeProvider?: __EventStreamSerdeProvider;\n}\n\nexport type S3ClientConfig = Partial<__SmithyConfiguration<__HttpHandlerOptions>> &\n  ClientDefaults &\n  RegionInputConfig &\n  EndpointsInputConfig &\n  AwsAuthInputConfig &\n  RetryInputConfig &\n  HostHeaderInputConfig &\n  BucketEndpointInputConfig &\n  UserAgentInputConfig &\n  EventStreamSerdeInputConfig;\n\nexport type S3ClientResolvedConfig = __SmithyResolvedConfiguration<__HttpHandlerOptions> &\n  Required<ClientDefaults> &\n  RegionResolvedConfig &\n  EndpointsResolvedConfig &\n  AwsAuthResolvedConfig &\n  RetryResolvedConfig &\n  HostHeaderResolvedConfig &\n  BucketEndpointResolvedConfig &\n  UserAgentResolvedConfig &\n  EventStreamSerdeResolvedConfig;\n\n/**\n * <p></p>\n */\nexport class S3Client extends __Client<\n  __HttpHandlerOptions,\n  ServiceInputTypes,\n  ServiceOutputTypes,\n  S3ClientResolvedConfig\n> {\n  readonly config: S3ClientResolvedConfig;\n\n  constructor(configuration: S3ClientConfig) {\n    let _config_0 = {\n      ...__ClientDefaultValues,\n      ...configuration,\n    };\n    let _config_1 = resolveRegionConfig(_config_0);\n    let _config_2 = resolveEndpointsConfig(_config_1);\n    let _config_3 = resolveAwsAuthConfig(_config_2);\n    let _config_4 = resolveRetryConfig(_config_3);\n    let _config_5 = resolveHostHeaderConfig(_config_4);\n    let _config_6 = resolveBucketEndpointConfig(_config_5);\n    let _config_7 = resolveUserAgentConfig(_config_6);\n    let _config_8 = resolveEventStreamSerdeConfig(_config_7);\n    super(_config_8);\n    this.config = _config_8;\n    this.middlewareStack.use(getAwsAuthPlugin(this.config));\n    this.middlewareStack.use(getRetryPlugin(this.config));\n    this.middlewareStack.use(getContentLengthPlugin(this.config));\n    this.middlewareStack.use(getHostHeaderPlugin(this.config));\n    this.middlewareStack.use(getLoggerPlugin(this.config));\n    this.middlewareStack.use(getValidateBucketNamePlugin(this.config));\n    this.middlewareStack.use(getUseRegionalEndpointPlugin(this.config));\n    this.middlewareStack.use(getAddExpectContinuePlugin(this.config));\n    this.middlewareStack.use(getUserAgentPlugin(this.config));\n  }\n\n  destroy(): void {\n    super.destroy();\n  }\n}\n","import { LoadedConfigSelectors } from \"@aws-sdk/node-config-provider\";\nimport { Provider, RegionInfoProvider } from \"@aws-sdk/types\";\n\nexport interface BucketEndpointInputConfig {\n  /**\n   * Whether the provided endpoint addresses an individual bucket.\n   */\n  bucketEndpoint?: boolean;\n  /**\n   * Whether to force path style URLs for S3 objects (e.g., https://s3.amazonaws.com/<bucketName>/<key> instead of https://<bucketName>.s3.amazonaws.com/<key>\n   */\n  forcePathStyle?: boolean;\n  /**\n   * Whether to use the S3 Transfer Acceleration endpoint by default\n   */\n  useAccelerateEndpoint?: boolean;\n  /**\n   * Enables IPv6/IPv4 dualstack endpoint. When a DNS lookup is performed on an endpoint of this type, it returns an “A” record with an IPv4 address and an “AAAA” record with an IPv6 address. In most cases the network stack in the client environment will automatically prefer the AAAA record and make a connection using the IPv6 address. Note, however, that currently on Windows, the IPv4 address will be preferred.\n   */\n  useDualstackEndpoint?: boolean;\n  /**\n   * Whether to override the request region with the region inferred from requested resource's ARN. Defaults to false\n   */\n  useArnRegion?: boolean | Provider<boolean>;\n}\n\ninterface PreviouslyResolved {\n  isCustomEndpoint: boolean;\n  region: Provider<string>;\n  regionInfoProvider: RegionInfoProvider;\n}\n\nexport interface BucketEndpointResolvedConfig {\n  isCustomEndpoint: boolean;\n  bucketEndpoint: boolean;\n  forcePathStyle: boolean;\n  useAccelerateEndpoint: boolean;\n  useDualstackEndpoint: boolean;\n  useArnRegion: Provider<boolean>;\n  region: Provider<string>;\n  regionInfoProvider: RegionInfoProvider;\n}\n\nexport function resolveBucketEndpointConfig<T>(\n  input: T & PreviouslyResolved & BucketEndpointInputConfig\n): T & BucketEndpointResolvedConfig {\n  const {\n    bucketEndpoint = false,\n    forcePathStyle = false,\n    useAccelerateEndpoint = false,\n    useDualstackEndpoint = false,\n    useArnRegion = false,\n  } = input;\n  return {\n    ...input,\n    bucketEndpoint,\n    forcePathStyle,\n    useAccelerateEndpoint,\n    useDualstackEndpoint,\n    useArnRegion: typeof useArnRegion === \"function\" ? useArnRegion : () => Promise.resolve(useArnRegion),\n  };\n}\n\nexport const NODE_USE_ARN_REGION_ENV_NAME = \"AWS_S3_USE_ARN_REGION\";\nexport const NODE_USE_ARN_REGION_INI_NAME = \"s3_use_arn_region\";\n\n/**\n * Config to load useArnRegion from environment variables and shared INI files\n *\n * @api private\n */\nexport const NODE_USE_ARN_REGION_CONFIG_OPTIONS: LoadedConfigSelectors<boolean> = {\n  environmentVariableSelector: (env: NodeJS.ProcessEnv) => {\n    if (!Object.prototype.hasOwnProperty.call(env, NODE_USE_ARN_REGION_ENV_NAME)) return undefined;\n    if (env[NODE_USE_ARN_REGION_ENV_NAME] === \"true\") return true;\n    if (env[NODE_USE_ARN_REGION_ENV_NAME] === \"false\") return false;\n    throw new Error(\n      `Cannot load env ${NODE_USE_ARN_REGION_ENV_NAME}. Expected \"true\" or \"false\", got ${env[NODE_USE_ARN_REGION_ENV_NAME]}.`\n    );\n  },\n  configFileSelector: (profile) => {\n    if (!Object.prototype.hasOwnProperty.call(profile, NODE_USE_ARN_REGION_INI_NAME)) return undefined;\n    if (profile[NODE_USE_ARN_REGION_INI_NAME] === \"true\") return true;\n    if (profile[NODE_USE_ARN_REGION_INI_NAME] === \"false\") return false;\n    throw new Error(\n      `Cannot load shared config entry ${NODE_USE_ARN_REGION_INI_NAME}. Expected \"true\" or \"false\", got ${profile[NODE_USE_ARN_REGION_INI_NAME]}.`\n    );\n  },\n  default: false,\n};\n","import {\n\tCredentials,\n\tICredentials,\n\tLogger,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { StorageAccessLevel, CustomPrefix } from '../types';\nimport {\n\tInitializeMiddleware,\n\tInitializeHandlerOptions,\n\tFinalizeRequestHandlerOptions,\n\tFinalizeRequestMiddleware,\n\tHandlerExecutionContext,\n} from '@aws-sdk/types';\nimport { S3ClientConfig, S3Client } from '@aws-sdk/client-s3';\nimport { CancelTokenSource } from 'axios';\nimport * as events from 'events';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport {\n\tlocalTestingStorageEndpoint,\n\tSET_CONTENT_LENGTH_HEADER,\n} from './StorageConstants';\n\nconst logger = new Logger('S3ClientUtils');\n// placeholder credentials in order to satisfy type requirement, always results in 403 when used\nconst INVALID_CRED = { accessKeyId: '', secretAccessKey: '' };\n\nexport const getPrefix = (config: {\n\tcredentials: ICredentials;\n\tlevel?: StorageAccessLevel;\n\tcustomPrefix?: CustomPrefix;\n\tidentityId?: string;\n}): string => {\n\tconst { credentials, level, customPrefix, identityId } = config;\n\n\tconst resolvedCustomPrefix = customPrefix || {};\n\tconst resolvedIdentityId = identityId || credentials.identityId;\n\tconst privatePath =\n\t\t(resolvedCustomPrefix.private !== undefined\n\t\t\t? resolvedCustomPrefix.private\n\t\t\t: 'private/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst protectedPath =\n\t\t(resolvedCustomPrefix.protected !== undefined\n\t\t\t? resolvedCustomPrefix.protected\n\t\t\t: 'protected/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst publicPath =\n\t\tresolvedCustomPrefix.public !== undefined\n\t\t\t? resolvedCustomPrefix.public\n\t\t\t: 'public/';\n\n\tswitch (level) {\n\t\tcase 'private':\n\t\t\treturn privatePath;\n\t\tcase 'protected':\n\t\t\treturn protectedPath;\n\t\tdefault:\n\t\t\treturn publicPath;\n\t}\n};\n\nexport const createPrefixMiddleware = (\n\topt: Record<string, any>,\n\tkey: string\n): InitializeMiddleware<any, any> => (next, _context) => async args => {\n\tconst credentials = await Credentials.get();\n\tconst cred = Credentials.shear(credentials);\n\tconst prefix = getPrefix({ ...opt, credentials: cred });\n\tconst clonedInput = Object.assign({}, args.input);\n\tif (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n\t\tclonedInput.Key = prefix + key;\n\t\targs.input = clonedInput;\n\t} else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n\t\tclonedInput.Prefix = prefix + key;\n\t\targs.input = clonedInput;\n\t}\n\tconst result = next(args);\n\treturn result;\n};\n\nconst isTimeSkewedError = (err: any): boolean =>\n\terr.ServerTime &&\n\ttypeof err.Code === 'string' &&\n\terr.Code === 'RequestTimeTooSkewed';\n\n// we want to take the S3Client config in parameter so we can modify it's systemClockOffset\nexport const autoAdjustClockskewMiddleware = (\n\tconfig: S3ClientConfig\n): FinalizeRequestMiddleware<any, any> => (\n\tnext,\n\t_context: HandlerExecutionContext\n) => async args => {\n\ttry {\n\t\treturn await next(args);\n\t} catch (err) {\n\t\tif (isTimeSkewedError(err)) {\n\t\t\tconst serverDate = new Date(err.ServerTime);\n\t\t\tconfig.systemClockOffset = serverDate.getTime() - Date.now();\n\t\t}\n\t\tthrow err;\n\t}\n};\n\nexport const autoAdjustClockskewMiddlewareOptions: FinalizeRequestHandlerOptions = {\n\tstep: 'finalizeRequest',\n\tname: 'autoAdjustClockskewMiddleware',\n};\n\nexport const prefixMiddlewareOptions: InitializeHandlerOptions = {\n\tstep: 'initialize',\n\tname: 'addPrefixMiddleware',\n};\n\nexport const credentialsProvider = async () => {\n\ttry {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return INVALID_CRED;\n\t\tconst cred = Credentials.shear(credentials);\n\t\tlogger.debug('credentials provider get credentials', cred);\n\t\treturn cred;\n\t} catch (error) {\n\t\tlogger.warn('credentials provider error', error);\n\t\treturn INVALID_CRED;\n\t}\n};\n\nexport const createS3Client = (\n\tconfig: {\n\t\tregion?: string;\n\t\tcancelTokenSource?: CancelTokenSource;\n\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\tuseAccelerateEndpoint?: boolean;\n\t},\n\temitter?: events.EventEmitter\n): S3Client => {\n\tconst {\n\t\tregion,\n\t\tcancelTokenSource,\n\t\tdangerouslyConnectToHttpEndpointForTesting,\n\t\tuseAccelerateEndpoint,\n\t} = config;\n\tlet localTestingConfig = {};\n\n\tif (dangerouslyConnectToHttpEndpointForTesting) {\n\t\tlocalTestingConfig = {\n\t\t\tendpoint: localTestingStorageEndpoint,\n\t\t\ttls: false,\n\t\t\tbucketEndpoint: false,\n\t\t\tforcePathStyle: true,\n\t\t};\n\t}\n\n\tconst s3client = new S3Client({\n\t\tregion,\n\t\t// Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n\t\t// changed or invalidated (e.g user signed out), the subsequent requests will fail.\n\t\tcredentials: credentialsProvider,\n\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t...localTestingConfig,\n\t\trequestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n\t\tuseAccelerateEndpoint,\n\t});\n\ts3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\treturn s3client;\n};\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { PutObjectOutput, PutObjectRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutObjectCommand, serializeAws_restXmlPutObjectCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutObjectCommandInput = Omit<PutObjectRequest, \"Body\"> & {\n  Body?: PutObjectRequest[\"Body\"] | string | Uint8Array | Buffer;\n};\nexport type PutObjectCommandOutput = PutObjectOutput & __MetadataBearer;\n\n/**\n * <p>Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object\n *          to it.</p>\n *\n *\n *          <p>Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the\n *          entire object to the bucket.</p>\n *\n *          <p>Amazon S3 is a distributed system. If it receives multiple write requests for the same object\n *          simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object\n *          locking; if you need this, make sure to build it into your application layer or use\n *          versioning instead.</p>\n *\n *          <p>To ensure that data is not corrupted traversing the network, use the\n *             <code>Content-MD5</code> header. When you use this header, Amazon S3 checks the object\n *          against the provided MD5 value and, if they do not match, returns an error. Additionally,\n *          you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to\n *          the calculated MD5 value.</p>\n *          <note>\n *             <p> The <code>Content-MD5</code> header is required for any request to upload an object\n *             with a retention period configured using Amazon S3 Object Lock. For more information about\n *             Amazon S3 Object Lock, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html\">Amazon S3 Object Lock Overview</a>\n *             in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>\n *          </note>\n *\n *\n *          <p>\n *             <b>Server-side Encryption</b>\n *          </p>\n *          <p>You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data\n *          when you access it. You have the option to provide your own encryption key or use AWS\n *          managed encryption keys (SSE-S3 or SSE-KMS). For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\">Using Server-Side\n *             Encryption</a>.</p>\n *          <p>If you request server-side encryption using AWS Key Management Service (SSE-KMS), you can enable an S3 Bucket Key at the object-level. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html\">Amazon S3 Bucket Keys</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *          <p>\n *             <b>Access Control List (ACL)-Specific Request\n *          Headers</b>\n *          </p>\n *          <p>You can use headers to grant ACL- based permissions. By default, all objects are\n *          private. Only the owner has full access control. When adding a new object, you can grant\n *          permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These\n *          permissions are then added to the ACL on the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access Control List\n *             (ACL) Overview</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html\">Managing ACLs Using the REST\n *             API</a>. </p>\n *\n *          <p>\n *             <b>Storage Class Options</b>\n *          </p>\n *          <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The\n *          STANDARD storage class provides high durability and high availability. Depending on\n *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses\n *          the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3\n *             Service Developer Guide</i>.</p>\n *\n *\n *          <p>\n *             <b>Versioning</b>\n *          </p>\n *          <p>If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID\n *          for the object being stored. Amazon S3 returns this ID in the response. When you enable\n *          versioning for a bucket, if Amazon S3 receives multiple write requests for the same object\n *          simultaneously, it stores all of the objects.</p>\n *          <p>For more information about versioning, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html\">Adding Objects to\n *             Versioning Enabled Buckets</a>. For information about returning the versioning state\n *          of a bucket, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a>. </p>\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\">CopyObject</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html\">DeleteObject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class PutObjectCommand extends $Command<PutObjectCommandInput, PutObjectCommandOutput, S3ClientResolvedConfig> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutObjectCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutObjectCommandInput, PutObjectCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutObjectCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutObjectRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutObjectOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutObjectCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlPutObjectCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutObjectCommandOutput> {\n    return deserializeAws_restXmlPutObjectCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { CreateMultipartUploadOutput, CreateMultipartUploadRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlCreateMultipartUploadCommand,\n  serializeAws_restXmlCreateMultipartUploadCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CreateMultipartUploadCommandInput = CreateMultipartUploadRequest;\nexport type CreateMultipartUploadCommandOutput = CreateMultipartUploadOutput & __MetadataBearer;\n\n/**\n * <p>This operation initiates a multipart upload and returns an upload ID. This upload ID is\n *          used to associate all of the parts in the specific multipart upload. You specify this\n *          upload ID in each of your subsequent upload part requests (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>). You also include this\n *          upload ID in the final request to either complete or abort the multipart upload\n *          request.</p>\n *\n *          <p>For more information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html\">Multipart Upload Overview</a>.</p>\n *\n *          <p>If you have configured a lifecycle rule to abort incomplete multipart uploads, the\n *          upload must complete within the number of days specified in the bucket lifecycle\n *          configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort\n *          operation and Amazon S3 aborts the multipart upload. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">Aborting\n *             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>\n *\n *          <p>For information about the permissions required to use the multipart upload API, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *             Permissions</a>.</p>\n *\n *          <p>For request signing, multipart upload is just a series of regular requests. You initiate\n *          a multipart upload, send one or more requests to upload parts, and then complete the\n *          multipart upload process. You sign each request individually. There is nothing special\n *          about signing multipart upload requests. For more information about signing, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\">Authenticating\n *             Requests (AWS Signature Version 4)</a>.</p>\n *\n *          <note>\n *             <p> After you initiate a multipart upload and upload one or more parts, to stop being\n *             charged for storing the uploaded parts, you must either complete or abort the multipart\n *             upload. Amazon S3 frees up the space used to store the parts and stop charging you for\n *             storing them only after you either complete or abort a multipart upload. </p>\n *          </note>\n *\n *          <p>You can optionally request server-side encryption. For server-side encryption, Amazon S3\n *          encrypts your data as it writes it to disks in its data centers and decrypts it when you\n *          access it. You can provide your own encryption key, or use AWS Key Management Service (AWS\n *          KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide\n *          your own encryption key, the request headers you provide in <a href=\"AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html\">UploadPartCopy</a> requests must match the headers you used in the request to\n *          initiate the upload by using <code>CreateMultipartUpload</code>. </p>\n *          <p>To perform a multipart upload with encryption using an AWS KMS CMK, the requester must\n *          have permission to the <code>kms:Encrypt</code>, <code>kms:Decrypt</code>,\n *             <code>kms:ReEncrypt*</code>, <code>kms:GenerateDataKey*</code>, and\n *             <code>kms:DescribeKey</code> actions on the key. These permissions are required because\n *          Amazon S3 must decrypt and read data from the encrypted file parts before it completes the\n *          multipart upload.</p>\n *\n *          <p>If your AWS Identity and Access Management (IAM) user or role is in the same AWS account\n *          as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM\n *          user or role belongs to a different account than the key, then you must have the\n *          permissions on both the key policy and your IAM user or role.</p>\n *\n *\n *          <p> For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\">Protecting\n *             Data Using Server-Side Encryption</a>.</p>\n *\n *          <dl>\n *             <dt>Access Permissions</dt>\n *             <dd>\n *                <p>When copying an object, you can optionally specify the accounts or groups that\n *                   should be granted specific permissions on the new object. There are two ways to\n *                   grant the permissions using the request headers:</p>\n *                <ul>\n *                   <li>\n *                      <p>Specify a canned ACL with the <code>x-amz-acl</code> request header. For\n *                         more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned ACL</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Specify access permissions explicitly with the\n *                            <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,\n *                            <code>x-amz-grant-write-acp</code>, and\n *                            <code>x-amz-grant-full-control</code> headers. These parameters map to\n *                         the set of permissions that Amazon S3 supports in an ACL. For more information,\n *                         see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access Control List (ACL)\n *                            Overview</a>.</p>\n *                   </li>\n *                </ul>\n *                <p>You can use either a canned ACL or specify access permissions explicitly. You\n *                   cannot do both.</p>\n *             </dd>\n *             <dt>Server-Side- Encryption-Specific Request Headers</dt>\n *             <dd>\n *                <p>You can optionally tell Amazon S3 to encrypt data at rest using server-side\n *                   encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts\n *                   your data as it writes it to disks in its data centers and decrypts it when you\n *                   access it. The option you use depends on whether you want to use AWS managed\n *                   encryption keys or provide your own encryption key. </p>\n *                <ul>\n *                   <li>\n *                      <p>Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored\n *                         in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys\n *                         used to encrypt data, specify the following headers in the request.</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-server-side-encryption</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-aws-kms-key-id</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-context</p>\n *                         </li>\n *                      </ul>\n *                      <note>\n *                         <p>If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but\n *                            don't provide <code>x-amz-server-side-encryption-aws-kms-key-id</code>,\n *                            Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.</p>\n *                      </note>\n *                      <important>\n *                         <p>All GET and PUT requests for an object protected by AWS KMS fail if\n *                            you don't make them with SSL or by using SigV4.</p>\n *                      </important>\n *                      <p>For more information about server-side encryption with CMKs stored in AWS\n *                         KMS (SSE-KMS), see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">Protecting Data Using Server-Side Encryption with CMKs stored in AWS\n *                            KMS</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Use customer-provided encryption keys – If you want to manage your own\n *                         encryption keys, provide all the following headers in the request.</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-algorithm</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-key</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *                         </li>\n *                      </ul>\n *                      <p>For more information about server-side encryption with CMKs stored in AWS\n *                         KMS (SSE-KMS), see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">Protecting Data Using Server-Side Encryption with CMKs stored in AWS\n *                            KMS</a>.</p>\n *                   </li>\n *                </ul>\n *             </dd>\n *             <dt>Access-Control-List (ACL)-Specific Request Headers</dt>\n *             <dd>\n *                <p>You also can use the following access control–related headers with this\n *                   operation. By default, all objects are private. Only the owner has full access\n *                   control. When adding a new object, you can grant permissions to individual AWS\n *                   accounts or to predefined groups defined by Amazon S3. These permissions are then added\n *                   to the access control list (ACL) on the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html\">Using ACLs</a>. With this\n *                   operation, you can grant access permissions using one of the following two\n *                   methods:</p>\n *                <ul>\n *                   <li>\n *                      <p>Specify a canned ACL (<code>x-amz-acl</code>) — Amazon S3 supports a set of\n *                         predefined ACLs, known as <i>canned ACLs</i>. Each canned ACL\n *                         has a predefined set of grantees and permissions. For more information, see\n *                            <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned\n *                         ACL</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Specify access permissions explicitly — To explicitly grant access\n *                         permissions to specific AWS accounts or groups, use the following headers.\n *                         Each header maps to specific permissions that Amazon S3 supports in an ACL. For\n *                         more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access\n *                            Control List (ACL) Overview</a>. In the header, you specify a list of\n *                         grantees who get the specific permission. To grant permissions explicitly,\n *                         use:</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-grant-read</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-write</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-read-acp</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-write-acp</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-full-control</p>\n *                         </li>\n *                      </ul>\n *                      <p>You specify each grantee as a type=value pair, where the type is one of\n *                         the following:</p>\n *                      <ul>\n *                         <li>\n *                            <p>\n *                               <code>id</code> – if the value specified is the canonical user ID\n *                               of an AWS account</p>\n *                         </li>\n *                         <li>\n *                            <p>\n *                               <code>uri</code> – if you are granting permissions to a predefined\n *                               group</p>\n *                         </li>\n *                         <li>\n *                            <p>\n *                               <code>emailAddress</code> – if the value specified is the email\n *                               address of an AWS account</p>\n *                            <note>\n *                               <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>\n *                               <ul>\n *                                  <li>\n *                                     <p>US East (N. Virginia)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>US West (N. California)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p> US West (Oregon)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p> Asia Pacific (Singapore)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Asia Pacific (Sydney)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Asia Pacific (Tokyo)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Europe (Ireland)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>South America (São Paulo)</p>\n *                                  </li>\n *                               </ul>\n *                               <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\">Regions and Endpoints</a> in the AWS General Reference.</p>\n *                            </note>\n *                         </li>\n *                      </ul>\n *                      <p>For example, the following <code>x-amz-grant-read</code> header grants the AWS accounts identified by account IDs permissions to read object data and its metadata:</p>\n *                      <p>\n *                         <code>x-amz-grant-read: id=\"11112222333\", id=\"444455556666\" </code>\n *                      </p>\n *                   </li>\n *                </ul>\n *\n *             </dd>\n *          </dl>\n *\n *          <p>The following operations are related to <code>CreateMultipartUpload</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class CreateMultipartUploadCommand extends $Command<\n  CreateMultipartUploadCommandInput,\n  CreateMultipartUploadCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CreateMultipartUploadCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CreateMultipartUploadCommandInput, CreateMultipartUploadCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"CreateMultipartUploadCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CreateMultipartUploadRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateMultipartUploadOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CreateMultipartUploadCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlCreateMultipartUploadCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CreateMultipartUploadCommandOutput> {\n    return deserializeAws_restXmlCreateMultipartUploadCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { UploadPartOutput, UploadPartRequest } from \"../models/models_1\";\nimport {\n  deserializeAws_restXmlUploadPartCommand,\n  serializeAws_restXmlUploadPartCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type UploadPartCommandInput = Omit<UploadPartRequest, \"Body\"> & {\n  Body?: UploadPartRequest[\"Body\"] | string | Uint8Array | Buffer;\n};\nexport type UploadPartCommandOutput = UploadPartOutput & __MetadataBearer;\n\n/**\n * <p>Uploads a part in a multipart upload.</p>\n *          <note>\n *             <p>In this operation, you provide part data in your request. However, you have an option\n *             to specify your existing Amazon S3 object as a data source for the part you are uploading. To\n *             upload a part from an existing object, you use the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html\">UploadPartCopy</a> operation.\n *          </p>\n *          </note>\n *\n *          <p>You must initiate a multipart upload (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>)\n *          before you can upload any part. In response to your initiate request, Amazon S3 returns an\n *          upload ID, a unique identifier, that you must include in your upload part request.</p>\n *          <p>Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely\n *          identifies a part and also defines its position within the object being created. If you\n *          upload a new part using the same part number that was used with a previous part, the\n *          previously uploaded part is overwritten. Each part must be at least 5 MB in size, except\n *          the last part. There is no size limit on the last part of your multipart upload.</p>\n *          <p>To ensure that data is not corrupted when traversing the network, specify the\n *             <code>Content-MD5</code> header in the upload part request. Amazon S3 checks the part data\n *          against the provided MD5 value. If they do not match, Amazon S3 returns an error. </p>\n *\n *          <p>If the upload request is signed with Signature Version 4, then AWS S3 uses the\n *             <code>x-amz-content-sha256</code> header as a checksum instead of\n *             <code>Content-MD5</code>. For more information see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html\">Authenticating Requests: Using the Authorization Header (AWS Signature Version\n *             4)</a>. </p>\n *\n *\n *\n *          <p>\n *             <b>Note:</b> After you initiate multipart upload and upload\n *          one or more parts, you must either complete or abort multipart upload in order to stop\n *          getting charged for storage of the uploaded parts. Only after you either complete or abort\n *          multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts\n *          storage.</p>\n *\n *          <p>For more information on multipart uploads, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html\">Multipart Upload Overview</a> in the\n *             <i>Amazon Simple Storage Service Developer Guide </i>.</p>\n *          <p>For information on the permissions required to use the multipart upload API, go to\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *             Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *\n *          <p>You can optionally request server-side encryption where Amazon S3 encrypts your data as it\n *          writes it to disks in its data centers and decrypts it for you when you access it. You have\n *          the option of providing your own encryption key, or you can use the AWS managed encryption\n *          keys. If you choose to provide your own encryption key, the request headers you provide in\n *          the request must match the headers you used in the request to initiate the upload by using\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>. For more information, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\">Using Server-Side Encryption</a> in\n *          the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *\n *          <p>Server-side encryption is supported by the S3 Multipart Upload actions. Unless you are\n *          using a customer-provided encryption key, you don't need to specify the encryption\n *          parameters in each UploadPart request. Instead, you only need to specify the server-side\n *          encryption parameters in the initial Initiate Multipart request. For more information, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>.</p>\n *\n *          <p>If you requested server-side encryption using a customer-provided encryption key in your\n *          initiate multipart upload request, you must provide identical encryption information in\n *          each part upload using the following headers.</p>\n *\n *\n *          <ul>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-algorithm</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *             </li>\n *          </ul>\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: NoSuchUpload</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The specified multipart upload does not exist. The upload\n *                         ID might be invalid, or the multipart upload might have been aborted or\n *                         completed.</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i> HTTP Status Code: 404 Not Found </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>SOAP Fault Code Prefix: Client</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class UploadPartCommand extends $Command<\n  UploadPartCommandInput,\n  UploadPartCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: UploadPartCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<UploadPartCommandInput, UploadPartCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"UploadPartCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: UploadPartRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: UploadPartOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: UploadPartCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlUploadPartCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<UploadPartCommandOutput> {\n    return deserializeAws_restXmlUploadPartCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import {\n\tUploadPartCommandInput,\n\tCompletedPart,\n\tS3Client,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tPart,\n\tAbortMultipartUploadCommand,\n\tListPartsCommand,\n\tCreateMultipartUploadCommand,\n\tPutObjectCommandInput,\n\tListObjectsV2Command,\n} from '@aws-sdk/client-s3';\nimport * as events from 'events';\nimport axios, { Canceler, CancelTokenSource } from 'axios';\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { Logger } from '@aws-amplify/core';\nimport { UploadTask } from '../types/Provider';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport {\n\tSET_CONTENT_LENGTH_HEADER,\n\tUPLOADS_STORAGE_KEY,\n} from '../common/StorageConstants';\nimport { StorageAccessLevel } from '..';\n\nconst logger = new Logger('AWSS3UploadTask');\nexport enum AWSS3UploadTaskState {\n\tINIT,\n\tIN_PROGRESS,\n\tPAUSED,\n\tCANCELLED,\n\tCOMPLETED,\n}\n\nexport enum TaskEvents {\n\tCANCEL = 'cancel',\n\tUPLOAD_COMPLETE = 'uploadComplete',\n\tUPLOAD_PROGRESS = 'uploadPartProgress',\n\tERROR = 'error',\n}\n\nexport interface AWSS3UploadTaskParams {\n\ts3Client: S3Client;\n\tfile: Blob;\n\tstorage: Storage;\n\tlevel: StorageAccessLevel;\n\tparams: PutObjectCommandInput;\n\tprefixPromise: Promise<string>;\n\temitter?: events.EventEmitter;\n}\n\nexport interface InProgressRequest {\n\tuploadPartInput: UploadPartCommandInput;\n\ts3Request: Promise<any>;\n\tcancel: Canceler;\n}\n\nexport interface UploadTaskCompleteEvent {\n\tkey: string;\n}\n\nexport interface UploadTaskProgressEvent {\n\t/**\n\t * bytes that has been sent to S3 so far\n\t */\n\tloaded: number;\n\t/**\n\t * total bytes that needs to be sent to S3\n\t */\n\ttotal: number;\n}\n\nexport interface FileMetadata {\n\tbucket: string;\n\tfileName: string;\n\tkey: string;\n\t// Unix timestamp in ms\n\tlastTouched: number;\n\tuploadId: string;\n}\n\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nconst MAX_PARTS = 10000;\n// 5MB in bytes\nconst PART_SIZE = 5 * 1024 * 1024;\nconst DEFAULT_QUEUE_SIZE = 4;\n\nfunction comparePartNumber(a: CompletedPart, b: CompletedPart) {\n\treturn a.PartNumber - b.PartNumber;\n}\n\nexport class AWSS3UploadTask implements UploadTask {\n\tprivate readonly emitter: events.EventEmitter;\n\tprivate readonly file: Blob;\n\tprivate readonly partSize: number = PART_SIZE;\n\tprivate readonly queueSize = DEFAULT_QUEUE_SIZE;\n\tprivate readonly s3client: S3Client;\n\tprivate readonly storage: Storage;\n\tprivate readonly storageSync: Promise<any>;\n\tprivate readonly fileId: string;\n\tprivate readonly params: PutObjectCommandInput;\n\tprivate readonly prefixPromise: Promise<string>;\n\tprivate inProgress: InProgressRequest[] = [];\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate queued: UploadPartCommandInput[] = [];\n\tprivate bytesUploaded: number = 0;\n\tprivate totalBytes: number = 0;\n\tprivate uploadId: string;\n\n\tpublic state: AWSS3UploadTaskState = AWSS3UploadTaskState.INIT;\n\n\tconstructor({\n\t\ts3Client,\n\t\tfile,\n\t\temitter,\n\t\tstorage,\n\t\tparams,\n\t\tlevel,\n\t\tprefixPromise,\n\t}: AWSS3UploadTaskParams) {\n\t\tthis.prefixPromise = prefixPromise;\n\t\tthis.s3client = s3Client;\n\t\tthis.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\t\tthis.storage = storage;\n\t\tthis.storageSync = Promise.resolve();\n\t\tif (typeof this.storage['sync'] === 'function') {\n\t\t\tthis.storageSync = this.storage['sync']();\n\t\t}\n\t\tthis.params = params;\n\t\tthis.file = file;\n\t\tthis.totalBytes = this.file.size;\n\t\tthis.bytesUploaded = 0;\n\t\tthis.emitter = emitter;\n\t\tthis.queued = [];\n\t\tthis.fileId = this._getFileId(level);\n\t\tthis._validateParams();\n\t\t// event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n\t\t// function to it unless user adds their own onError callback\n\t\tthis.emitter.on(TaskEvents.ERROR, () => {});\n\t}\n\n\tget percent() {\n\t\treturn (this.bytesUploaded / this.totalBytes) * 100;\n\t}\n\n\tget isInProgress() {\n\t\treturn this.state === AWSS3UploadTaskState.IN_PROGRESS;\n\t}\n\n\tprivate async _listSingleFile({\n\t\tkey,\n\t\tbucket,\n\t}: {\n\t\tkey: string;\n\t\tbucket: string;\n\t}) {\n\t\tconst listObjectRes = await this.s3client.send(\n\t\t\tnew ListObjectsV2Command({\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: key,\n\t\t\t})\n\t\t);\n\t\tconst { Contents = [] } = listObjectRes;\n\t\tconst prefix = await this.prefixPromise;\n\t\tconst obj = Contents.find(o => o.Key === `${prefix}${key}`);\n\t\treturn obj;\n\t}\n\n\tprivate _getFileId(level: StorageAccessLevel): string {\n\t\t// We should check if it's a File first because File is also instance of a Blob\n\t\tif (isFile(this.file)) {\n\t\t\treturn [\n\t\t\t\tthis.file.name,\n\t\t\t\tthis.file.lastModified,\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t} else {\n\t\t\treturn [\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t}\n\t}\n\n\tprivate async _findCachedUploadParts(): Promise<{\n\t\tparts: Part[];\n\t\tuploadId: string;\n\t}> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\n\t\tif (\n\t\t\tObject.keys(uploadRequests).length === 0 ||\n\t\t\t!Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)\n\t\t) {\n\t\t\treturn { parts: [], uploadId: null };\n\t\t}\n\n\t\tconst cachedUploadFileData = uploadRequests[this.fileId];\n\t\tcachedUploadFileData.lastTouched = Date.now();\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\n\t\tconst listPartsOutput = await this.s3client.send(\n\t\t\tnew ListPartsCommand({\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tUploadId: cachedUploadFileData.uploadId,\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\tparts: listPartsOutput.Parts || [],\n\t\t\tuploadId: cachedUploadFileData.uploadId,\n\t\t};\n\t}\n\n\tprivate _emitEvent<T = any>(event: string, payload: T) {\n\t\tthis.emitter.emit(event, payload);\n\t}\n\n\tprivate _validateParams() {\n\t\tif (this.file.size / this.partSize > MAX_PARTS) {\n\t\t\tthrow new Error(\n\t\t\t\t`Too many parts. Number of parts is ${this.file.size /\n\t\t\t\t\tthis.partSize}, maximum is ${MAX_PARTS}.`\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _listCachedUploadTasks(): Promise<\n\t\tRecord<string, FileMetadata>\n\t> {\n\t\tawait this.storageSync;\n\t\tconst tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n\t\treturn JSON.parse(tasks);\n\t}\n\n\tprivate async _cache(fileMetadata: FileMetadata): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tuploadRequests[this.fileId] = fileMetadata;\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _isCached(): Promise<boolean> {\n\t\treturn Object.prototype.hasOwnProperty.call(\n\t\t\tawait this._listCachedUploadTasks(),\n\t\t\tthis.fileId\n\t\t);\n\t}\n\n\tprivate async _removeFromCache(): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tdelete uploadRequests[this.fileId];\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _onPartUploadCompletion({\n\t\teTag,\n\t\tpartNumber,\n\t\tchunk,\n\t}: {\n\t\teTag: string;\n\t\tpartNumber: number;\n\t\tchunk: UploadPartCommandInput['Body'];\n\t}) {\n\t\tthis.completedParts.push({\n\t\t\tETag: eTag,\n\t\t\tPartNumber: partNumber,\n\t\t});\n\t\tthis.bytesUploaded += byteLength(chunk);\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t\t// Remove the completed item from the inProgress array\n\t\tthis.inProgress = this.inProgress.filter(\n\t\t\tjob => job.uploadPartInput.PartNumber !== partNumber\n\t\t);\n\t\tif (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n\t\t\tthis._startNextPart();\n\t\tif (this._isDone()) this._completeUpload();\n\t}\n\n\tprivate async _completeUpload() {\n\t\ttry {\n\t\t\tawait this.s3client.send(\n\t\t\t\tnew CompleteMultipartUploadCommand({\n\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\tMultipartUpload: {\n\t\t\t\t\t\t// Parts are not always completed in order, we need to manually sort them\n\t\t\t\t\t\tParts: this.completedParts.sort(comparePartNumber),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._verifyFileSize();\n\t\t\tthis._emitEvent<UploadTaskCompleteEvent>(TaskEvents.UPLOAD_COMPLETE, {\n\t\t\t\tkey: `${this.params.Bucket}/${this.params.Key}`,\n\t\t\t});\n\t\t\tthis._removeFromCache();\n\t\t\tthis.state = AWSS3UploadTaskState.COMPLETED;\n\t\t} catch (err) {\n\t\t\tlogger.error('error completing upload', err);\n\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t}\n\t}\n\n\tprivate async _makeUploadPartRequest(\n\t\tinput: UploadPartCommandInput,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\ttry {\n\t\t\tconst res = await this.s3client.send(new UploadPartCommand(input), {\n\t\t\t\tcancelTokenSource,\n\t\t\t} as HttpHandlerOptions);\n\t\t\tawait this._onPartUploadCompletion({\n\t\t\t\teTag: res.ETag,\n\t\t\t\tpartNumber: input.PartNumber,\n\t\t\t\tchunk: input.Body,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\t\tlogger.log('upload paused');\n\t\t\t} else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\t\tlogger.log('upload aborted');\n\t\t\t} else {\n\t\t\t\tlogger.error('error starting next part of upload: ', err);\n\t\t\t}\n\t\t\t// axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n\t\t\t// expected behavior\n\t\t\tif (\n\t\t\t\t!axios.isCancel(err) &&\n\t\t\t\terr.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t) {\n\t\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t\t\tthis.pause();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _startNextPart() {\n\t\tif (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n\t\t\tconst cancelTokenSource = axios.CancelToken.source();\n\t\t\tconst nextPart = this.queued.shift();\n\t\t\tthis.inProgress.push({\n\t\t\t\tuploadPartInput: nextPart,\n\t\t\t\ts3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n\t\t\t\tcancel: cancelTokenSource.cancel,\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Verify on S3 side that the file size matches the one on the client side.\n\t *\n\t * @async\n\t * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n\t */\n\tprivate async _verifyFileSize() {\n\t\tconst obj = await this._listSingleFile({\n\t\t\tkey: this.params.Key,\n\t\t\tbucket: this.params.Bucket,\n\t\t});\n\t\tconst valid = Boolean(obj && obj.Size === this.file.size);\n\t\tif (!valid) {\n\t\t\tthrow new Error(\n\t\t\t\t'File size does not match between local file and file on s3'\n\t\t\t);\n\t\t}\n\t\treturn valid;\n\t}\n\n\tprivate _isDone() {\n\t\treturn (\n\t\t\t!this.queued.length &&\n\t\t\t!this.inProgress.length &&\n\t\t\tthis.bytesUploaded === this.totalBytes\n\t\t);\n\t}\n\n\tprivate _createParts() {\n\t\tconst size = this.file.size;\n\t\tconst parts: UploadPartCommandInput[] = [];\n\t\tfor (let bodyStart = 0; bodyStart < size; ) {\n\t\t\tconst bodyEnd = Math.min(bodyStart + this.partSize, size);\n\t\t\tparts.push({\n\t\t\t\tBody: this.file.slice(bodyStart, bodyEnd),\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tPartNumber: parts.length + 1,\n\t\t\t\tUploadId: this.uploadId,\n\t\t\t});\n\t\t\tbodyStart += this.partSize;\n\t\t}\n\t\treturn parts;\n\t}\n\n\tprivate _initCachedUploadParts(cachedParts: Part[]) {\n\t\tthis.bytesUploaded += cachedParts.reduce((acc, part) => acc + part.Size, 0);\n\t\t// Find the set of part numbers that have already been uploaded\n\t\tconst uploadedPartNumSet = new Set(\n\t\t\tcachedParts.map(part => part.PartNumber)\n\t\t);\n\t\tthis.queued = this.queued.filter(\n\t\t\tpart => !uploadedPartNumSet.has(part.PartNumber)\n\t\t);\n\t\tthis.completedParts = cachedParts.map(part => ({\n\t\t\tPartNumber: part.PartNumber,\n\t\t\tETag: part.ETag,\n\t\t}));\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t}\n\n\tprivate async _initMultipartUpload() {\n\t\tconst res = await this.s3client.send(\n\t\t\tnew CreateMultipartUploadCommand(this.params)\n\t\t);\n\t\tthis._cache({\n\t\t\tuploadId: res.UploadId,\n\t\t\tlastTouched: Date.now(),\n\t\t\tbucket: this.params.Bucket,\n\t\t\tkey: this.params.Key,\n\t\t\tfileName: this.file instanceof File ? this.file.name : '',\n\t\t});\n\t\treturn res.UploadId;\n\t}\n\n\tprivate async _initializeUploadTask() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\ttry {\n\t\t\tif (await this._isCached()) {\n\t\t\t\tconst { parts, uploadId } = await this._findCachedUploadParts();\n\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\tthis.queued = this._createParts();\n\t\t\t\tthis._initCachedUploadParts(parts);\n\t\t\t\tthis._startUpload();\n\t\t\t} else {\n\t\t\t\tif (!this.uploadId) {\n\t\t\t\t\tconst uploadId = await this._initMultipartUpload();\n\t\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\t\tthis.queued = this._createParts();\n\t\t\t\t\tthis._startUpload();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (!axios.isCancel(err)) {\n\t\t\t\tlogger.error('Error initializing the upload task', err);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resume(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n\t\t\tlogger.warn('Upload task already in progress');\n\t\t\t// first time running resume, find any cached parts on s3 or start a new multipart upload request before\n\t\t\t// starting the upload\n\t\t} else if (!this.uploadId) {\n\t\t\tthis._initializeUploadTask();\n\t\t} else {\n\t\t\tthis._startUpload();\n\t\t}\n\t}\n\n\tprivate _startUpload() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\tfor (let i = 0; i < this.queueSize; i++) {\n\t\t\tthis._startNextPart();\n\t\t}\n\t}\n\n\tasync _cancel(): Promise<boolean> {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t\treturn false;\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthis.pause();\n\t\t\tthis.queued = [];\n\t\t\tthis.completedParts = [];\n\t\t\tthis.bytesUploaded = 0;\n\t\t\tthis.state = AWSS3UploadTaskState.CANCELLED;\n\t\t\ttry {\n\t\t\t\tawait this.s3client.send(\n\t\t\t\t\tnew AbortMultipartUploadCommand({\n\t\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tawait this._removeFromCache();\n\t\t\t\treturn true;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('Error cancelling upload task', err);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * pause this particular upload task\n\t **/\n\tpublic pause(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\tlogger.warn('This task is already paused');\n\t\t}\n\t\tthis.state = AWSS3UploadTaskState.PAUSED;\n\t\t// Use axios cancel token to abort the part request immediately\n\t\t// Add the inProgress parts back to pending\n\t\tconst removedInProgressReq = this.inProgress.splice(\n\t\t\t0,\n\t\t\tthis.inProgress.length\n\t\t);\n\t\tremovedInProgressReq.forEach(req => {\n\t\t\treq.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n\t\t});\n\t\t// Put all removed in progress parts back into the queue\n\t\tthis.queued.unshift(\n\t\t\t...removedInProgressReq.map(req => req.uploadPartInput)\n\t\t);\n\t}\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { CompleteMultipartUploadOutput, CompleteMultipartUploadRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlCompleteMultipartUploadCommand,\n  serializeAws_restXmlCompleteMultipartUploadCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getThrow200ExceptionsPlugin } from \"@aws-sdk/middleware-sdk-s3\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CompleteMultipartUploadCommandInput = CompleteMultipartUploadRequest;\nexport type CompleteMultipartUploadCommandOutput = CompleteMultipartUploadOutput & __MetadataBearer;\n\n/**\n * <p>Completes a multipart upload by assembling previously uploaded parts.</p>\n *          <p>You first initiate the multipart upload and then upload all parts using the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *          operation. After successfully uploading all relevant parts of an upload, you call this\n *          operation to complete the upload. Upon receiving this request, Amazon S3 concatenates all\n *          the parts in ascending order by part number to create a new object. In the Complete\n *          Multipart Upload request, you must provide the parts list. You must ensure that the parts\n *          list is complete. This operation concatenates the parts that you provide in the list. For\n *          each part in the list, you must provide the part number and the <code>ETag</code> value,\n *          returned after that part was uploaded.</p>\n *          <p>Processing of a Complete Multipart Upload request could take several minutes to\n *          complete. After Amazon S3 begins processing the request, it sends an HTTP response header that\n *          specifies a 200 OK response. While processing is in progress, Amazon S3 periodically sends white\n *          space characters to keep the connection from timing out. Because a request could fail after\n *          the initial 200 OK response has been sent, it is important that you check the response body\n *          to determine whether the request succeeded.</p>\n *          <p>Note that if <code>CompleteMultipartUpload</code> fails, applications should be prepared\n *          to retry the failed requests. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html\">Amazon S3 Error Best Practices</a>.</p>\n *          <p>For more information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *             Upload</a>.</p>\n *          <p>For information about permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *\n *\n *          <p>\n *             <code>CompleteMultipartUpload</code> has the following special errors:</p>\n *          <ul>\n *             <li>\n *                <p>Error code: <code>EntityTooSmall</code>\n *                </p>\n *                <ul>\n *                   <li>\n *                      <p>Description: Your proposed upload is smaller than the minimum allowed object\n *                      size. Each part must be at least 5 MB in size, except the last part.</p>\n *                   </li>\n *                   <li>\n *                      <p>400 Bad Request</p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p>Error code: <code>InvalidPart</code>\n *                </p>\n *                <ul>\n *                   <li>\n *                      <p>Description: One or more of the specified parts could not be found. The part\n *                      might not have been uploaded, or the specified entity tag might not have\n *                      matched the part's entity tag.</p>\n *                   </li>\n *                   <li>\n *                      <p>400 Bad Request</p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p>Error code: <code>InvalidPartOrder</code>\n *                </p>\n *                <ul>\n *                   <li>\n *                      <p>Description: The list of parts was not in ascending order. The parts list\n *                      must be specified in order by part number.</p>\n *                   </li>\n *                   <li>\n *                      <p>400 Bad Request</p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p>Error code: <code>NoSuchUpload</code>\n *                </p>\n *                <ul>\n *                   <li>\n *                      <p>Description: The specified multipart upload does not exist. The upload ID\n *                      might be invalid, or the multipart upload might have been aborted or\n *                      completed.</p>\n *                   </li>\n *                   <li>\n *                      <p>404 Not Found</p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *          <p>The following operations are related to <code>CompleteMultipartUpload</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class CompleteMultipartUploadCommand extends $Command<\n  CompleteMultipartUploadCommandInput,\n  CompleteMultipartUploadCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CompleteMultipartUploadCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CompleteMultipartUploadCommandInput, CompleteMultipartUploadCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"CompleteMultipartUploadCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CompleteMultipartUploadRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CompleteMultipartUploadOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CompleteMultipartUploadCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlCompleteMultipartUploadCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CompleteMultipartUploadCommandOutput> {\n    return deserializeAws_restXmlCompleteMultipartUploadCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { AbortMultipartUploadOutput, AbortMultipartUploadRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlAbortMultipartUploadCommand,\n  serializeAws_restXmlAbortMultipartUploadCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type AbortMultipartUploadCommandInput = AbortMultipartUploadRequest;\nexport type AbortMultipartUploadCommandOutput = AbortMultipartUploadOutput & __MetadataBearer;\n\n/**\n * <p>This operation aborts a multipart upload. After a multipart upload is aborted, no\n *          additional parts can be uploaded using that upload ID. The storage consumed by any\n *          previously uploaded parts will be freed. However, if any part uploads are currently in\n *          progress, those part uploads might or might not succeed. As a result, it might be necessary\n *          to abort a given multipart upload multiple times in order to completely free all storage\n *          consumed by all parts. </p>\n *          <p>To verify that all parts have been removed, so you don't get charged for the part\n *          storage, you should call the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a> operation and ensure that\n *          the parts list is empty.</p>\n *          <p>For information about permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *          <p>The following operations are related to <code>AbortMultipartUpload</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class AbortMultipartUploadCommand extends $Command<\n  AbortMultipartUploadCommandInput,\n  AbortMultipartUploadCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: AbortMultipartUploadCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<AbortMultipartUploadCommandInput, AbortMultipartUploadCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"AbortMultipartUploadCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: AbortMultipartUploadRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: AbortMultipartUploadOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: AbortMultipartUploadCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlAbortMultipartUploadCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<AbortMultipartUploadCommandOutput> {\n    return deserializeAws_restXmlAbortMultipartUploadCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { ListPartsOutput, ListPartsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlListPartsCommand, serializeAws_restXmlListPartsCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type ListPartsCommandInput = ListPartsRequest;\nexport type ListPartsCommandOutput = ListPartsOutput & __MetadataBearer;\n\n/**\n * <p>Lists the parts that have been uploaded for a specific multipart upload. This operation\n *          must include the upload ID, which you obtain by sending the initiate multipart upload\n *          request (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>).\n *          This request returns a maximum of 1,000 uploaded parts. The default number of parts\n *          returned is 1,000 parts. You can restrict the number of parts returned by specifying the\n *             <code>max-parts</code> request parameter. If your multipart upload consists of more than\n *          1,000 parts, the response returns an <code>IsTruncated</code> field with the value of true,\n *          and a <code>NextPartNumberMarker</code> element. In subsequent <code>ListParts</code>\n *          requests you can include the part-number-marker query string parameter and set its value to\n *          the <code>NextPartNumberMarker</code> field value from the previous response.</p>\n *\n *          <p>For more information on multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *             Upload</a>.</p>\n *\n *          <p>For information on permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *\n *          <p>The following operations are related to <code>ListParts</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class ListPartsCommand extends $Command<ListPartsCommandInput, ListPartsCommandOutput, S3ClientResolvedConfig> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: ListPartsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<ListPartsCommandInput, ListPartsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"ListPartsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: ListPartsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: ListPartsOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: ListPartsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlListPartsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<ListPartsCommandOutput> {\n    return deserializeAws_restXmlListPartsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n","/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tPutObjectCommand,\n\tPutObjectRequest,\n\tCreateMultipartUploadCommand,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tCompleteMultipartUploadCommandInput,\n\tListPartsCommand,\n\tAbortMultipartUploadCommand,\n\tCompletedPart,\n\tS3Client,\n} from '@aws-sdk/client-s3';\nimport {\n\tSEND_UPLOAD_PROGRESS_EVENT,\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tAxiosHttpHandlerOptions,\n} from './axios-http-handler';\nimport * as events from 'events';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\n\nconst logger = new Logger('AWSS3ProviderManagedUpload');\n\nexport declare interface Part {\n\tbodyPart: any;\n\tpartNumber: number;\n\temitter: events.EventEmitter;\n\tetag?: string;\n\t_lastUploadedBytes: number;\n}\n\nexport class AWSS3ProviderManagedUpload {\n\t// Defaults\n\tprotected minPartSize = 5 * 1024 * 1024; // in MB\n\tprivate queueSize = 4;\n\n\t// Data for current upload\n\tprivate body = null;\n\tprivate params: PutObjectRequest = null;\n\tprivate opts = null;\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate s3client: S3Client;\n\tprivate uploadId = null;\n\n\t// Progress reporting\n\tprivate bytesUploaded = 0;\n\tprivate totalBytesToUpload = 0;\n\tprivate emitter: events.EventEmitter = null;\n\n\tconstructor(params: PutObjectRequest, opts, emitter: events.EventEmitter) {\n\t\tthis.params = params;\n\t\tthis.opts = opts;\n\t\tthis.emitter = emitter;\n\t\tthis.s3client = this._createNewS3Client(opts, emitter);\n\t}\n\n\tpublic async upload() {\n\t\ttry {\n\t\t\tthis.body = await this.validateAndSanitizeBody(this.params.Body);\n\t\t\tthis.totalBytesToUpload = this.byteLength(this.body);\n\t\t\tif (this.totalBytesToUpload <= this.minPartSize) {\n\t\t\t\t// Multipart upload is not required. Upload the sanitized body as is\n\t\t\t\tthis.params.Body = this.body;\n\t\t\t\tconst putObjectCommand = new PutObjectCommand(this.params);\n\t\t\t\treturn this.s3client.send(putObjectCommand);\n\t\t\t} else {\n\t\t\t\t// Step 1: Initiate the multi part upload\n\t\t\t\tthis.uploadId = await this.createMultiPartUpload();\n\n\t\t\t\t// Step 2: Upload chunks in parallel as requested\n\t\t\t\tconst numberOfPartsToUpload = Math.ceil(\n\t\t\t\t\tthis.totalBytesToUpload / this.minPartSize\n\t\t\t\t);\n\n\t\t\t\tconst parts: Part[] = this.createParts();\n\t\t\t\tfor (\n\t\t\t\t\tlet start = 0;\n\t\t\t\t\tstart < numberOfPartsToUpload;\n\t\t\t\t\tstart += this.queueSize\n\t\t\t\t) {\n\n\t\t\t\t\t// Upload as many as `queueSize` parts simultaneously\n\t\t\t\t\tawait this.uploadParts(\n\t\t\t\t\t\tthis.uploadId,\n\t\t\t\t\t\tparts.slice(start, start + this.queueSize)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tparts.map(part => {\n\t\t\t\t\tthis.removeEventListener(part);\n\t\t\t\t});\n\n\t\t\t\t// Step 3: Finalize the upload such that S3 can recreate the file\n\t\t\t\treturn await this.finishMultiPartUpload(this.uploadId);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// if any error is thrown, call cleanup\n\t\t\tawait this.cleanup(this.uploadId);\n\t\t\tlogger.error('Error. Cancelling the multipart upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate createParts(): Part[] {\n\t\ttry {\n\t\t\tconst parts: Part[] = [];\n\t\t\tfor (let bodyStart = 0; bodyStart < this.totalBytesToUpload; ) {\n\t\t\t\tconst bodyEnd = Math.min(\n\t\t\t\t\tbodyStart + this.minPartSize,\n\t\t\t\t\tthis.totalBytesToUpload\n\t\t\t\t);\n\t\t\t\tparts.push({\n\t\t\t\t\tbodyPart: this.body.slice(bodyStart, bodyEnd),\n\t\t\t\t\tpartNumber: parts.length + 1,\n\t\t\t\t\temitter: new events.EventEmitter(),\n\t\t\t\t\t_lastUploadedBytes: 0,\n\t\t\t\t});\n\t\t\t\tbodyStart += this.minPartSize;\n\t\t\t}\n\t\t\treturn parts;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async createMultiPartUpload() {\n\t\ttry {\n\t\t\tconst createMultiPartUploadCommand = new CreateMultipartUploadCommand(\n\t\t\t\tthis.params\n\t\t\t);\n\t\t\tconst response = await this.s3client.send(createMultiPartUploadCommand);\n\t\t\tlogger.debug(response.UploadId);\n\t\t\treturn response.UploadId;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @private Not to be extended outside of tests\n\t * @VisibleFotTesting\n\t */\n\tprotected async uploadParts(uploadId: string, parts: Part[]) {\n\t\ttry {\n\t\t\tconst allResults = await Promise.all(\n\t\t\t\tparts.map(async part => {\n\t\t\t\t\tthis.setupEventListener(part);\n\t\t\t\t\tconst options: AxiosHttpHandlerOptions = { emitter: part.emitter };\n\t\t\t\t\tconst {\n\t\t\t\t\t\tKey,\n\t\t\t\t\t\tBucket,\n\t\t\t\t\t\tSSECustomerAlgorithm,\n\t\t\t\t\t\tSSECustomerKey,\n\t\t\t\t\t\tSSECustomerKeyMD5,\n\t\t\t\t\t} = this.params;\n\t\t\t\t\tconst res = await this.s3client.send(\n\t\t\t\t\t\tnew UploadPartCommand({\n\t\t\t\t\t\t\tPartNumber: part.partNumber,\n\t\t\t\t\t\t\tBody: part.bodyPart,\n\t\t\t\t\t\t\tUploadId: uploadId,\n\t\t\t\t\t\t\tKey,\n\t\t\t\t\t\t\tBucket,\n\t\t\t\t\t\t\t...(SSECustomerAlgorithm && { SSECustomerAlgorithm }),\n\t\t\t\t\t\t\t...(SSECustomerKey && { SSECustomerKey }),\n\t\t\t\t\t\t\t...(SSECustomerKeyMD5 && { SSECustomerKeyMD5 }),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t\t\treturn res;\n\t\t\t\t})\n\t\t\t);\n\t\t\t// The order of resolved promises is the same as input promise order.\n\t\t\tfor (let i = 0; i < allResults.length; i++) {\n\t\t\t\tthis.completedParts.push({\n\t\t\t\t\tPartNumber: parts[i].partNumber,\n\t\t\t\t\tETag: allResults[i].ETag,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'Error happened while uploading a part. Cancelling the multipart upload'\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async finishMultiPartUpload(uploadId: string) {\n\t\tconst input: CompleteMultipartUploadCommandInput = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t\tMultipartUpload: { Parts: this.completedParts },\n\t\t};\n\t\tconst completeUploadCommand = new CompleteMultipartUploadCommand(input);\n\t\ttry {\n\t\t\tconst data = await this.s3client.send(completeUploadCommand);\n\t\t\treturn data.Key;\n\t\t} catch (error) {\n\t\t\tlogger.error('Error happened while finishing the upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async cleanup(uploadId: string) {\n\t\t// Reset this's state\n\t\tthis.body = null;\n\t\tthis.completedParts = [];\n\t\tthis.bytesUploaded = 0;\n\t\tthis.totalBytesToUpload = 0;\n\n\t\tconst input = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t};\n\n\t\tawait this.s3client.send(new AbortMultipartUploadCommand(input));\n\n\t\t// verify that all parts are removed.\n\t\tconst data = await this.s3client.send(new ListPartsCommand(input));\n\n\t\tif (data && data.Parts && data.Parts.length > 0) {\n\t\t\tthrow new Error('Multipart upload clean up failed.');\n\t\t}\n\t}\n\n\tprivate removeEventListener(part: Part) {\n\t\tpart.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n\t\tpart.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t}\n\n\tprivate setupEventListener(part: Part) {\n\t\tpart.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\tthis.progressChanged(\n\t\t\t\tpart.partNumber,\n\t\t\t\tprogress.loaded - part._lastUploadedBytes\n\t\t\t);\n\t\t\tpart._lastUploadedBytes = progress.loaded;\n\t\t});\n\t}\n\n\tprivate progressChanged(partNumber: number, incrementalUpdate: number) {\n\t\tthis.bytesUploaded += incrementalUpdate;\n\t\tthis.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytesToUpload,\n\t\t\tpart: partNumber,\n\t\t\tkey: this.params.Key,\n\t\t});\n\t}\n\n\tprivate byteLength(input: any) {\n\t\tif (input === null || input === undefined) return 0;\n\t\tif (typeof input.byteLength === 'number') {\n\t\t\treturn input.byteLength;\n\t\t} else if (typeof input.length === 'number') {\n\t\t\treturn input.length;\n\t\t} else if (typeof input.size === 'number') {\n\t\t\treturn input.size;\n\t\t} else if (typeof input.path === 'string') {\n\t\t\t/* NodeJs Support\n\t\t\treturn require('fs').lstatSync(input.path).size;\n\t\t\t*/\n\t\t} else {\n\t\t\tthrow new Error('Cannot determine length of ' + input);\n\t\t}\n\t}\n\n\tprivate async validateAndSanitizeBody(body: any): Promise<any> {\n\t\tif (this.isGenericObject(body)) {\n\t\t\t// Any javascript object\n\t\t\treturn JSON.stringify(body);\n\t\t} else {\n\t\t\t// Files, arrayBuffer etc\n\t\t\treturn body;\n\t\t}\n\t\t/* TODO: streams and files for nodejs \n\t\tif (\n\t\t\ttypeof body.path === 'string' &&\n\t\t\trequire('fs').lstatSync(body.path).size > 0\n\t\t) {\n\t\t\treturn body;\n\t\t} */\n\t}\n\n\tprivate isGenericObject(body: any): body is Object {\n\t\tif (body !== null && typeof body === 'object') {\n\t\t\ttry {\n\t\t\t\treturn !(this.byteLength(body) >= 0);\n\t\t\t} catch (error) {\n\t\t\t\t// If we cannot determine the length of the body, consider it\n\t\t\t\t// as a generic object and upload a stringified version of it\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _createNewS3Client(config, emitter?: events.EventEmitter) {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tcreatePrefixMiddleware(this.opts, this.params.Key),\n\t\t\tprefixMiddlewareOptions\n\t\t);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n","/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tParser,\n\tICredentials,\n\tStorageHelper,\n\tHub,\n} from '@aws-amplify/core';\nimport {\n\tS3Client,\n\tGetObjectCommand,\n\tDeleteObjectCommand,\n\tListObjectsV2Command,\n\tGetObjectCommandOutput,\n\tDeleteObjectCommandInput,\n\tCopyObjectCommandInput,\n\tCopyObjectCommand,\n\tPutObjectCommandInput,\n\tGetObjectCommandInput,\n\tListObjectsV2Request,\n} from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport {\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tSEND_UPLOAD_PROGRESS_EVENT,\n} from './axios-http-handler';\nimport {\n\tStorageOptions,\n\tStorageProvider,\n\tS3ProviderGetConfig,\n\tS3ProviderGetOuput,\n\tS3ProviderPutConfig,\n\tS3ProviderRemoveConfig,\n\tS3ProviderListOutput,\n\tS3ProviderListConfig,\n\tS3ProviderCopyConfig,\n\tS3ProviderCopyOutput,\n\tS3CopySource,\n\tS3CopyDestination,\n\tStorageAccessLevel,\n\tCustomPrefix,\n\tS3ProviderRemoveOutput,\n\tS3ProviderPutOutput,\n\tResumableUploadConfig,\n\tUploadTask,\n\tS3ClientOptions,\n} from '../types';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tgetPrefix,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\nimport { S3ProviderListOutputWithToken } from '.././types/AWSS3Provider';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nimport { CancelTokenSource } from 'axios';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst DEFAULT_STORAGE_LEVEL = 'public';\nconst DEFAULT_PRESIGN_EXPIRATION = 900;\n\ninterface AddTaskInput {\n\taccessLevel: StorageAccessLevel;\n\tfile: Blob;\n\tbucket: string;\n\temitter: events.EventEmitter;\n\tkey: string;\n\ts3Client: S3Client;\n\tparams?: PutObjectCommandInput;\n}\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport class AWSS3Provider implements StorageProvider {\n\tstatic readonly CATEGORY = 'Storage';\n\tstatic readonly PROVIDER_NAME = 'AWSS3';\n\tprivate _config: StorageOptions;\n\tprivate _storage: Storage;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tthis._storage = new StorageHelper().getStorage();\n\t\tHub.listen('auth', data => {\n\t\t\tconst { payload } = data;\n\t\t\tif (payload.event === 'signOut' || payload.event === 'signIn') {\n\t\t\t\tthis._storage.removeItem(UPLOADS_STORAGE_KEY);\n\t\t\t}\n\t\t});\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): 'AWSS3' {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\tprivate startResumableUpload(\n\t\taddTaskInput: AddTaskInput,\n\t\tconfig: S3ProviderPutConfig & ResumableUploadConfig\n\t): UploadTask {\n\t\tconst { s3Client, emitter, key, file, params } = addTaskInput;\n\t\tconst {\n\t\t\tprogressCallback,\n\t\t\tcompleteCallback,\n\t\t\terrorCallback,\n\t\t\ttrack = false,\n\t\t} = config;\n\t\tif (!(file instanceof Blob)) {\n\t\t\tthrow new Error(StorageErrorStrings.INVALID_BLOB);\n\t\t}\n\n\t\temitter.on(TaskEvents.UPLOAD_PROGRESS, event => {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\tprogressCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.UPLOAD_COMPLETE, event => {\n\t\t\tif (completeCallback) {\n\t\t\t\tif (typeof completeCallback === 'function') {\n\t\t\t\t\tcompleteCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'completeCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof completeCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.ERROR, err => {\n\t\t\tif (errorCallback) {\n\t\t\t\tif (typeof errorCallback === 'function') {\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'errorCallback should be a function, not a ' + typeof errorCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n\t\t// when its doing a final check with _listSingleFile function\n\t\tconst prefixPromise: Promise<string> = Credentials.get().then(\n\t\t\t(credentials: any) => {\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\treturn getPrefix({\n\t\t\t\t\t...config,\n\t\t\t\t\tcredentials: cred,\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\n\t\tconst task = new AWSS3UploadTask({\n\t\t\ts3Client,\n\t\t\tfile,\n\t\t\temitter,\n\t\t\tlevel: config.level,\n\t\t\tstorage: this._storage,\n\t\t\tparams,\n\t\t\tprefixPromise,\n\t\t});\n\n\t\tdispatchStorageEvent(\n\t\t\ttrack,\n\t\t\t'upload',\n\t\t\t{ method: 'put', result: 'success' },\n\t\t\tnull,\n\t\t\t`Upload Task created successfully for ${key}`\n\t\t);\n\n\t\t// automatically start the upload task\n\t\ttask.resume();\n\n\t\treturn task;\n\t}\n\n\t/**\n\t * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n\t * different level or identityId (if source object's level is 'protected').\n\t *\n\t * @async\n\t * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n\t * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n\t * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n\t * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n\t */\n\tpublic async copy(\n\t\tsrc: S3CopySource,\n\t\tdest: S3CopyDestination,\n\t\tconfig?: S3ProviderCopyConfig\n\t): Promise<S3ProviderCopyOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tacl,\n\t\t\tbucket,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst {\n\t\t\tlevel: srcLevel = DEFAULT_STORAGE_LEVEL,\n\t\t\tidentityId: srcIdentityId,\n\t\t\tkey: srcKey,\n\t\t} = src;\n\t\tconst { level: destLevel = DEFAULT_STORAGE_LEVEL, key: destKey } = dest;\n\t\tif (!srcKey || typeof srcKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_SRC_KEY);\n\t\t}\n\t\tif (!destKey || typeof destKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_DEST_KEY);\n\t\t}\n\t\tif (srcLevel !== 'protected' && srcIdentityId) {\n\t\t\tlogger.warn(\n\t\t\t\t`You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n\t\t\t);\n\t\t}\n\t\tconst srcPrefix = this._prefix({\n\t\t\t...opt,\n\t\t\tlevel: srcLevel,\n\t\t\t...(srcIdentityId && { identityId: srcIdentityId }),\n\t\t});\n\t\tconst destPrefix = this._prefix({ ...opt, level: destLevel });\n\t\tconst finalSrcKey = `${bucket}/${srcPrefix}${srcKey}`;\n\t\tconst finalDestKey = `${destPrefix}${destKey}`;\n\t\tlogger.debug(`copying ${finalSrcKey} to ${finalDestKey}`);\n\n\t\tconst params: CopyObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tCopySource: finalSrcKey,\n\t\t\tKey: finalDestKey,\n\t\t\t// Copies over metadata like contentType as well\n\t\t\tMetadataDirective: 'COPY',\n\t\t};\n\n\t\tif (cacheControl) params.CacheControl = cacheControl;\n\t\tif (expires) params.Expires = expires;\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\t\tif (acl) params.ACL = acl;\n\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\ttry {\n\t\t\tawait s3.send(new CopyObjectCommand(params));\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'success',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy success from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkey: destKey,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'failed',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy failed from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderGetConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<string | GetObjectCommandOutput>} - A promise resolves to Amazon S3 presigned URL or the\n\t * GetObjectCommandOutput if download is set to true on success\n\t */\n\tpublic async get<T extends S3ProviderGetConfig & StorageOptions>(\n\t\tkey: string,\n\t\tconfig?: T\n\t): Promise<S3ProviderGetOuput<T>>;\n\tpublic async get(\n\t\tkey: string,\n\t\tconfig?: S3ProviderGetConfig\n\t): Promise<string | GetObjectCommandOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tbucket,\n\t\t\tdownload,\n\t\t\tcacheControl,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcontentLanguage,\n\t\t\tcontentType,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tprogressCallback,\n\t\t} = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst s3 = this._createNewS3Client(opt, emitter);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: GetObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\t// See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\t\tif (cacheControl) params.ResponseCacheControl = cacheControl;\n\t\tif (contentDisposition)\n\t\t\tparams.ResponseContentDisposition = contentDisposition;\n\t\tif (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n\t\tif (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n\t\tif (contentType) params.ResponseContentType = contentType;\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\n\t\tif (download === true) {\n\t\t\tconst getObjectCommand = new GetObjectCommand(params);\n\t\t\ttry {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\temitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst response = await s3.send(getObjectCommand);\n\t\t\t\temitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t{\n\t\t\t\t\t\tfileSize: Number(response.Body['size'] || response.Body['length']),\n\t\t\t\t\t},\n\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t`Download failed with ${error.message}`\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst signer = new S3RequestPresigner({ ...s3.config });\n\t\t\tconst request = await createRequest(s3, new GetObjectCommand(params));\n\t\t\t// Default is 15 mins as defined in V2 AWS SDK\n\t\t\tconst url = formatUrl(\n\t\t\t\tawait signer.presign(request, {\n\t\t\t\t\texpiresIn: expires || DEFAULT_PRESIGN_EXPIRATION,\n\t\t\t\t})\n\t\t\t);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Signed URL: ${url}`\n\t\t\t);\n\t\t\treturn url;\n\t\t} catch (error) {\n\t\t\tlogger.warn('get signed url error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in Amazon S3 bucket\n\t * @param [config] - Optional configuration for the underlying S3 command\n\t * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n\t * success.\n\t */\n\tpublic put<T extends S3ProviderPutConfig>(\n\t\tkey: string,\n\t\tobject: PutObjectCommandInput['Body'],\n\t\tconfig?: T\n\t): S3ProviderPutOutput<T> {\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback, level, resumable } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t\tacl,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst params: PutObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (contentEncoding) {\n\t\t\tparams.ContentEncoding = contentEncoding;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n\t\tif (acl) {\n\t\t\tparams.ACL = acl;\n\t\t}\n\n\t\tif (resumable === true) {\n\t\t\tconst s3Client = this._createNewS3Client(opt);\n\t\t\t// we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n\t\t\t// this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\t\t\ts3Client.middlewareStack.add(\n\t\t\t\tcreatePrefixMiddleware(opt, key),\n\t\t\t\tprefixMiddlewareOptions\n\t\t\t);\n\t\t\tconst addTaskInput: AddTaskInput = {\n\t\t\t\tbucket,\n\t\t\t\tkey,\n\t\t\t\ts3Client,\n\t\t\t\tfile: object as Blob,\n\t\t\t\temitter,\n\t\t\t\taccessLevel: level,\n\t\t\t\tparams,\n\t\t\t};\n\t\t\t// explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\t\t\treturn this.startResumableUpload(\n\t\t\t\taddTaskInput,\n\t\t\t\tconfig as typeof config & { resumable: true }\n\t\t\t) as S3ProviderPutOutput<T>;\n\t\t}\n\n\t\ttry {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\temitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uploader.upload().then(response => {\n\t\t\t\tlogger.debug('upload result', response);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'upload',\n\t\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Upload success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn { key };\n\t\t\t}) as S3ProviderPutOutput<T>;\n\t\t} catch (error) {\n\t\t\tlogger.warn('error uploading', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(\n\t\tkey: string,\n\t\tconfig?: S3ProviderRemoveConfig\n\t): Promise<S3ProviderRemoveOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params: DeleteObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tconst deleteObjectCommand = new DeleteObjectCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(deleteObjectCommand);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Deleted ${key} successfully`\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Deletion of ${key} failed with ${error}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\tprivate async _list(\n\t\tparams: ListObjectsV2Request,\n\t\topt: S3ClientOptions,\n\t\tprefix: string\n\t): Promise<S3ProviderListOutputWithToken> {\n\t\tconst result: S3ProviderListOutputWithToken = {\n\t\t\tcontents: [],\n\t\t\tnextToken: '',\n\t\t};\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tconst listObjectsV2Command = new ListObjectsV2Command({ ...params });\n\t\tconst response = await s3.send(listObjectsV2Command);\n\t\tif (response && response.Contents) {\n\t\t\tresult.contents = response.Contents.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\tsize: item.Size,\n\t\t\t\t};\n\t\t\t});\n\t\t\tresult.nextToken = response.NextContinuationToken;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {string} path - the path that contains objects\n\t * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n\t * all objects in path\n\t */\n\tpublic async list(\n\t\tpath: string,\n\t\tconfig?: S3ProviderListConfig\n\t): Promise<S3ProviderListOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt: S3ClientOptions = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, maxKeys } = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\t\ttry {\n\t\t\tconst list: S3ProviderListOutput = [];\n\t\t\tlet token: string;\n\t\t\tlet listResult: S3ProviderListOutputWithToken;\n\t\t\tconst params: ListObjectsV2Request = {\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: final_path,\n\t\t\t\tMaxKeys: 1000,\n\t\t\t};\n\t\t\tif (maxKeys === 'ALL') {\n\t\t\t\tdo {\n\t\t\t\t\tparams.ContinuationToken = token;\n\t\t\t\t\tparams.MaxKeys = 1000;\n\t\t\t\t\tlistResult = await this._list(params, opt, prefix);\n\t\t\t\t\tlist.push(...listResult.contents);\n\t\t\t\t\tif (listResult.nextToken) token = listResult.nextToken;\n\t\t\t\t} while (listResult.nextToken);\n\t\t\t} else {\n\t\t\t\tmaxKeys < 1000 || typeof maxKeys === 'string'\n\t\t\t\t\t? (params.MaxKeys = maxKeys)\n\t\t\t\t\t: (params.MaxKeys = 1000);\n\t\t\t\tlistResult = await this._list(params, opt, prefix);\n\t\t\t\tlist.push(...listResult.contents);\n\t\t\t\tif (maxKeys > 1000)\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\"maxkeys can be from 0 - 1000 or 'ALL'. To list all files you can set maxKeys to 'ALL'.\"\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`${list.length} items returned from list operation`\n\t\t\t);\n\t\t\tlogger.debug('list', list);\n\t\t\treturn list;\n\t\t} catch (error) {\n\t\t\tlogger.warn('list error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Listing items failed: ${error.message}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\tthis._config.credentials = cred;\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isWithCredentials(\n\t\tconfig: StorageOptions\n\t): config is StorageOptions & { credentials: ICredentials } {\n\t\treturn typeof config === 'object' && config.hasOwnProperty('credentials');\n\t}\n\n\tprivate _prefix(config: {\n\t\tcredentials: ICredentials;\n\t\tlevel?: StorageAccessLevel;\n\t\tcustomPrefix?: CustomPrefix;\n\t\tidentityId?: string;\n\t}): string {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * Creates an S3 client with new V3 aws sdk\n\t */\n\tprivate _createNewS3Client(\n\t\tconfig: {\n\t\t\tregion?: string;\n\t\t\tcancelTokenSource?: CancelTokenSource;\n\t\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\t\tuseAccelerateEndpoint?: boolean;\n\t\t},\n\t\temitter?: events.EventEmitter\n\t): S3Client {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;\n","/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger, Parser } from '@aws-amplify/core';\nimport { AWSS3Provider } from './providers';\nimport {\n\tStorageCopySource,\n\tStorageCopyDestination,\n\tStorageGetConfig,\n\tStorageProvider,\n\tStoragePutConfig,\n\tStorageRemoveConfig,\n\tStorageListConfig,\n\tStorageCopyConfig,\n\tStorageProviderWithCopy,\n\tStorageGetOutput,\n\tStoragePutOutput,\n\tStorageRemoveOutput,\n\tStorageListOutput,\n\tStorageCopyOutput,\n\tUploadTask,\n} from './types';\nimport axios, { CancelTokenSource } from 'axios';\nimport { PutObjectCommandInput } from '@aws-sdk/client-s3';\nimport { AWSS3UploadTask } from './providers/AWSS3UploadTask';\n\nconst logger = new Logger('StorageClass');\n\nconst DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\nexport class Storage {\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\tprivate _pluggables: StorageProvider[];\n\n\t/**\n\t * Similar to the API module. This weak map allows users to cancel their in-flight request made using the Storage\n\t * module. For every get or put request, a unique cancel token will be generated and injected to it's underlying\n\t * AxiosHttpHandler. This map maintains a mapping of Request to CancelTokenSource. When .cancel is invoked, it will\n\t * attempt to retrieve it's corresponding cancelTokenSource and cancel the in-flight request.\n\t */\n\tprivate _cancelTokenSourceMap: WeakMap<Promise<any>, CancelTokenSource>;\n\n\t/**\n\t * @public\n\t */\n\tpublic vault: Storage;\n\n\t/**\n\t * Initialize Storage\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tthis._cancelTokenSourceMap = new WeakMap<Promise<any>, CancelTokenSource>();\n\t\tlogger.debug('Storage Options', this._config);\n\n\t\tthis.get = this.get.bind(this);\n\t\tthis.put = this.put.bind(this);\n\t\tthis.remove = this.remove.bind(this);\n\t\tthis.list = this.list.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Storage';\n\t}\n\n\t/**\n\t * add plugin into Storage category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: StorageProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Storage') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tlet config = {};\n\n\t\t\tconfig = pluggable.configure(this._config[pluggable.getProviderName()]);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string) {\n\t\tconst pluggable = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\treturn null;\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * Configure Storage\n\t * @param {Object} config - Configuration object for storage\n\t * @return {Object} - Current configuration\n\t */\n\tconfigure(config?) {\n\t\tlogger.debug('configure Storage');\n\t\tif (!config) return this._config;\n\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\n\t\tconst storageKeysFromConfig = Object.keys(amplifyConfig.Storage);\n\n\t\tconst storageArrayKeys = [\n\t\t\t'bucket',\n\t\t\t'region',\n\t\t\t'level',\n\t\t\t'track',\n\t\t\t'customPrefix',\n\t\t\t'serverSideEncryption',\n\t\t\t'SSECustomerAlgorithm',\n\t\t\t'SSECustomerKey',\n\t\t\t'SSECustomerKeyMD5',\n\t\t\t'SSEKMSKeyId',\n\t\t];\n\n\t\tconst isInStorageArrayKeys = (k: string) =>\n\t\t\tstorageArrayKeys.some(x => x === k);\n\t\tconst checkConfigKeysFromArray = (k: string[]) =>\n\t\t\tk.find(k => isInStorageArrayKeys(k));\n\n\t\tif (\n\t\t\tstorageKeysFromConfig &&\n\t\t\tcheckConfigKeysFromArray(storageKeysFromConfig) &&\n\t\t\t!amplifyConfig.Storage[DEFAULT_PROVIDER]\n\t\t) {\n\t\t\tamplifyConfig.Storage[DEFAULT_PROVIDER] = {};\n\t\t}\n\n\t\tObject.entries(amplifyConfig.Storage).map(([key, value]) => {\n\t\t\tif (key && isInStorageArrayKeys(key) && value !== undefined) {\n\t\t\t\tamplifyConfig.Storage[DEFAULT_PROVIDER][key] = value;\n\t\t\t\tdelete amplifyConfig.Storage[key];\n\t\t\t}\n\t\t});\n\n\t\t// only update new values for each provider\n\t\tObject.keys(amplifyConfig.Storage).forEach(providerName => {\n\t\t\tif (typeof amplifyConfig.Storage[providerName] !== 'string') {\n\t\t\t\tthis._config[providerName] = {\n\t\t\t\t\t...this._config[providerName],\n\t\t\t\t\t...amplifyConfig.Storage[providerName],\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this._config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AWSS3Provider());\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tprivate getCancellableTokenSource(): CancelTokenSource {\n\t\treturn axios.CancelToken.source();\n\t}\n\n\tprivate updateRequestToBeCancellable(\n\t\trequest: Promise<any>,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\tthis._cancelTokenSourceMap.set(request, cancelTokenSource);\n\t}\n\n\tprivate isUploadTask(x: unknown): x is UploadTask {\n\t\treturn (\n\t\t\ttypeof x !== 'undefined' &&\n\t\t\ttypeof x['pause'] === 'function' &&\n\t\t\ttypeof x['resume'] === 'function'\n\t\t);\n\t}\n\n\t/**\n\t * Cancels an inflight request\n\t *\n\t * @param request - The request to cancel\n\t * @param [message] - A message to include in the cancelation exception\n\t */\n\tpublic cancel(request: UploadTask, message?: string): Promise<boolean>;\n\tpublic cancel(request: Promise<any>, message?: string): void;\n\tpublic cancel(\n\t\trequest: Promise<any> | UploadTask,\n\t\tmessage?: string\n\t): void | Promise<boolean> {\n\t\tif (request instanceof AWSS3UploadTask) {\n\t\t\treturn request._cancel();\n\t\t}\n\t\tconst cancelTokenSource = this._cancelTokenSourceMap.get(\n\t\t\trequest as Promise<any>\n\t\t);\n\t\tif (cancelTokenSource) {\n\t\t\tcancelTokenSource.cancel(message);\n\t\t} else {\n\t\t\tlogger.debug('The request does not map to any cancel token');\n\t\t}\n\t}\n\n\t/**\n\t * Copies a file from src to dest.\n\t *\n\t * @param src - The source object.\n\t * @param dest - The destination object.\n\t * @param [config] - config for the Storage operation.\n\t * @return A promise resolves to the copied object's key.\n\t */\n\tpublic copy<T extends Record<string, any>>(\n\t\tsrc: StorageCopySource,\n\t\tdest: StorageCopyDestination,\n\t\tconfig?: StorageCopyConfig<T>\n\t): StorageCopyOutput<T>;\n\tpublic copy<T extends StorageProviderWithCopy = AWSS3Provider>(\n\t\tsrc: Parameters<T['copy']>[0],\n\t\tdest: Parameters<T['copy']>[1],\n\t\tconfig?: StorageCopyConfig<T>\n\t): StorageCopyOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageCopyOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tif (typeof prov.copy !== 'function') {\n\t\t\treturn Promise.reject(\n\t\t\t\t`.copy is not implemented on provider ${prov.getProviderName()}`\n\t\t\t) as StorageCopyOutput<T>;\n\t\t}\n\t\tconst responsePromise = prov.copy(src, dest, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tthis.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n\t\treturn responsePromise as StorageCopyOutput<T>;\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param key - key of the object\n\t * @param [config] - config for the Storage operation.\n\t * @return - A promise resolves to either a presigned url or the object\n\t */\n\t// Adding & { download?: boolean }, if not T extends { download: true } ? ... : ... will not work properly\n\tpublic get<T extends Record<string, any> & { download?: boolean }>(\n\t\tkey: string,\n\t\tconfig?: StorageGetConfig<T>\n\t): StorageGetOutput<T>;\n\tpublic get<\n\t\tT extends StorageProvider | { [key: string]: any; download?: boolean }\n\t>(key: string, config?: StorageGetConfig<T>): StorageGetOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageGetOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tconst responsePromise = prov.get(key, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tthis.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n\t\treturn responsePromise as StorageGetOutput<T>;\n\t}\n\n\tpublic isCancelError(error: any) {\n\t\treturn axios.isCancel(error);\n\t}\n\n\t/**\n\t * Put a file in storage bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in bucket\n\t * @param [config] - { level : private|protected|public, contentType: MIME Types,\n\t *  progressCallback: function }\n\t * @return - promise resolves to object on success\n\t */\n\tpublic put<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tobject: any,\n\t\tconfig?: StoragePutConfig<T>\n\t): StoragePutOutput<T>;\n\tpublic put<T extends StorageProvider = AWSS3Provider>(\n\t\tkey: string,\n\t\tobject: Omit<PutObjectCommandInput['Body'], 'ReadableStream' | 'Readable'>,\n\t\tconfig?: StoragePutConfig<T>\n\t): StoragePutOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StoragePutOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tconst response = prov.put(key, object, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tif (!this.isUploadTask(response)) {\n\t\t\tthis.updateRequestToBeCancellable(response, cancelTokenSource);\n\t\t}\n\t\treturn response as StoragePutOutput<T>;\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param key - key of the object\n\t * @param [config] - { level : private|protected|public }\n\t * @return - Promise resolves upon successful removal of the object\n\t */\n\tpublic remove<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tconfig?: StorageRemoveConfig<T>\n\t): StorageRemoveOutput<T>;\n\tpublic remove<T extends StorageProvider = AWSS3Provider>(\n\t\tkey: string,\n\t\tconfig?: StorageRemoveConfig<T>\n\t): StorageRemoveOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageRemoveOutput<T>;\n\t\t}\n\t\treturn prov.remove(key, config) as StorageRemoveOutput<T>;\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param path - the path that contains objects\n\t * @param [config] - { level : private|protected|public, maxKeys: NUMBER }\n\t * @return - Promise resolves to list of keys for all objects in path\n\t */\n\tpublic list<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tconfig?: StorageListConfig<T>\n\t): StorageListOutput<T>;\n\tpublic list<T extends StorageProvider = AWSS3Provider>(\n\t\tpath: string,\n\t\tconfig?: StorageListConfig<T>\n\t): StorageListOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageListOutput<T>;\n\t\t}\n\t\treturn prov.list(path, config) as StorageListOutput<T>;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default Storage;\n","/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { Storage as StorageClass } from './Storage';\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('Storage');\n\nlet _instance: StorageClass = null;\n\nconst getInstance = () => {\n\tif (_instance) {\n\t\treturn _instance;\n\t}\n\tlogger.debug('Create Storage Instance, debug');\n\t_instance = new StorageClass();\n\t_instance.vault = new StorageClass();\n\n\tconst old_configure = _instance.configure;\n\t_instance.configure = options => {\n\t\tlogger.debug('storage configure called');\n\t\tconst vaultConfig = { ...old_configure.call(_instance, options) };\n\n\t\t// set level private for each provider for the vault\n\t\tObject.keys(vaultConfig).forEach(providerName => {\n\t\t\tif (typeof vaultConfig[providerName] !== 'string') {\n\t\t\t\tvaultConfig[providerName] = {\n\t\t\t\t\t...vaultConfig[providerName],\n\t\t\t\t\tlevel: 'private',\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tlogger.debug('storage vault configure called');\n\t\t_instance.vault.configure(vaultConfig);\n\t};\n\treturn _instance;\n};\n\nexport const Storage: StorageClass = getInstance();\nAmplify.register(Storage);\n\n/**\n * @deprecated use named import\n */\nexport default Storage;\n\nexport { StorageClass };\nexport * from './providers';\nexport * from './types';\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { d as NO_STORAGE_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { Storage } from '@aws-amplify/storage';\nvar imageFileType = new Set([\n    'apng',\n    'bmp',\n    'gif',\n    'ico',\n    'cur',\n    'jpg',\n    'jpeg',\n    'jfif',\n    'pjpeg',\n    'pjp',\n    'png',\n    'svg',\n    'tif',\n    'tiff',\n    'webp',\n]);\nvar calcKey = function (file, fileToKey) {\n    var name = file.name, size = file.size, type = file.type;\n    var key = encodeURI(name);\n    if (fileToKey) {\n        if (typeof fileToKey === 'string') {\n            key = fileToKey;\n        }\n        else if (typeof fileToKey === 'function') {\n            key = fileToKey({ name: name, size: size, type: type });\n        }\n        else {\n            key = encodeURI(JSON.stringify(fileToKey));\n        }\n        if (!key) {\n            key = 'empty_key';\n        }\n    }\n    return key.replace(/\\s/g, '_');\n};\nvar getStorageObject = function (key, level, track, identityId, logger) { return __awaiter(void 0, void 0, void 0, function () {\n    var src, error_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!Storage || typeof Storage.get !== 'function') {\n                    throw new Error(NO_STORAGE_MODULE_FOUND);\n                }\n                _a.label = 1;\n            case 1:\n                _a.trys.push([1, 3, , 4]);\n                return [4 /*yield*/, Storage.get(key, { level: level, track: track, identityId: identityId })];\n            case 2:\n                src = _a.sent();\n                logger.debug('Storage image get', src);\n                return [2 /*return*/, src];\n            case 3:\n                error_1 = _a.sent();\n                throw new Error(error_1);\n            case 4: return [2 /*return*/];\n        }\n    });\n}); };\nvar readFileAsync = function (blob) {\n    return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onload = function () {\n            resolve(reader.result);\n        };\n        reader.onerror = function () {\n            reject('Failed to read file!');\n            reader.abort();\n        };\n        reader.readAsText(blob);\n    });\n};\nvar getTextSource = function (key, level, track, identityId, logger) { return __awaiter(void 0, void 0, void 0, function () {\n    var textSrc, text, error_2;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!Storage || typeof Storage.get !== 'function') {\n                    throw new Error(NO_STORAGE_MODULE_FOUND);\n                }\n                _a.label = 1;\n            case 1:\n                _a.trys.push([1, 4, , 5]);\n                return [4 /*yield*/, Storage.get(key, {\n                        download: true,\n                        level: level,\n                        track: track,\n                        identityId: identityId,\n                    })];\n            case 2:\n                textSrc = _a.sent();\n                logger.debug(textSrc);\n                return [4 /*yield*/, readFileAsync(textSrc['Body'])];\n            case 3:\n                text = (_a.sent());\n                return [2 /*return*/, text];\n            case 4:\n                error_2 = _a.sent();\n                throw new Error(error_2);\n            case 5: return [2 /*return*/];\n        }\n    });\n}); };\nvar putStorageObject = function (key, body, level, track, contentType, logger) { return __awaiter(void 0, void 0, void 0, function () {\n    var data, error_3;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!Storage || typeof Storage.put !== 'function') {\n                    throw new Error(NO_STORAGE_MODULE_FOUND);\n                }\n                _a.label = 1;\n            case 1:\n                _a.trys.push([1, 3, , 4]);\n                return [4 /*yield*/, Storage.put(key, body, {\n                        contentType: contentType,\n                        level: level,\n                        track: track,\n                    })];\n            case 2:\n                data = _a.sent();\n                logger.debug('Upload data', data);\n                return [3 /*break*/, 4];\n            case 3:\n                error_3 = _a.sent();\n                throw new Error(error_3);\n            case 4: return [2 /*return*/];\n        }\n    });\n}); };\nexport { getTextSource as a, calcKey as c, getStorageObject as g, imageFileType as i, putStorageObject as p };\n","// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { convertToBuffer, isEmptyData, numToUint8 } from \"@aws-crypto/util\";\nimport { Crc32 } from \"./index\";\n\nexport class AwsCrc32 implements Hash {\n  private readonly crc32 = new Crc32();\n\n  update(toHash: SourceData) {\n    if (isEmptyData(toHash)) return;\n\n    this.crc32.update(convertToBuffer(toHash));\n  }\n\n  async digest(): Promise<Uint8Array> {\n    return numToUint8(this.crc32.digest());\n  }\n}\n","import {uint32ArrayFrom} from \"@aws-crypto/util\";\n\nexport function crc32(data: Uint8Array): number {\n  return new Crc32().update(data).digest();\n}\n\nexport class Crc32 {\n  private checksum = 0xffffffff;\n\n  update(data: Uint8Array): this {\n    for (const byte of data) {\n      this.checksum =\n        (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];\n    }\n\n    return this;\n  }\n\n  digest(): number {\n    return (this.checksum ^ 0xffffffff) >>> 0;\n  }\n}\n\n// prettier-ignore\nconst a_lookUpTable = [\n  0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n  0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n  0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n  0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n  0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n  0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n  0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n  0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n  0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n  0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n  0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n  0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n  0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n  0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n  0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n  0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n  0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n  0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n  0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n  0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n  0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n  0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n  0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n  0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n  0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n  0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n  0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n  0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n  0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n  0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n  0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n  0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n  0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n  0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n  0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n  0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n  0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n  0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n  0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n  0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n  0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n  0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n  0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n  0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n  0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n  0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n  0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n  0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n  0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n  0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n  0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n  0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n  0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n  0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n  0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n  0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n  0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n  0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n  0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n  0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n  0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n  0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n  0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n  0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,\n];\nconst lookupTable: Uint32Array = uint32ArrayFrom(a_lookUpTable)\nexport { AwsCrc32 } from \"./aws_crc32\";\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('./../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\nvar enhanceError = require('./core/enhanceError');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","module.exports = {\n  \"version\": \"0.26.0\"\n};","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return toString.call(val) === '[object URLSearchParams]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'rootNodeName', //when array as root\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  if(Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1){\n    jObj = {\n      [this.options.rootNodeName] : jObj\n    }\n  }\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            val += this.processTextOrObjNode(item, key, level)\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(result.val, key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && val.indexOf('<') === -1) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n","'use strict';\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //const itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n","'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if (!options.alwaysCreateTextNode && (!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst x2j = require('./xmlstr2xmlnode');\n\n//TODO: do it later\nconst convertToJsonString = function(node, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n\n  options.indentBy = options.indentBy || '';\n  return _cToJsonStr(node, options, 0);\n};\n\nconst _cToJsonStr = function(node, options, level) {\n  let jObj = '{';\n\n  //traver through all the children\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    const tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj += '\"' + tagname + '\" : [ ';\n      for (let tag in node.child[tagname]) {\n        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';\n      }\n      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last\n    } else {\n      jObj += '\"' + tagname + '\" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';\n    }\n  }\n  util.merge(jObj, node.attrsMap);\n  //add attrsMap as new children\n  if (util.isEmptyObject(jObj)) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj += '\"' + options.textNodeName + '\" : ' + stringval(node.val);\n      }\n    }\n  }\n  //add value\n  if (jObj[jObj.length - 1] === ',') {\n    jObj = jObj.substr(0, jObj.length - 2);\n  }\n  return jObj + '}';\n};\n\nfunction stringval(v) {\n  if (v === true || v === false || !isNaN(v)) {\n    return v;\n  } else {\n    return '\"' + v + '\"';\n  }\n}\n\nfunction indentate(options, level) {\n  return options.indentBy.repeat(level);\n}\n\nexports.convertToJsonString = convertToJsonString;\n","'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, givenOptions = {}, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  if(givenOptions.parseTrueNumberOnly \n    && givenOptions.parseNodeValue !== false\n    && !givenOptions.numParseOptions){\n    \n      givenOptions.numParseOptions = {\n        leadingZeros: false,\n      }\n  }\n  let options = buildOptions(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);\n\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('./nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.buildOptions = function(options, defaultOptions, props) {\n  let newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\n/**\n * Check if a tag name should be treated as array\n *\n * @param tagName the node tagname\n * @param arrayMode the array mode option\n * @param parentTagName the parent tag name\n * @returns {boolean} true if node should be parsed as array\n */\nexports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {\n  if (arrayMode === false) {\n    return false;\n  } else if (arrayMode instanceof RegExp) {\n    return arrayMode.test(tagName);\n  } else if (typeof arrayMode === 'function') {\n    return !!arrayMode(tagName, parentTagName);\n  }\n\n  return arrayMode === \"strict\";\n}\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n\nmodule.exports = function(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n};\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  numParseOptions: {\n    hex: true,\n    leadingZeros: true\n  },\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: [],\n  alwaysCreateTextNode: false\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'numParseOptions',\n  'stopNodes',\n  'alwaysCreateTextNode'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.numParseOptions);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.numParseOptions\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["AbortIncompleteMultipartUpload","AbortMultipartUploadOutput","AbortMultipartUploadRequest","NoSuchUpload","AccelerateConfiguration","Grantee","Grant","Owner","AccessControlPolicy","AccessControlTranslation","CompleteMultipartUploadOutput","CompletedPart","CompletedMultipartUpload","CompleteMultipartUploadRequest","CopyObjectResult","CopyObjectOutput","CopyObjectRequest","ObjectNotInActiveTierError","BucketAlreadyExists","BucketAlreadyOwnedByYou","CreateBucketOutput","CreateBucketConfiguration","CreateBucketRequest","CreateMultipartUploadOutput","CreateMultipartUploadRequest","DeleteBucketRequest","DeleteBucketAnalyticsConfigurationRequest","DeleteBucketCorsRequest","DeleteBucketEncryptionRequest","DeleteBucketIntelligentTieringConfigurationRequest","DeleteBucketInventoryConfigurationRequest","DeleteBucketLifecycleRequest","DeleteBucketMetricsConfigurationRequest","DeleteBucketOwnershipControlsRequest","DeleteBucketPolicyRequest","DeleteBucketReplicationRequest","DeleteBucketTaggingRequest","DeleteBucketWebsiteRequest","DeleteObjectOutput","DeleteObjectRequest","DeletedObject","_Error","DeleteObjectsOutput","ObjectIdentifier","Delete","DeleteObjectsRequest","DeleteObjectTaggingOutput","DeleteObjectTaggingRequest","DeletePublicAccessBlockRequest","GetBucketAccelerateConfigurationOutput","GetBucketAccelerateConfigurationRequest","GetBucketAclOutput","GetBucketAclRequest","Tag","AnalyticsAndOperator","AnalyticsFilter","AnalyticsS3BucketDestination","AnalyticsExportDestination","StorageClassAnalysisDataExport","StorageClassAnalysis","AnalyticsConfiguration","GetBucketAnalyticsConfigurationOutput","GetBucketAnalyticsConfigurationRequest","CORSRule","GetBucketCorsOutput","GetBucketCorsRequest","ServerSideEncryptionByDefault","ServerSideEncryptionRule","ServerSideEncryptionConfiguration","GetBucketEncryptionOutput","GetBucketEncryptionRequest","IntelligentTieringAndOperator","IntelligentTieringFilter","Tiering","IntelligentTieringConfiguration","GetBucketIntelligentTieringConfigurationOutput","GetBucketIntelligentTieringConfigurationRequest","SSEKMS","SSES3","InventoryEncryption","InventoryS3BucketDestination","InventoryDestination","InventoryFilter","InventorySchedule","InventoryConfiguration","GetBucketInventoryConfigurationOutput","GetBucketInventoryConfigurationRequest","LifecycleExpiration","LifecycleRuleAndOperator","LifecycleRuleFilter","NoncurrentVersionExpiration","NoncurrentVersionTransition","Transition","LifecycleRule","GetBucketLifecycleConfigurationOutput","GetBucketLifecycleConfigurationRequest","GetBucketLocationOutput","GetBucketLocationRequest","TargetGrant","LoggingEnabled","GetBucketLoggingOutput","GetBucketLoggingRequest","MetricsAndOperator","MetricsFilter","MetricsConfiguration","GetBucketMetricsConfigurationOutput","GetBucketMetricsConfigurationRequest","GetBucketNotificationConfigurationRequest","FilterRule","S3KeyFilter","NotificationConfigurationFilter","LambdaFunctionConfiguration","QueueConfiguration","TopicConfiguration","NotificationConfiguration","OwnershipControlsRule","OwnershipControls","GetBucketOwnershipControlsOutput","GetBucketOwnershipControlsRequest","GetBucketPolicyOutput","GetBucketPolicyRequest","PolicyStatus","GetBucketPolicyStatusOutput","GetBucketPolicyStatusRequest","DeleteMarkerReplication","EncryptionConfiguration","ReplicationTimeValue","Metrics","ReplicationTime","Destination","ExistingObjectReplication","ReplicationRuleAndOperator","ReplicationRuleFilter","ReplicaModifications","SseKmsEncryptedObjects","SourceSelectionCriteria","ReplicationRule","ReplicationConfiguration","GetBucketReplicationOutput","GetBucketReplicationRequest","GetBucketRequestPaymentOutput","GetBucketRequestPaymentRequest","GetBucketTaggingOutput","GetBucketTaggingRequest","GetBucketVersioningOutput","GetBucketVersioningRequest","ErrorDocument","IndexDocument","RedirectAllRequestsTo","Condition","Redirect","RoutingRule","GetBucketWebsiteOutput","GetBucketWebsiteRequest","GetObjectOutput","GetObjectRequest","InvalidObjectState","NoSuchKey","GetObjectAclOutput","GetObjectAclRequest","ObjectLockLegalHold","GetObjectLegalHoldOutput","GetObjectLegalHoldRequest","DefaultRetention","ObjectLockRule","ObjectLockConfiguration","GetObjectLockConfigurationOutput","GetObjectLockConfigurationRequest","ObjectLockRetention","GetObjectRetentionOutput","GetObjectRetentionRequest","GetObjectTaggingOutput","GetObjectTaggingRequest","GetObjectTorrentOutput","GetObjectTorrentRequest","PublicAccessBlockConfiguration","GetPublicAccessBlockOutput","GetPublicAccessBlockRequest","HeadBucketRequest","NoSuchBucket","HeadObjectOutput","HeadObjectRequest","ListBucketAnalyticsConfigurationsOutput","ListBucketAnalyticsConfigurationsRequest","ListBucketIntelligentTieringConfigurationsOutput","ListBucketIntelligentTieringConfigurationsRequest","ListBucketInventoryConfigurationsOutput","ListBucketInventoryConfigurationsRequest","ListBucketMetricsConfigurationsOutput","ListBucketMetricsConfigurationsRequest","Bucket","ListBucketsOutput","CommonPrefix","Initiator","MultipartUpload","ListMultipartUploadsOutput","ListMultipartUploadsRequest","_Object","ListObjectsOutput","ListObjectsRequest","ListObjectsV2Output","ListObjectsV2Request","DeleteMarkerEntry","ObjectVersion","ListObjectVersionsOutput","ListObjectVersionsRequest","Part","ListPartsOutput","ListPartsRequest","PutBucketAccelerateConfigurationRequest","PutBucketAclRequest","PutBucketAnalyticsConfigurationRequest","CORSConfiguration","PutBucketCorsRequest","PutBucketEncryptionRequest","PutBucketIntelligentTieringConfigurationRequest","PutBucketInventoryConfigurationRequest","BucketLifecycleConfiguration","PutBucketLifecycleConfigurationRequest","BucketLoggingStatus","PutBucketLoggingRequest","PutBucketMetricsConfigurationRequest","PutBucketNotificationConfigurationRequest","PutBucketOwnershipControlsRequest","PutBucketPolicyRequest","PutBucketReplicationRequest","RequestPaymentConfiguration","PutBucketRequestPaymentRequest","Tagging","PutBucketTaggingRequest","VersioningConfiguration","PutBucketVersioningRequest","WebsiteConfiguration","PutBucketWebsiteRequest","PutObjectOutput","PutObjectRequest","PutObjectAclOutput","PutObjectAclRequest","PutObjectLegalHoldOutput","PutObjectLegalHoldRequest","PutObjectLockConfigurationOutput","PutObjectLockConfigurationRequest","PutObjectRetentionOutput","PutObjectRetentionRequest","PutObjectTaggingOutput","PutObjectTaggingRequest","PutPublicAccessBlockRequest","ObjectAlreadyInActiveTierError","RestoreObjectOutput","GlacierJobParameters","Encryption","filterSensitiveLog","obj","__assign","SSEKMSKeyId","SENSITIVE_STRING","SSEKMSEncryptionContext","SSECustomerKey","CopySourceSSECustomerKey","visit","value","visitor","undefined","Prefix","And","_","$unknown","_a","Filter","KMSMasterKeyID","ApplyServerSideEncryptionByDefault","Rules","map","item","KeyId","S3BucketDestination","AnalyticsConfigurationList","InventoryConfigurationList","MetricsConfigurationList","LifecycleConfiguration","KMSKeyId","__values","o","s","Symbol","iterator","m","i","call","length","next","done","TypeError","XmlNode","name","children","attributes","prototype","withName","this","addAttribute","addChildNode","child","push","removeAttribute","toString","hasChildren","Boolean","xmlText","_b","Object","keys","_c","attributeName","attribute","replace","c","join","XmlText","deserializeAws_restXmlAbortMultipartUploadCommandError","output","context","__awaiter","parseBody","body","parsedOutput","apply","concat","_d","_e","sent","errorCode","loadRestXmlErrorCode","deserializeAws_restXmlNoSuchUploadResponse","response","$metadata","deserializeMetadata","parsedBody","code","Code","message","Message","$fault","Promise","reject","assign","Error","deserializeAws_restXmlCompleteMultipartUploadCommandError","deserializeAws_restXmlCopyObjectCommandError","deserializeAws_restXmlObjectNotInActiveTierErrorResponse","deserializeAws_restXmlCreateMultipartUploadCommandError","deserializeAws_restXmlDeleteObjectCommandError","deserializeAws_restXmlGetObjectCommandError","_f","deserializeAws_restXmlInvalidObjectStateResponse","deserializeAws_restXmlNoSuchKeyResponse","deserializeAws_restXmlListObjectsV2CommandError","deserializeAws_restXmlNoSuchBucketResponse","deserializeAws_restXmlListPartsCommandError","deserializeAws_restXmlPutObjectCommandError","deserializeAws_restXmlUploadPartCommandError","contents","AccessTier","StorageClass","data","serializeAws_restXmlCompletedMultipartUpload","input","bodyNode","__XmlNode","Parts","serializeAws_restXmlCompletedPartList","node","filter","e","entry","ETag","__XmlText","PartNumber","String","serializeAws_restXmlCompletedPart","deserializeAws_restXmlCommonPrefixList","deserializeAws_restXmlCommonPrefix","deserializeAws_restXmlCopyObjectResult","LastModified","Date","deserializeAws_restXmlInitiator","ID","DisplayName","deserializeAws_restXmlObjectList","Key","Size","parseInt","deserializeAws_restXmlOwner","deserializeAws_restXml_Object","deserializeAws_restXmlParts","deserializeAws_restXmlPart","httpStatusCode","statusCode","requestId","headers","extendedRequestId","cfId","collectBody","streamBody","Uint8Array","resolve","streamCollector","isSerializableHeaderValue","getOwnPropertyNames","includes","size","then","utf8Encoder","collectBodyString","encoded","parsedObj","xmlParse","attributeNamePrefix","ignoreAttributes","parseNodeValue","tagValueProcessor","val","tagName","textNodeName","key","parsedObjToReturn","__getValueFromTextNode","t","n","arguments","p","hasOwnProperty","thisArg","_arguments","P","generator","fulfilled","step","rejected","result","__generator","f","y","g","label","trys","ops","verb","v","op","pop","__read","r","ar","error","validate","str","indexOf","split","DOMAIN_PATTERN","IP_ADDRESS_PATTERN","DOTS_PATTERN","DOT_PATTERN","S3_HOSTNAME_PATTERN","S3_US_EAST_1_ALTNAME_PATTERN","AWS_PARTITION_SUFFIX","getPseudoRegion","region","isFipsRegion","getRegionalSuffix","hostname","parts","match","RegExp","startsWith","endsWith","isEqualRegions","regionA","regionB","validateDNSHostLabel","options","tlsCompatible","test","bucketHostname","isCustomEndpoint","dualstackEndpoint","baseHostname","accelerateEndpoint","bucketName","isBucketNameOptions","getEndpointFromBucketName","getEndpointFromArn","clientRegion","hostnameSuffix","pathStyleEndpoint","useArnRegion","clientPartition","clientSigningRegion","validateArnEndpointOptions","service","partition","accountId","resource","validateService","validatePartition","exec","validateAccountId","validateRegion","_g","delimiter","resourceType","rest","slice","accesspointName","outpostId","getArnResources","endpointRegion","signingRegion","validateOutpostService","validateNoDualstack","validateNoFIPS","bucketEndpoint","signingService","validateS3Service","isDnsCompatibleBucketName","bucketEndpointMiddleware","args","replaceBucketInPath","request","HttpRequest","isInstance","validateArn","bucketArn","arn","segments","parseArn","regionInfoProvider","useAccelerateEndpoint","useDualstackEndpoint","forcePathStyle","protocol","modifiedSigningRegion","path","bucketEndpointMiddlewareOptions","tags","relation","toMiddleware","override","getBucketEndpointPlugin","applyToStack","clientStack","addRelativeTo","validateBucketNameMiddlewareOptions","getValidateBucketNamePlugin","unused","add","_this","err","validateBucketNameMiddleware","useRegionalEndpointMiddlewareOptions","getUseRegionalEndpointPlugin","config","useRegionalEndpointMiddleware","throw200ExceptionsMiddlewareOptions","getThrow200ExceptionsPlugin","HttpResponse","bodyBytes","bodyString","throw200ExceptionsMiddleware","ssecMiddlewareOptions","getSsecPlugin","properties","target","hash","properties_1","properties_1_1","prop","valueView","ArrayBuffer","isView","buffer","byteOffset","byteLength","utf8Decoder","base64Encoder","md5","update","digest","ssecMiddleware","CopyObjectCommand","_super","__extends","resolveMiddleware","configuration","middlewareStack","use","getSerdePlugin","serialize","deserialize","stack","handlerExecutionContext","logger","clientName","commandName","inputFilterSensitiveLog","outputFilterSensitiveLog","requestHandler","handle","ACL","CacheControl","ContentDisposition","ContentEncoding","ContentLanguage","ContentType","CopySource","CopySourceIfMatch","CopySourceIfModifiedSince","__dateToUtcString","CopySourceIfNoneMatch","CopySourceIfUnmodifiedSince","Expires","expires","GrantFullControl","GrantRead","GrantReadACP","GrantWriteACP","MetadataDirective","TaggingDirective","ServerSideEncryption","WebsiteRedirectLocation","SSECustomerAlgorithm","SSECustomerKeyMD5","BucketKeyEnabled","CopySourceSSECustomerAlgorithm","CopySourceSSECustomerKeyMD5","RequestPayer","ObjectLockMode","ObjectLockRetainUntilDate","toISOString","ObjectLockLegalHoldStatus","ExpectedBucketOwner","ExpectedSourceBucketOwner","Metadata","reduce","acc","suffix","toLowerCase","resolvedPath","labelValue","__extendedEncodeURIComponent","segment","query","endpoint","port","__HttpRequest","method","serializeAws_restXmlCopyObjectCommand","CopySourceVersionId","Expiration","RequestCharged","VersionId","deserializeAws_restXmlCopyObjectCommand","$Command","GetObjectCommand","IfMatch","IfModifiedSince","IfNoneMatch","IfUnmodifiedSince","Range","range","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","ResponseExpires","versionId","partNumber","serializeAws_restXmlGetObjectCommand","AcceptRanges","Body","ContentLength","ContentRange","DeleteMarker","MissingMeta","PartsCount","ReplicationStatus","Restore","TagCount","forEach","header","substring","deserializeAws_restXmlGetObjectCommand","DeleteObjectCommand","MFA","BypassGovernanceRetention","serializeAws_restXmlDeleteObjectCommand","deserializeAws_restXmlDeleteObjectCommand","ListObjectsV2Command","Delimiter","EncodingType","MaxKeys","prefix","ContinuationToken","FetchOwner","StartAfter","serializeAws_restXmlListObjectsV2Command","CommonPrefixes","Contents","IsTruncated","KeyCount","Name","NextContinuationToken","__getArrayIfSingleItem","deserializeAws_restXmlListObjectsV2Command","formatUrl","substr","charAt","queryString","buildQueryString","createRequest","client","command","interceptMiddleware","clone","priority","handler","StorageErrorStrings","AWSS3ProviderMultipartCopierErrors","AWSS3ProviderUploadErrorStrings","S3RequestPresigner","resolvedOptions","signingName","uriEscapePath","signer","SignatureV4","presign","requestToSign","unsignableHeaders","Set","unhoistableHeaders","getOwnPropertySymbols","propertyIsEnumerable","__rest","host","expiresIn","Logger","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","normalizeHeaders","normalizedName","entries","k","toUpperCase","reactNativeRequestTransformer","Blob","axios","transformRequest","AxiosHttpHandler","httpOptions","emitter","cancelTokenSource","destroy","requestTimeoutInMs","requestTimeout","url","axiosRequest","find","onUploadProgress","event","emit","debug","onDownloadProgress","cancelToken","token","responseType","Platform","isReactNative","raceOfPromises","status","catch","UPLOAD_PAUSED_MESSAGE","hasErrorResponse","race","timeoutInMs","setTimeout","timeoutError","AMPLIFY_SYMBOL","for","SET_CONTENT_LENGTH_HEADER","UPLOADS_STORAGE_KEY","dispatchStorageEvent","track","attrs","metrics","Hub","dispatch","isBlob","x","isArrayBuffer","Int64","bytes","fromNumber","number","remaining","Math","abs","round","negate","valueOf","negative","toHex","HEADER_VALUE_TYPE","HeaderMarshaller","toUtf8","fromUtf8","format","chunks","headerName","from","formatHeaderValue","out","carry","position","chunks_1","chunks_1_1","chunk","set","type","shortView","DataView","setUint8","setInt16","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","UUID_PATTERN","uuidBytes","fromHex","parse","nameLength","getUint8","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","UUID_TAG","subarray","EventStreamMarshaller","headerMarshaller","marshall","rawHeaders","view","checksum","Crc32","setUint32","unmarshall","PRELUDE_LENGTH","messageLength","getUint32","headerLength","expectedPreludeChecksum","PRELUDE_MEMBER_LENGTH","expectedMessageChecksum","checksummer","splitMessage","formatHeaders","__await","__asyncGenerator","asyncIterator","q","a","b","resume","fulfill","settle","shift","__asyncValues","d","getChunkedStream","source","currentMessageTotalLength","currentMessagePendingLength","currentMessage","messageLengthBuffer","sourceIterator","chunkLength","currentOffset","bytesRemaining","numBytesForTotal","min","allocateMessage","numBytesToWrite","eventMarshaller","EventMarshaller","utfEncoder","deserializer","unmarshalledStream","source_1","source_1_1","messageType","unmodeledError","exception","deserializedException","deserialized","getUnmarshalledStream","serializer","self","input_1","input_1_1","universalMarshaller","UniversalEventStreamMarshaller","bodyIterable","isReadableStream","readableStream","reader","getReader","read","releaseLock","readableStreamtoIterable","serialziedIterable","ReadableStream","asyncIterable","pull","controller","close","enqueue","iterableToReadableStream","blobReader","blob","onChunk","chunkSize","fileReader","FileReader","addEventListener","totalBytesRead","readAsArrayBuffer","BLOCK_SIZE","INIT","Md5","state","Uint32Array","bufferLength","bytesHashed","finished","sourceData","isEmptyData","BYTES_PER_ELEMENT","convertToBuffer","hashBuffer","undecoratedLength","bitsHashed","floor","ff","gg","hh","ii","cmn","AWS_TEMPLATE","AWS_REGIONS","AWS_CN_REGIONS","AWS_ISO_REGIONS","AWS_ISO_B_REGIONS","AWS_US_GOV_REGIONS","ClientSharedValues","apiVersion","disableHostPrefix","regionInfo","has","serviceId","signingEscapePath","urlParser","parseUrl","ClientDefaultValues","runtime","base64Decoder","fromBase64","toBase64","bodyLengthChecker","calculateBodyLength","credentialDefaultProvider","defaultUserAgentProvider","defaultUserAgent","clientVersion","eventStreamSerdeProvider","maxAttempts","DEFAULT_MAX_ATTEMPTS","invalidProvider","FetchHttpHandler","sha256","Sha256","streamHasher","hashCtor","MetadataEntry","S3Location","OutputLocation","FileHeaderInfo","CSVInput","JSONType","JSONInput","ParquetInput","InputSerialization","QuoteFields","CSVOutput","JSONOutput","OutputSerialization","SelectParameters","RestoreRequestType","RestoreRequest","RestoreObjectRequest","ContinuationEvent","EndEvent","Progress","ProgressEvent","RecordsEvent","Stats","StatsEvent","SelectObjectContentEventStream","SelectObjectContentOutput","RequestProgress","ScanRange","SelectObjectContentRequest","UploadPartOutput","UploadPartRequest","CopyPartResult","UploadPartCopyOutput","UploadPartCopyRequest","addExpectContinueMiddlewareOptions","getAddExpectContinuePlugin","Expect","addExpectContinueMiddleware","S3Client","_config_0","__ClientDefaultValues","_config_1","resolveRegionConfig","_config_2","resolveEndpointsConfig","_config_3","resolveAwsAuthConfig","_config_4","resolveRetryConfig","_config_6","resolveBucketEndpointConfig","resolveHostHeaderConfig","_config_7","resolveUserAgentConfig","_config_8","eventStreamMarshaller","getAwsAuthPlugin","getRetryPlugin","getContentLengthPlugin","getHostHeaderPlugin","getLoggerPlugin","getUserAgentPlugin","__Client","INVALID_CRED","accessKeyId","secretAccessKey","getPrefix","credentials","level","resolvedCustomPrefix","customPrefix","resolvedIdentityId","identityId","privatePath","private","protectedPath","protected","publicPath","public","createPrefixMiddleware","opt","_context","Credentials","get","cred","shear","clonedInput","autoAdjustClockskewMiddleware","err_1","ServerTime","serverDate","systemClockOffset","getTime","now","autoAdjustClockskewMiddlewareOptions","prefixMiddlewareOptions","credentialsProvider","warn","error_1","createS3Client","dangerouslyConnectToHttpEndpointForTesting","localTestingConfig","tls","s3client","customUserAgent","getAmplifyUserAgent","remove","PutObjectCommand","ContentMD5","serializeAws_restXmlPutObjectCommand","deserializeAws_restXmlPutObjectCommand","CreateMultipartUploadCommand","uploads","serializeAws_restXmlCreateMultipartUploadCommand","AbortDate","AbortRuleId","UploadId","deserializeAws_restXmlCreateMultipartUploadCommand","S3","Records","Cont","End","Payload","AWSS3UploadTaskState","TaskEvents","UploadPartCommand","uploadId","serializeAws_restXmlUploadPartCommand","deserializeAws_restXmlUploadPartCommand","CompleteMultipartUploadCommand","serializeAws_restXmlCompleteMultipartUploadCommand","Location","deserializeAws_restXmlCompleteMultipartUploadCommand","AbortMultipartUploadCommand","serializeAws_restXmlAbortMultipartUploadCommand","deserializeAws_restXmlAbortMultipartUploadCommand","ListPartsCommand","MaxParts","PartNumberMarker","serializeAws_restXmlListPartsCommand","NextPartNumberMarker","deserializeAws_restXmlListPartsCommand","AWSS3ProviderManagedUpload","params","opts","minPartSize","queueSize","completedParts","bytesUploaded","totalBytesToUpload","_createNewS3Client","upload","validateAndSanitizeBody","putObjectCommand","send","createMultiPartUpload","numberOfPartsToUpload","ceil","createParts","start","uploadParts","part","removeEventListener","finishMultiPartUpload","cleanup","bodyStart","bodyEnd","bodyPart","events","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","error_2","all","setupEventListener","allResults","error_3","completeUploadCommand","error_4","removeAllListeners","on","progress","progressChanged","loaded","incrementalUpdate","total","isGenericObject","JSON","stringify","comparePartNumber","AWSS3UploadTask","s3Client","file","storage","prefixPromise","partSize","inProgress","queued","totalBytes","storageSync","fileId","_getFileId","_validateParams","ERROR","defineProperty","IN_PROGRESS","_listSingleFile","bucket","listObjectRes","File","lastModified","_findCachedUploadParts","_listCachedUploadTasks","uploadRequests","cachedUploadFileData","lastTouched","setItem","_emitEvent","payload","tasks","getItem","_cache","fileMetadata","_isCached","_removeFromCache","_onPartUploadCompletion","eTag","UPLOAD_PROGRESS","job","uploadPartInput","PAUSED","_startNextPart","_isDone","_completeUpload","sort","_verifyFileSize","UPLOAD_COMPLETE","COMPLETED","_makeUploadPartRequest","res","log","CANCELLED","err_2","pause","nextPart","s3Request","cancel","valid","_createParts","_initCachedUploadParts","cachedParts","uploadedPartNumSet","_initMultipartUpload","fileName","_initializeUploadTask","_startUpload","err_3","_cancel","err_4","removedInProgressReq","splice","req","unshift","__spread","DEFAULT_STORAGE_LEVEL","AWSS3Provider","_config","_storage","StorageHelper","getStorage","listen","removeItem","getCategory","CATEGORY","getProviderName","PROVIDER_NAME","configure","amplifyConfig","Parser","parseMobilehubConfig","Storage","startResumableUpload","addTaskInput","progressCallback","completeCallback","errorCallback","INVALID_BLOB","task","copy","src","dest","_ensureCredentials","_isWithCredentials","NO_CREDENTIALS","acl","cacheControl","serverSideEncryption","srcLevel","srcIdentityId","srcKey","destLevel","destKey","NO_SRC_KEY","NO_DEST_KEY","srcPrefix","_prefix","destPrefix","finalSrcKey","finalDestKey","s3","download","contentDisposition","contentEncoding","contentLanguage","contentType","final_key","getObjectCommand","fileSize","Number","put","object","resumable","metadata","tagging","uploader","accessLevel","deleteObjectCommand","_list","nextToken","listObjectsV2Command","list","maxKeys","final_path","listResult","error_5","error_6","DEFAULT_PROVIDER","_pluggables","_cancelTokenSourceMap","WeakMap","bind","getModuleName","addPluggable","pluggable","getPluggable","providerName","removePluggable","storageKeysFromConfig","storageArrayKeys","isInStorageArrayKeys","some","getCancellableTokenSource","updateRequestToBeCancellable","isUploadTask","provider","prov","responsePromise","isCancelError","_instance","vault","old_configure","vaultConfig","getInstance","Amplify","register","imageFileType","calcKey","fileToKey","encodeURI","getStorageObject","NO_STORAGE_MODULE_FOUND","getTextSource","textSrc","onload","onerror","abort","readAsText","putStorageObject","util_1","require","index_1","AwsCrc32","crc32","toHash","numToUint8","exports","data_1","tslib_1","data_1_1","byte","lookupTable","uint32ArrayFrom","aws_crc32_1","enumerable","extendStatics","setPrototypeOf","__proto__","Array","__","constructor","create","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","__createBinding","k2","__exportStar","__spreadArrays","il","j","jl","__asyncDelegator","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","default","__importDefault","__classPrivateFieldGet","receiver","privateMap","__classPrivateFieldSet","module","utils","cookies","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","defaults","Cancel","onCanceled","requestData","requestHeaders","unsubscribe","signal","isFormData","XMLHttpRequest","auth","username","password","unescape","encodeURIComponent","Authorization","btoa","fullPath","baseURL","onloadend","responseHeaders","getAllResponseHeaders","responseText","statusText","open","paramsSerializer","timeout","onreadystatechange","readyState","responseURL","onabort","ontimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","isStandardBrowserEnv","xsrfValue","withCredentials","xsrfCookieName","xsrfHeaderName","setRequestHeader","isUndefined","subscribe","aborted","Axios","mergeConfig","createInstance","defaultConfig","instance","extend","instanceConfig","CancelToken","isCancel","VERSION","promises","spread","isAxiosError","__CANCEL__","executor","resolvePromise","promise","_listeners","l","onfulfilled","_resolve","reason","throwIfRequested","listener","index","InterceptorManager","dispatchRequest","validator","validators","interceptors","configOrUrl","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","requestInterceptorChain","synchronousRequestInterceptors","interceptor","runWhen","synchronous","responseInterceptorChain","chain","newConfig","onFulfilled","onRejected","getUri","handlers","eject","id","fn","h","isAbsoluteURL","combineURLs","requestedURL","enhanceError","transformData","throwIfCancellationRequested","merge","common","adapter","transformResponse","toJSON","description","lineNumber","columnNumber","config1","config2","getMergedValue","isPlainObject","isArray","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","configValue","validateStatus","fns","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","process","getDefaultAdapter","isBuffer","isStream","isFile","isArrayBufferView","isURLSearchParams","isObject","rawValue","parser","encoder","isString","trim","stringifySafely","strictJSONParsing","maxContentLength","maxBodyLength","encode","serializedParams","isDate","hashmarkIndex","relativeURL","write","domain","secure","cookie","isNumber","toGMTString","document","decodeURIComponent","originURL","msie","navigator","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","search","pathname","window","location","requestURL","parsed","ignoreDuplicateOf","line","callback","arr","thing","deprecatedWarnings","version","formatMessage","console","schema","allowUnknown","getPrototypeOf","isFunction","pipe","product","assignValue","stripBOM","content","charCodeAt","ReflectOwnKeys","R","ReflectApply","Function","ownKeys","NumberIsNaN","isNaN","init","once","errorListener","removeListener","resolver","eventTargetAgnosticAddListener","flags","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","existing","warning","newListener","warned","w","count","onceWrapper","fired","wrapFn","_onceWrap","wrapped","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","wrapListener","arg","RangeError","setMaxListeners","getMaxListeners","doError","er","len","listeners","addListener","prependListener","prependOnceListener","originalListener","spliceOne","off","rawListeners","eventNames","_defineProperty","buildOptions","defaultOptions","attrNodeName","cdataTagName","cdataPositionChar","indentBy","supressEmptyNode","attrValueProcessor","props","isAttribute","attrPrefixLen","isCDATA","replaceCDATAstr","replaceCDATAarr","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","j2x","attrStr","cdata","repeat","jObj","rootNodeName","attr","arrLen","Ks","L","char","fromCharCode","chars","nilChar","missingChar","nilPremitive","missingPremitive","emptyChar","emptyValue","boundryChar","objStart","arrStart","arrayEnd","charsArr","e_schema","getValue","hasValidData","attrsMap","itemSchema","arr_len","arr_i","processValue","isAppChar","ch","x2j","convert2nimn","util","convertToJson","parentTagName","alwaysCreateTextNode","isEmptyObject","isExist","asArray","isTagNameInArrayMode","tagname","arrayMode","tag","_cToJsonStr","convertToJsonString","nodeToJson","xmlToNodeobj","x2xmlnode","xmlData","givenOptions","validationOption","msg","parseTrueNumberOnly","numParseOptions","leadingZeros","traversableObj","getTraversalObj","convertTonimn","j2xParser","parseToNimn","nameStartChar","nameRegexp","regexName","newOptions","isName","string","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","allowBooleanAttributes","readPI","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","tagFound","reachedRoot","tagStartPos","closingTag","readAttributeStr","attrStrStart","isValid","validateAttributeString","tagClosed","otg","openPos","col","afterAmp","validateAmpersand","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","re","validateNumberAmpersand","lines","parent","addChild","xmlNode","toNumber","parseFloat","ignoreNameSpace","parseAttributeValue","trimValues","hex","stopNodes","processTagValue","parseValue","resolveNameSpace","shouldParse","newval","attrsRegx","buildAttributesMap","attrCollection","closingIndexForOpeningTag","attrBoundary","tagExp","findClosingIndex","errMsg","closingIndex","xmlObj","currentNode","textData","closeIndex","colonIndex","childNode","separatorIndex","shouldBuildAttributesMap","lastIndexOf","hexRegex","numRegex","consider","decimalPoint","eNotation","trimmedStr","skipLike","sign","numTrimmedByZeros","numStr","trimZeros","num","toPropertyKey","configurable","writable","_typeof","hint","prim","toPrimitive"],"sourceRoot":""}